/*! For license information please see main.b86e70e83cbe036b7b68.bundle.js.LICENSE.txt */
(()=>{var e={248:(e,t,n)=>{var r,o,i;o=[n(755)],r=function(e){"use strict";var t=!1,n=!1,r=0,o=2e3,i=0,s=e,a=document,l=window,c=s(l),u=[];function d(){var e,t=a.currentScript||!!(e=a.getElementsByTagName("script")).length&&e[e.length-1],n=t?t.src.split("?")[0]:"";return n.split("/").length>0?n.split("/").slice(0,-1).join("/")+"/":""}var h=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||!1,f=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||!1;if(h)l.cancelAnimationFrame||(f=function(e){});else{var p=0;h=function(e,t){var n=(new Date).getTime(),r=Math.max(0,16-(n-p)),o=l.setTimeout((function(){e(n+r)}),r);return p=n+r,o},f=function(e){l.clearTimeout(e)}}var m=l.MutationObserver||l.WebKitMutationObserver||!1,g=Date.now||function(){return(new Date).getTime()},v={zindex:"auto",cursoropacitymin:0,cursoropacitymax:1,cursorcolor:"#424242",cursorwidth:"6px",cursorborder:"1px solid #fff",cursorborderradius:"5px",scrollspeed:40,mousescrollstep:27,touchbehavior:!1,emulatetouch:!1,hwacceleration:!0,usetransition:!0,boxzoom:!1,dblclickzoom:!0,gesturezoom:!0,grabcursorenabled:!0,autohidemode:!0,background:"",iframeautoresize:!0,cursorminheight:32,preservenativescrolling:!0,railoffset:!1,railhoffset:!1,bouncescroll:!0,spacebarenabled:!0,railpadding:{top:0,right:0,left:0,bottom:0},disableoutline:!0,horizrailenabled:!0,railalign:"right",railvalign:"bottom",enabletranslate3d:!0,enablemousewheel:!0,enablekeyboard:!0,smoothscroll:!0,sensitiverail:!0,enablemouselockapi:!0,cursorfixedheight:!1,directionlockdeadzone:6,hidecursordelay:400,nativeparentscrolling:!0,enablescrollonselection:!0,overflowx:!0,overflowy:!0,cursordragspeed:.3,rtlmode:"auto",cursordragontouch:!1,oneaxismousemode:"auto",scriptpath:d(),preventmultitouchscrolling:!0,disablemutationobserver:!1,enableobserver:!0,scrollbarid:!1},y=!1,b=function(){if(y)return y;var e=a.createElement("DIV"),t=e.style,n=navigator.userAgent,r=navigator.platform,o={};function i(){var e=["grab","-webkit-grab","-moz-grab"];(o.ischrome&&!o.ischrome38||o.isie)&&(e=[]);for(var n=0,r=e.length;n<r;n++){var i=e[n];if(t.cursor=i,t.cursor==i)return i}return"url(https://cdnjs.cloudflare.com/ajax/libs/slider-pro/1.3.0/css/images/openhand.cur),n-resize"}return o.haspointerlock="pointerLockElement"in a||"webkitPointerLockElement"in a||"mozPointerLockElement"in a,o.isopera="opera"in l,o.isopera12=o.isopera&&"getUserMedia"in navigator,o.isoperamini="[object OperaMini]"===Object.prototype.toString.call(l.operamini),o.isie="all"in a&&"attachEvent"in e&&!o.isopera,o.isieold=o.isie&&!("msInterpolationMode"in t),o.isie7=o.isie&&!o.isieold&&(!("documentMode"in a)||7===a.documentMode),o.isie8=o.isie&&"documentMode"in a&&8===a.documentMode,o.isie9=o.isie&&"performance"in l&&9===a.documentMode,o.isie10=o.isie&&"performance"in l&&10===a.documentMode,o.isie11="msRequestFullscreen"in e&&a.documentMode>=11,o.ismsedge="msCredentials"in l,o.ismozilla="MozAppearance"in t,o.iswebkit=!o.ismsedge&&"WebkitAppearance"in t,o.ischrome=o.iswebkit&&"chrome"in l,o.ischrome38=o.ischrome&&"touchAction"in t,o.ischrome22=!o.ischrome38&&o.ischrome&&o.haspointerlock,o.ischrome26=!o.ischrome38&&o.ischrome&&"transition"in t,o.cantouch="ontouchstart"in a.documentElement||"ontouchstart"in l,o.hasw3ctouch=!!l.PointerEvent&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0),o.hasmstouch=!o.hasw3ctouch&&(l.MSPointerEvent||!1),o.ismac=/^mac$/i.test(r),o.isios=o.cantouch&&/iphone|ipad|ipod/i.test(r),o.isios4=o.isios&&!("seal"in Object),o.isios7=o.isios&&"webkitHidden"in a,o.isios8=o.isios&&"hidden"in a,o.isios10=o.isios&&l.Proxy,o.isandroid=/android/i.test(n),o.haseventlistener="addEventListener"in e,o.trstyle=!1,o.hastransform=!1,o.hastranslate3d=!1,o.transitionstyle=!1,o.hastransition=!1,o.transitionend=!1,o.trstyle="transform",o.hastransform="transform"in t||function(){for(var e=["msTransform","webkitTransform","MozTransform","OTransform"],n=0,r=e.length;n<r;n++)if(void 0!==t[e[n]]){o.trstyle=e[n];break}o.hastransform=!!o.trstyle}(),o.hastransform&&(t[o.trstyle]="translate3d(1px,2px,3px)",o.hastranslate3d=/translate3d/.test(t[o.trstyle])),o.transitionstyle="transition",o.prefixstyle="",o.transitionend="transitionend",o.hastransition="transition"in t||function(){o.transitionend=!1;for(var e=["webkitTransition","msTransition","MozTransition","OTransition","OTransition","KhtmlTransition"],n=["-webkit-","-ms-","-moz-","-o-","-o","-khtml-"],r=["webkitTransitionEnd","msTransitionEnd","transitionend","otransitionend","oTransitionEnd","KhtmlTransitionEnd"],i=0,s=e.length;i<s;i++)if(e[i]in t){o.transitionstyle=e[i],o.prefixstyle=n[i],o.transitionend=r[i];break}o.ischrome26&&(o.prefixstyle=n[1]),o.hastransition=o.transitionstyle}(),o.cursorgrabvalue=i(),o.hasmousecapture="setCapture"in e,o.hasMutationObserver=!1!==m,e=null,y=o,o},x=function(e,d){var p=this;this.version="3.7.6",this.name="nicescroll",this.me=d;var y=s("body"),x=this.opt={doc:y,win:!1};if(s.extend(x,v),x.snapbackspeed=80,e)for(var T in x)void 0!==e[T]&&(x[T]=e[T]);if(x.disablemutationobserver&&(m=!1),this.doc=x.doc,this.iddoc=this.doc&&this.doc[0]&&this.doc[0].id||"",this.ispage=/^BODY|HTML/.test(x.win?x.win[0].nodeName:this.doc[0].nodeName),this.haswrapper=!1!==x.win,this.win=x.win||(this.ispage?c:this.doc),this.docscroll=this.ispage&&!this.haswrapper?c:this.win,this.body=y,this.viewport=!1,this.isfixed=!1,this.iframe=!1,this.isiframe="IFRAME"==this.doc[0].nodeName&&"IFRAME"==this.win[0].nodeName,this.istextarea="TEXTAREA"==this.win[0].nodeName,this.forcescreen=!1,this.canshowonmouseevent="scroll"!=x.autohidemode,this.onmousedown=!1,this.onmouseup=!1,this.onmousemove=!1,this.onmousewheel=!1,this.onkeypress=!1,this.ongesturezoom=!1,this.onclick=!1,this.onscrollstart=!1,this.onscrollend=!1,this.onscrollcancel=!1,this.onzoomin=!1,this.onzoomout=!1,this.view=!1,this.page=!1,this.scroll={x:0,y:0},this.scrollratio={x:0,y:0},this.cursorheight=20,this.scrollvaluemax=0,"auto"==x.rtlmode){var S=this.win[0]==l?this.body:this.win,k=S.css("writing-mode")||S.css("-webkit-writing-mode")||S.css("-ms-writing-mode")||S.css("-moz-writing-mode");"horizontal-tb"==k||"lr-tb"==k||""===k?(this.isrtlmode="rtl"==S.css("direction"),this.isvertical=!1):(this.isrtlmode="vertical-rl"==k||"tb"==k||"tb-rl"==k||"rl-tb"==k,this.isvertical="vertical-rl"==k||"tb"==k||"tb-rl"==k)}else this.isrtlmode=!0===x.rtlmode,this.isvertical=!1;if(this.scrollrunning=!1,this.scrollmom=!1,this.observer=!1,this.observerremover=!1,this.observerbody=!1,!1!==x.scrollbarid)this.id=x.scrollbarid;else do{this.id="ascrail"+o++}while(a.getElementById(this.id));this.rail=!1,this.cursor=!1,this.cursorfreezed=!1,this.selectiondrag=!1,this.zoom=!1,this.zoomactive=!1,this.hasfocus=!1,this.hasmousefocus=!1,this.railslocked=!1,this.locked=!1,this.hidden=!1,this.cursoractive=!0,this.wheelprevented=!1,this.overflowx=x.overflowx,this.overflowy=x.overflowy,this.nativescrollingarea=!1,this.checkarea=0,this.events=[],this.saved={},this.delaylist={},this.synclist={},this.lastdeltax=0,this.lastdeltay=0,this.detected=b();var C=s.extend({},this.detected);this.canhwscroll=C.hastransform&&x.hwacceleration,this.ishwscroll=this.canhwscroll&&p.haswrapper,this.isrtlmode?this.isvertical?this.hasreversehr=!(C.iswebkit||C.isie||C.isie11):this.hasreversehr=!(C.iswebkit||C.isie&&!C.isie10&&!C.isie11):this.hasreversehr=!1,this.istouchcapable=!1,(C.cantouch||!C.hasw3ctouch&&!C.hasmstouch)&&(!C.cantouch||C.isios||C.isandroid||!C.iswebkit&&!C.ismozilla)||(this.istouchcapable=!0),x.enablemouselockapi||(C.hasmousecapture=!1,C.haspointerlock=!1),this.debounced=function(e,t,n){p&&(p.delaylist[e]||(p.delaylist[e]={h:h((function(){p.delaylist[e].fn.call(p),p.delaylist[e]=!1}),n)},t.call(p)),p.delaylist[e].fn=t)},this.synched=function(e,t){p.synclist[e]?p.synclist[e]=t:(p.synclist[e]=t,h((function(){p&&(p.synclist[e]&&p.synclist[e].call(p),p.synclist[e]=null)})))},this.unsynched=function(e){p.synclist[e]&&(p.synclist[e]=!1)},this.css=function(e,t){for(var n in t)p.saved.css.push([e,n,e.css(n)]),e.css(n,t[n])},this.scrollTop=function(e){return void 0===e?p.getScrollTop():p.setScrollTop(e)},this.scrollLeft=function(e){return void 0===e?p.getScrollLeft():p.setScrollLeft(e)};var E=function(e,t,n,r,o,i,s){this.st=e,this.ed=t,this.spd=n,this.p1=r||0,this.p2=o||1,this.p3=i||0,this.p4=s||1,this.ts=g(),this.df=t-e};function z(){var e=p.doc.css(C.trstyle);return!(!e||"matrix"!=e.substr(0,6))&&e.replace(/^.*\((.*)\)$/g,"$1").replace(/px/g,"").split(/, +/)}if(E.prototype={B2:function(e){return 3*(1-e)*(1-e)*e},B3:function(e){return 3*(1-e)*e*e},B4:function(e){return e*e*e},getPos:function(){return(g()-this.ts)/this.spd},getNow:function(){var e=(g()-this.ts)/this.spd,t=this.B2(e)+this.B3(e)+this.B4(e);return e>=1?this.ed:this.st+this.df*t|0},update:function(e,t){return this.st=this.getNow(),this.ed=e,this.spd=t,this.ts=g(),this.df=this.ed-this.st,this}},this.ishwscroll){this.doc.translate={x:0,y:0,tx:"0px",ty:"0px"},C.hastranslate3d&&C.isios&&this.doc.css("-webkit-backface-visibility","hidden"),this.getScrollTop=function(e){if(!e){var t=z();if(t)return 16==t.length?-t[13]:-t[5];if(p.timerscroll&&p.timerscroll.bz)return p.timerscroll.bz.getNow()}return p.doc.translate.y},this.getScrollLeft=function(e){if(!e){var t=z();if(t)return 16==t.length?-t[12]:-t[4];if(p.timerscroll&&p.timerscroll.bh)return p.timerscroll.bh.getNow()}return p.doc.translate.x},this.notifyScrollEvent=function(e){var t=a.createEvent("UIEvents");t.initUIEvent("scroll",!1,!1,l,1),t.niceevent=!0,e.dispatchEvent(t)};var L=this.isrtlmode?1:-1;C.hastranslate3d&&x.enabletranslate3d?(this.setScrollTop=function(e,t){p.doc.translate.y=e,p.doc.translate.ty=-1*e+"px",p.doc.css(C.trstyle,"translate3d("+p.doc.translate.tx+","+p.doc.translate.ty+",0)"),t||p.notifyScrollEvent(p.win[0])},this.setScrollLeft=function(e,t){p.doc.translate.x=e,p.doc.translate.tx=e*L+"px",p.doc.css(C.trstyle,"translate3d("+p.doc.translate.tx+","+p.doc.translate.ty+",0)"),t||p.notifyScrollEvent(p.win[0])}):(this.setScrollTop=function(e,t){p.doc.translate.y=e,p.doc.translate.ty=-1*e+"px",p.doc.css(C.trstyle,"translate("+p.doc.translate.tx+","+p.doc.translate.ty+")"),t||p.notifyScrollEvent(p.win[0])},this.setScrollLeft=function(e,t){p.doc.translate.x=e,p.doc.translate.tx=e*L+"px",p.doc.css(C.trstyle,"translate("+p.doc.translate.tx+","+p.doc.translate.ty+")"),t||p.notifyScrollEvent(p.win[0])})}else this.getScrollTop=function(){return p.docscroll.scrollTop()},this.setScrollTop=function(e){p.docscroll.scrollTop(e)},this.getScrollLeft=function(){return p.hasreversehr?p.detected.ismozilla?p.page.maxw-Math.abs(p.docscroll.scrollLeft()):p.page.maxw-p.docscroll.scrollLeft():p.docscroll.scrollLeft()},this.setScrollLeft=function(e){return setTimeout((function(){if(p)return p.hasreversehr&&(e=p.detected.ismozilla?-(p.page.maxw-e):p.page.maxw-e),p.docscroll.scrollLeft(e)}),1)};function N(){var e=p.win;if("zIndex"in e)return e.zIndex();for(;e.length>0;){if(9==e[0].nodeType)return!1;var t=e.css("zIndex");if(!isNaN(t)&&0!==t)return parseInt(t);e=e.parent()}return!1}this.getTarget=function(e){return!!e&&(e.target?e.target:!!e.srcElement&&e.srcElement)},this.hasParent=function(e,t){if(!e)return!1;for(var n=e.target||e.srcElement||e||!1;n&&n.id!=t;)n=n.parentNode||!1;return!1!==n};var A={thin:1,medium:3,thick:5};function D(e,t,n){var r=e.css(t),o=parseFloat(r);if(isNaN(o)){var i=3==(o=A[r]||0)?n?p.win.outerHeight()-p.win.innerHeight():p.win.outerWidth()-p.win.innerWidth():1;return p.isie8&&o&&(o+=1),i?o:0}return o}this.getDocumentScrollOffset=function(){return{top:l.pageYOffset||a.documentElement.scrollTop,left:l.pageXOffset||a.documentElement.scrollLeft}},this.getOffset=function(){if(p.isfixed){var e=p.win.offset(),t=p.getDocumentScrollOffset();return e.top-=t.top,e.left-=t.left,e}var n=p.win.offset();if(!p.viewport)return n;var r=p.viewport.offset();return{top:n.top-r.top,left:n.left-r.left}},this.updateScrollBar=function(e){var t,n;if(p.ishwscroll)p.rail.css({height:p.win.innerHeight()-(x.railpadding.top+x.railpadding.bottom)}),p.railh&&p.railh.css({width:p.win.innerWidth()-(x.railpadding.left+x.railpadding.right)});else{var r=p.getOffset();if((t={top:r.top,left:r.left-(x.railpadding.left+x.railpadding.right)}).top+=D(p.win,"border-top-width",!0),t.left+=p.rail.align?p.win.outerWidth()-D(p.win,"border-right-width")-p.rail.width:D(p.win,"border-left-width"),(n=x.railoffset)&&(n.top&&(t.top+=n.top),n.left&&(t.left+=n.left)),p.railslocked||p.rail.css({top:t.top,left:t.left,height:(e?e.h:p.win.innerHeight())-(x.railpadding.top+x.railpadding.bottom)}),p.zoom&&p.zoom.css({top:t.top+1,left:1==p.rail.align?t.left-20:t.left+p.rail.width+4}),p.railh&&!p.railslocked){t={top:r.top,left:r.left},(n=x.railhoffset)&&(n.top&&(t.top+=n.top),n.left&&(t.left+=n.left));var o=p.railh.align?t.top+D(p.win,"border-top-width",!0)+p.win.innerHeight()-p.railh.height:t.top+D(p.win,"border-top-width",!0),i=t.left+D(p.win,"border-left-width");p.railh.css({top:o-(x.railpadding.top+x.railpadding.bottom),left:i,width:p.railh.width})}}},this.doRailClick=function(e,t,n){var r,o,i,s;p.railslocked||(p.cancelEvent(e),"pageY"in e||(e.pageX=e.clientX+a.documentElement.scrollLeft,e.pageY=e.clientY+a.documentElement.scrollTop),t?(r=n?p.doScrollLeft:p.doScrollTop,i=n?(e.pageX-p.railh.offset().left-p.cursorwidth/2)*p.scrollratio.x:(e.pageY-p.rail.offset().top-p.cursorheight/2)*p.scrollratio.y,p.unsynched("relativexy"),r(0|i)):(r=n?p.doScrollLeftBy:p.doScrollBy,i=n?p.scroll.x:p.scroll.y,s=n?e.pageX-p.railh.offset().left:e.pageY-p.rail.offset().top,o=n?p.view.w:p.view.h,r(i>=s?o:-o)))},p.newscrolly=p.newscrollx=0,p.hasanimationframe="requestAnimationFrame"in l,p.hascancelanimationframe="cancelAnimationFrame"in l,p.hasborderbox=!1,this.init=function(){if(p.saved.css=[],C.isoperamini)return!0;if(C.isandroid&&!("hidden"in a))return!0;x.emulatetouch=x.emulatetouch||x.touchbehavior,p.hasborderbox=l.getComputedStyle&&"border-box"===l.getComputedStyle(a.body)["box-sizing"];var e={"overflow-y":"hidden"};if((C.isie11||C.isie10)&&(e["-ms-overflow-style"]="none"),p.ishwscroll&&(this.doc.css(C.transitionstyle,C.prefixstyle+"transform 0ms ease-out"),C.transitionend&&p.bind(p.doc,C.transitionend,p.onScrollTransitionEnd,!1)),p.zindex="auto",p.ispage||"auto"!=x.zindex?p.zindex=x.zindex:p.zindex=N()||"auto",!p.ispage&&"auto"!=p.zindex&&p.zindex>i&&(i=p.zindex),p.isie&&0===p.zindex&&"auto"==x.zindex&&(p.zindex="auto"),!p.ispage||!C.isieold){var o=p.docscroll;p.ispage&&(o=p.haswrapper?p.win:p.doc),p.css(o,e),p.ispage&&(C.isie11||C.isie)&&p.css(s("html"),e),!C.isios||p.ispage||p.haswrapper||p.css(y,{"-webkit-overflow-scrolling":"touch"});var u=s(a.createElement("div"));u.css({position:"relative",top:0,float:"right",width:x.cursorwidth,height:0,"background-color":x.cursorcolor,border:x.cursorborder,"background-clip":"padding-box","-webkit-border-radius":x.cursorborderradius,"-moz-border-radius":x.cursorborderradius,"border-radius":x.cursorborderradius}),u.addClass("nicescroll-cursors"),p.cursor=u;var d=s(a.createElement("div"));d.attr("id",p.id),d.addClass("nicescroll-rails nicescroll-rails-vr");var h,f,g=["left","right","top","bottom"];for(var v in g)f=g[v],(h=x.railpadding[f]||0)&&d.css("padding-"+f,h+"px");d.append(u),d.width=Math.max(parseFloat(x.cursorwidth),u.outerWidth()),d.css({width:d.width+"px",zIndex:p.zindex,background:x.background,cursor:"default"}),d.visibility=!0,d.scrollable=!0,d.align="left"==x.railalign?0:1,p.rail=d,p.rail.drag=!1;var b,T=!1;if(!x.boxzoom||p.ispage||C.isieold||(T=a.createElement("div"),p.bind(T,"click",p.doZoom),p.bind(T,"mouseenter",(function(){p.zoom.css("opacity",x.cursoropacitymax)})),p.bind(T,"mouseleave",(function(){p.zoom.css("opacity",x.cursoropacitymin)})),p.zoom=s(T),p.zoom.css({cursor:"pointer",zIndex:p.zindex,backgroundImage:"url("+x.scriptpath+"zoomico.png)",height:18,width:18,backgroundPosition:"0 0"}),x.dblclickzoom&&p.bind(p.win,"dblclick",p.doZoom),C.cantouch&&x.gesturezoom&&(p.ongesturezoom=function(e){return e.scale>1.5&&p.doZoomIn(e),e.scale<.8&&p.doZoomOut(e),p.cancelEvent(e)},p.bind(p.win,"gestureend",p.ongesturezoom))),p.railh=!1,x.horizrailenabled&&(p.css(o,{overflowX:"hidden"}),(u=s(a.createElement("div"))).css({position:"absolute",top:0,height:x.cursorwidth,width:0,backgroundColor:x.cursorcolor,border:x.cursorborder,backgroundClip:"padding-box","-webkit-border-radius":x.cursorborderradius,"-moz-border-radius":x.cursorborderradius,"border-radius":x.cursorborderradius}),C.isieold&&u.css("overflow","hidden"),u.addClass("nicescroll-cursors"),p.cursorh=u,(b=s(a.createElement("div"))).attr("id",p.id+"-hr"),b.addClass("nicescroll-rails nicescroll-rails-hr"),b.height=Math.max(parseFloat(x.cursorwidth),u.outerHeight()),b.css({height:b.height+"px",zIndex:p.zindex,background:x.background}),b.append(u),b.visibility=!0,b.scrollable=!0,b.align="top"==x.railvalign?0:1,p.railh=b,p.railh.drag=!1),p.ispage)d.css({position:"fixed",top:0,height:"100%"}),d.css(d.align?{right:0}:{left:0}),p.body.append(d),p.railh&&(b.css({position:"fixed",left:0,width:"100%"}),b.css(b.align?{bottom:0}:{top:0}),p.body.append(b));else{if(p.ishwscroll){"static"==p.win.css("position")&&p.css(p.win,{position:"relative"});var S="HTML"==p.win[0].nodeName?p.body:p.win;s(S).scrollTop(0).scrollLeft(0),p.zoom&&(p.zoom.css({position:"absolute",top:1,right:0,"margin-right":d.width+4}),S.append(p.zoom)),d.css({position:"absolute",top:0}),d.css(d.align?{right:0}:{left:0}),S.append(d),b&&(b.css({position:"absolute",left:0,bottom:0}),b.css(b.align?{bottom:0}:{top:0}),S.append(b))}else{p.isfixed="fixed"==p.win.css("position");var k=p.isfixed?"fixed":"absolute";p.isfixed||(p.viewport=p.getViewport(p.win[0])),p.viewport&&(p.body=p.viewport,/fixed|absolute/.test(p.viewport.css("position"))||p.css(p.viewport,{position:"relative"})),d.css({position:k}),p.zoom&&p.zoom.css({position:k}),p.updateScrollBar(),p.body.append(d),p.zoom&&p.body.append(p.zoom),p.railh&&(b.css({position:k}),p.body.append(b))}C.isios&&p.css(p.win,{"-webkit-tap-highlight-color":"rgba(0,0,0,0)","-webkit-touch-callout":"none"}),x.disableoutline&&(C.isie&&p.win.attr("hideFocus","true"),C.iswebkit&&p.win.css("outline","none"))}if(!1===x.autohidemode?(p.autohidedom=!1,p.rail.css({opacity:x.cursoropacitymax}),p.railh&&p.railh.css({opacity:x.cursoropacitymax})):!0===x.autohidemode||"leave"===x.autohidemode?(p.autohidedom=s().add(p.rail),C.isie8&&(p.autohidedom=p.autohidedom.add(p.cursor)),p.railh&&(p.autohidedom=p.autohidedom.add(p.railh)),p.railh&&C.isie8&&(p.autohidedom=p.autohidedom.add(p.cursorh))):"scroll"==x.autohidemode?(p.autohidedom=s().add(p.rail),p.railh&&(p.autohidedom=p.autohidedom.add(p.railh))):"cursor"==x.autohidemode?(p.autohidedom=s().add(p.cursor),p.railh&&(p.autohidedom=p.autohidedom.add(p.cursorh))):"hidden"==x.autohidemode&&(p.autohidedom=!1,p.hide(),p.railslocked=!1),C.cantouch||p.istouchcapable||x.emulatetouch||C.hasmstouch){p.scrollmom=new w(p),p.ontouchstart=function(e){if(p.locked)return!1;if(e.pointerType&&("mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))return!1;if(p.hasmoving=!1,p.scrollmom.timer&&(p.triggerScrollEnd(),p.scrollmom.stop()),!p.railslocked){var t=p.getTarget(e);if(t&&/INPUT/i.test(t.nodeName)&&/range/i.test(t.type))return p.stopPropagation(e);var n="mousedown"===e.type;if(!("clientX"in e)&&"changedTouches"in e&&(e.clientX=e.changedTouches[0].clientX,e.clientY=e.changedTouches[0].clientY),p.forcescreen){var r=e;(e={original:e.original?e.original:e}).clientX=r.screenX,e.clientY=r.screenY}if(p.rail.drag={x:e.clientX,y:e.clientY,sx:p.scroll.x,sy:p.scroll.y,st:p.getScrollTop(),sl:p.getScrollLeft(),pt:2,dl:!1,tg:t},p.ispage||!x.directionlockdeadzone)p.rail.drag.dl="f";else{var o={w:c.width(),h:c.height()},i=p.getContentSize(),a=i.h-o.h,l=i.w-o.w;p.rail.scrollable&&!p.railh.scrollable?p.rail.drag.ck=a>0&&"v":!p.rail.scrollable&&p.railh.scrollable?p.rail.drag.ck=l>0&&"h":p.rail.drag.ck=!1}if(x.emulatetouch&&p.isiframe&&C.isie){var u=p.win.position();p.rail.drag.x+=u.left,p.rail.drag.y+=u.top}if(p.hasmoving=!1,p.lastmouseup=!1,p.scrollmom.reset(e.clientX,e.clientY),t&&n){if(!/INPUT|SELECT|BUTTON|TEXTAREA/i.test(t.nodeName))return C.hasmousecapture&&t.setCapture(),x.emulatetouch?(t.onclick&&!t._onclick&&(t._onclick=t.onclick,t.onclick=function(e){if(p.hasmoving)return!1;t._onclick.call(this,e)}),p.cancelEvent(e)):p.stopPropagation(e);/SUBMIT|CANCEL|BUTTON/i.test(s(t).attr("type"))&&(p.preventclick={tg:t,click:!1})}}},p.ontouchend=function(e){if(!p.rail.drag)return!0;if(2==p.rail.drag.pt){if(e.pointerType&&("mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))return!1;p.rail.drag=!1;var t="mouseup"===e.type;if(p.hasmoving&&(p.scrollmom.doMomentum(),p.lastmouseup=!0,p.hideCursor(),C.hasmousecapture&&a.releaseCapture(),t))return p.cancelEvent(e)}else if(1==p.rail.drag.pt)return p.onmouseup(e)};var E=x.emulatetouch&&p.isiframe&&!C.hasmousecapture,z=.3*x.directionlockdeadzone|0;p.ontouchmove=function(e,t){if(!p.rail.drag)return!0;if(e.targetTouches&&x.preventmultitouchscrolling&&e.targetTouches.length>1)return!0;if(e.pointerType&&("mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))return!0;if(2==p.rail.drag.pt){var n,r;if("changedTouches"in e&&(e.clientX=e.changedTouches[0].clientX,e.clientY=e.changedTouches[0].clientY),r=n=0,E&&!t){var o=p.win.position();r=-o.left,n=-o.top}var i=e.clientY+n,s=i-p.rail.drag.y,l=e.clientX+r,c=l-p.rail.drag.x,u=p.rail.drag.st-s;if(p.ishwscroll&&x.bouncescroll)u<0?u=Math.round(u/2):u>p.page.maxh&&(u=p.page.maxh+Math.round((u-p.page.maxh)/2));else if(u<0?(u=0,i=0):u>p.page.maxh&&(u=p.page.maxh,i=0),0===i&&!p.hasmoving)return p.ispage||(p.rail.drag=!1),!0;var d=p.getScrollLeft();if(p.railh&&p.railh.scrollable&&(d=p.isrtlmode?c-p.rail.drag.sl:p.rail.drag.sl-c,p.ishwscroll&&x.bouncescroll?d<0?d=Math.round(d/2):d>p.page.maxw&&(d=p.page.maxw+Math.round((d-p.page.maxw)/2)):(d<0&&(d=0,l=0),d>p.page.maxw&&(d=p.page.maxw,l=0))),!p.hasmoving){if(p.rail.drag.y===e.clientY&&p.rail.drag.x===e.clientX)return p.cancelEvent(e);var h=Math.abs(s),f=Math.abs(c),m=x.directionlockdeadzone;if(p.rail.drag.ck?"v"==p.rail.drag.ck?f>m&&h<=z?p.rail.drag=!1:h>m&&(p.rail.drag.dl="v"):"h"==p.rail.drag.ck&&(h>m&&f<=z?p.rail.drag=!1:f>m&&(p.rail.drag.dl="h")):h>m&&f>m?p.rail.drag.dl="f":h>m?p.rail.drag.dl=f>z?"f":"v":f>m&&(p.rail.drag.dl=h>z?"f":"h"),!p.rail.drag.dl)return p.cancelEvent(e);p.triggerScrollStart(e.clientX,e.clientY,0,0,0),p.hasmoving=!0}return p.preventclick&&!p.preventclick.click&&(p.preventclick.click=p.preventclick.tg.onclick||!1,p.preventclick.tg.onclick=p.onpreventclick),p.rail.drag.dl&&("v"==p.rail.drag.dl?d=p.rail.drag.sl:"h"==p.rail.drag.dl&&(u=p.rail.drag.st)),p.synched("touchmove",(function(){p.rail.drag&&2==p.rail.drag.pt&&(p.prepareTransition&&p.resetTransition(),p.rail.scrollable&&p.setScrollTop(u),p.scrollmom.update(l,i),p.railh&&p.railh.scrollable?(p.setScrollLeft(d),p.showCursor(u,d)):p.showCursor(u),C.isie10&&a.selection.clear())})),p.cancelEvent(e)}return 1==p.rail.drag.pt?p.onmousemove(e):void 0},p.ontouchstartCursor=function(e,t){if(!p.rail.drag||3==p.rail.drag.pt){if(p.locked)return p.cancelEvent(e);p.cancelScroll(),p.rail.drag={x:e.touches[0].clientX,y:e.touches[0].clientY,sx:p.scroll.x,sy:p.scroll.y,pt:3,hr:!!t};var n=p.getTarget(e);return!p.ispage&&C.hasmousecapture&&n.setCapture(),p.isiframe&&!C.hasmousecapture&&(p.saved.csspointerevents=p.doc.css("pointer-events"),p.css(p.doc,{"pointer-events":"none"})),p.cancelEvent(e)}},p.ontouchendCursor=function(e){if(p.rail.drag){if(C.hasmousecapture&&a.releaseCapture(),p.isiframe&&!C.hasmousecapture&&p.doc.css("pointer-events",p.saved.csspointerevents),3!=p.rail.drag.pt)return;return p.rail.drag=!1,p.cancelEvent(e)}},p.ontouchmoveCursor=function(e){if(p.rail.drag){if(3!=p.rail.drag.pt)return;if(p.cursorfreezed=!0,p.rail.drag.hr){p.scroll.x=p.rail.drag.sx+(e.touches[0].clientX-p.rail.drag.x),p.scroll.x<0&&(p.scroll.x=0);var t=p.scrollvaluemaxw;p.scroll.x>t&&(p.scroll.x=t)}else{p.scroll.y=p.rail.drag.sy+(e.touches[0].clientY-p.rail.drag.y),p.scroll.y<0&&(p.scroll.y=0);var n=p.scrollvaluemax;p.scroll.y>n&&(p.scroll.y=n)}return p.synched("touchmove",(function(){p.rail.drag&&3==p.rail.drag.pt&&(p.showCursor(),p.rail.drag.hr?p.doScrollLeft(Math.round(p.scroll.x*p.scrollratio.x),x.cursordragspeed):p.doScrollTop(Math.round(p.scroll.y*p.scrollratio.y),x.cursordragspeed))})),p.cancelEvent(e)}}}if(p.onmousedown=function(e,t){if(!p.rail.drag||1==p.rail.drag.pt){if(p.railslocked)return p.cancelEvent(e);p.cancelScroll(),p.rail.drag={x:e.clientX,y:e.clientY,sx:p.scroll.x,sy:p.scroll.y,pt:1,hr:t||!1};var n=p.getTarget(e);return C.hasmousecapture&&n.setCapture(),p.isiframe&&!C.hasmousecapture&&(p.saved.csspointerevents=p.doc.css("pointer-events"),p.css(p.doc,{"pointer-events":"none"})),p.hasmoving=!1,p.cancelEvent(e)}},p.onmouseup=function(e){if(p.rail.drag)return 1!=p.rail.drag.pt||(C.hasmousecapture&&a.releaseCapture(),p.isiframe&&!C.hasmousecapture&&p.doc.css("pointer-events",p.saved.csspointerevents),p.rail.drag=!1,p.cursorfreezed=!1,p.hasmoving&&p.triggerScrollEnd(),p.cancelEvent(e))},p.onmousemove=function(e){if(p.rail.drag){if(1!==p.rail.drag.pt)return;if(C.ischrome&&0===e.which)return p.onmouseup(e);if(p.cursorfreezed=!0,p.hasmoving||p.triggerScrollStart(e.clientX,e.clientY,0,0,0),p.hasmoving=!0,p.rail.drag.hr){p.scroll.x=p.rail.drag.sx+(e.clientX-p.rail.drag.x),p.scroll.x<0&&(p.scroll.x=0);var t=p.scrollvaluemaxw;p.scroll.x>t&&(p.scroll.x=t)}else{p.scroll.y=p.rail.drag.sy+(e.clientY-p.rail.drag.y),p.scroll.y<0&&(p.scroll.y=0);var n=p.scrollvaluemax;p.scroll.y>n&&(p.scroll.y=n)}return p.synched("mousemove",(function(){p.cursorfreezed&&(p.showCursor(),p.rail.drag.hr?p.scrollLeft(Math.round(p.scroll.x*p.scrollratio.x)):p.scrollTop(Math.round(p.scroll.y*p.scrollratio.y)))})),p.cancelEvent(e)}p.checkarea=0},C.cantouch||x.emulatetouch)p.onpreventclick=function(e){if(p.preventclick)return p.preventclick.tg.onclick=p.preventclick.click,p.preventclick=!1,p.cancelEvent(e)},p.onclick=!C.isios&&function(e){return!p.lastmouseup||(p.lastmouseup=!1,p.cancelEvent(e))},x.grabcursorenabled&&C.cursorgrabvalue&&(p.css(p.ispage?p.doc:p.win,{cursor:C.cursorgrabvalue}),p.css(p.rail,{cursor:C.cursorgrabvalue}));else{var L=function(e){if(p.selectiondrag){if(e){var t=p.win.outerHeight(),n=e.pageY-p.selectiondrag.top;n>0&&n<t&&(n=0),n>=t&&(n-=t),p.selectiondrag.df=n}if(0!==p.selectiondrag.df){var r=-2*p.selectiondrag.df/6|0;p.doScrollBy(r),p.debounced("doselectionscroll",(function(){L()}),50)}}};p.hasTextSelected="getSelection"in a?function(){return a.getSelection().rangeCount>0}:"selection"in a?function(){return"None"!=a.selection.type}:function(){return!1},p.onselectionstart=function(e){p.ispage||(p.selectiondrag=p.win.offset())},p.onselectionend=function(e){p.selectiondrag=!1},p.onselectiondrag=function(e){p.selectiondrag&&p.hasTextSelected()&&p.debounced("selectionscroll",(function(){L(e)}),250)}}if(C.hasw3ctouch?(p.css(p.ispage?s("html"):p.win,{"touch-action":"none"}),p.css(p.rail,{"touch-action":"none"}),p.css(p.cursor,{"touch-action":"none"}),p.bind(p.win,"pointerdown",p.ontouchstart),p.bind(a,"pointerup",p.ontouchend),p.delegate(a,"pointermove",p.ontouchmove)):C.hasmstouch?(p.css(p.ispage?s("html"):p.win,{"-ms-touch-action":"none"}),p.css(p.rail,{"-ms-touch-action":"none"}),p.css(p.cursor,{"-ms-touch-action":"none"}),p.bind(p.win,"MSPointerDown",p.ontouchstart),p.bind(a,"MSPointerUp",p.ontouchend),p.delegate(a,"MSPointerMove",p.ontouchmove),p.bind(p.cursor,"MSGestureHold",(function(e){e.preventDefault()})),p.bind(p.cursor,"contextmenu",(function(e){e.preventDefault()}))):C.cantouch&&(p.bind(p.win,"touchstart",p.ontouchstart,!1,!0),p.bind(a,"touchend",p.ontouchend,!1,!0),p.bind(a,"touchcancel",p.ontouchend,!1,!0),p.delegate(a,"touchmove",p.ontouchmove,!1,!0)),x.emulatetouch&&(p.bind(p.win,"mousedown",p.ontouchstart,!1,!0),p.bind(a,"mouseup",p.ontouchend,!1,!0),p.bind(a,"mousemove",p.ontouchmove,!1,!0)),(x.cursordragontouch||!C.cantouch&&!x.emulatetouch)&&(p.rail.css({cursor:"default"}),p.railh&&p.railh.css({cursor:"default"}),p.jqbind(p.rail,"mouseenter",(function(){if(!p.ispage&&!p.win.is(":visible"))return!1;p.canshowonmouseevent&&p.showCursor(),p.rail.active=!0})),p.jqbind(p.rail,"mouseleave",(function(){p.rail.active=!1,p.rail.drag||p.hideCursor()})),x.sensitiverail&&(p.bind(p.rail,"click",(function(e){p.doRailClick(e,!1,!1)})),p.bind(p.rail,"dblclick",(function(e){p.doRailClick(e,!0,!1)})),p.bind(p.cursor,"click",(function(e){p.cancelEvent(e)})),p.bind(p.cursor,"dblclick",(function(e){p.cancelEvent(e)}))),p.railh&&(p.jqbind(p.railh,"mouseenter",(function(){if(!p.ispage&&!p.win.is(":visible"))return!1;p.canshowonmouseevent&&p.showCursor(),p.rail.active=!0})),p.jqbind(p.railh,"mouseleave",(function(){p.rail.active=!1,p.rail.drag||p.hideCursor()})),x.sensitiverail&&(p.bind(p.railh,"click",(function(e){p.doRailClick(e,!1,!0)})),p.bind(p.railh,"dblclick",(function(e){p.doRailClick(e,!0,!0)})),p.bind(p.cursorh,"click",(function(e){p.cancelEvent(e)})),p.bind(p.cursorh,"dblclick",(function(e){p.cancelEvent(e)}))))),x.cursordragontouch&&(this.istouchcapable||C.cantouch)&&(p.bind(p.cursor,"touchstart",p.ontouchstartCursor),p.bind(p.cursor,"touchmove",p.ontouchmoveCursor),p.bind(p.cursor,"touchend",p.ontouchendCursor),p.cursorh&&p.bind(p.cursorh,"touchstart",(function(e){p.ontouchstartCursor(e,!0)})),p.cursorh&&p.bind(p.cursorh,"touchmove",p.ontouchmoveCursor),p.cursorh&&p.bind(p.cursorh,"touchend",p.ontouchendCursor)),x.emulatetouch||C.isandroid||C.isios?(p.bind(C.hasmousecapture?p.win:a,"mouseup",p.ontouchend),p.onclick&&p.bind(a,"click",p.onclick),x.cursordragontouch?(p.bind(p.cursor,"mousedown",p.onmousedown),p.bind(p.cursor,"mouseup",p.onmouseup),p.cursorh&&p.bind(p.cursorh,"mousedown",(function(e){p.onmousedown(e,!0)})),p.cursorh&&p.bind(p.cursorh,"mouseup",p.onmouseup)):(p.bind(p.rail,"mousedown",(function(e){e.preventDefault()})),p.railh&&p.bind(p.railh,"mousedown",(function(e){e.preventDefault()})))):(p.bind(C.hasmousecapture?p.win:a,"mouseup",p.onmouseup),p.bind(a,"mousemove",p.onmousemove),p.onclick&&p.bind(a,"click",p.onclick),p.bind(p.cursor,"mousedown",p.onmousedown),p.bind(p.cursor,"mouseup",p.onmouseup),p.railh&&(p.bind(p.cursorh,"mousedown",(function(e){p.onmousedown(e,!0)})),p.bind(p.cursorh,"mouseup",p.onmouseup)),!p.ispage&&x.enablescrollonselection&&(p.bind(p.win[0],"mousedown",p.onselectionstart),p.bind(a,"mouseup",p.onselectionend),p.bind(p.cursor,"mouseup",p.onselectionend),p.cursorh&&p.bind(p.cursorh,"mouseup",p.onselectionend),p.bind(a,"mousemove",p.onselectiondrag)),p.zoom&&(p.jqbind(p.zoom,"mouseenter",(function(){p.canshowonmouseevent&&p.showCursor(),p.rail.active=!0})),p.jqbind(p.zoom,"mouseleave",(function(){p.rail.active=!1,p.rail.drag||p.hideCursor()})))),x.enablemousewheel&&(p.isiframe||p.mousewheel(C.isie&&p.ispage?a:p.win,p.onmousewheel),p.mousewheel(p.rail,p.onmousewheel),p.railh&&p.mousewheel(p.railh,p.onmousewheelhr)),p.ispage||C.cantouch||/HTML|^BODY/.test(p.win[0].nodeName)||(p.win.attr("tabindex")||p.win.attr({tabindex:++r}),p.bind(p.win,"focus",(function(e){t=p.getTarget(e).id||p.getTarget(e)||!1,p.hasfocus=!0,p.canshowonmouseevent&&p.noticeCursor()})),p.bind(p.win,"blur",(function(e){t=!1,p.hasfocus=!1})),p.bind(p.win,"mouseenter",(function(e){n=p.getTarget(e).id||p.getTarget(e)||!1,p.hasmousefocus=!0,p.canshowonmouseevent&&p.noticeCursor()})),p.bind(p.win,"mouseleave",(function(e){n=!1,p.hasmousefocus=!1,p.rail.drag||p.hideCursor()}))),p.onkeypress=function(e){if(p.railslocked&&0===p.page.maxh)return!0;e=e||l.event;var r=p.getTarget(e);if(r&&/INPUT|TEXTAREA|SELECT|OPTION/.test(r.nodeName)&&(!r.getAttribute("type")&&!r.type||!/submit|button|cancel/i.tp))return!0;if(s(r).attr("contenteditable"))return!0;if(p.hasfocus||p.hasmousefocus&&!t||p.ispage&&!t&&!n){var o=e.keyCode;if(p.railslocked&&27!=o)return p.cancelEvent(e);var i=e.ctrlKey||!1,a=e.shiftKey||!1,c=!1;switch(o){case 38:case 63233:p.doScrollBy(72),c=!0;break;case 40:case 63235:p.doScrollBy(-72),c=!0;break;case 37:case 63232:p.railh&&(i?p.doScrollLeft(0):p.doScrollLeftBy(72),c=!0);break;case 39:case 63234:p.railh&&(i?p.doScrollLeft(p.page.maxw):p.doScrollLeftBy(-72),c=!0);break;case 33:case 63276:p.doScrollBy(p.view.h),c=!0;break;case 34:case 63277:p.doScrollBy(-p.view.h),c=!0;break;case 36:case 63273:p.railh&&i?p.doScrollPos(0,0):p.doScrollTo(0),c=!0;break;case 35:case 63275:p.railh&&i?p.doScrollPos(p.page.maxw,p.page.maxh):p.doScrollTo(p.page.maxh),c=!0;break;case 32:x.spacebarenabled&&(a?p.doScrollBy(p.view.h):p.doScrollBy(-p.view.h),c=!0);break;case 27:p.zoomactive&&(p.doZoom(),c=!0)}if(c)return p.cancelEvent(e)}},x.enablekeyboard&&p.bind(a,C.isopera&&!C.isopera12?"keypress":"keydown",p.onkeypress),p.bind(a,"keydown",(function(e){e.ctrlKey&&(p.wheelprevented=!0)})),p.bind(a,"keyup",(function(e){e.ctrlKey||(p.wheelprevented=!1)})),p.bind(l,"blur",(function(e){p.wheelprevented=!1})),p.bind(l,"resize",p.onscreenresize),p.bind(l,"orientationchange",p.onscreenresize),p.bind(l,"load",p.lazyResize),C.ischrome&&!p.ispage&&!p.haswrapper){var A=p.win.attr("style"),D=parseFloat(p.win.css("width"))+1;p.win.css("width",D),p.synched("chromefix",(function(){p.win.attr("style",A)}))}if(p.onAttributeChange=function(e){p.lazyResize(p.isieold?250:30)},x.enableobserver&&(p.isie11||!1===m||(p.observerbody=new m((function(e){if(e.forEach((function(e){if("attributes"==e.type)return y.hasClass("modal-open")&&y.hasClass("modal-dialog")&&!s.contains(s(".modal-dialog")[0],p.doc[0])?p.hide():p.show()})),p.me.clientWidth!=p.page.width||p.me.clientHeight!=p.page.height)return p.lazyResize(30)})),p.observerbody.observe(a.body,{childList:!0,subtree:!0,characterData:!1,attributes:!0,attributeFilter:["class"]})),!p.ispage&&!p.haswrapper)){var j=p.win[0];!1!==m?(p.observer=new m((function(e){e.forEach(p.onAttributeChange)})),p.observer.observe(j,{childList:!0,characterData:!1,attributes:!0,subtree:!1}),p.observerremover=new m((function(e){e.forEach((function(e){if(e.removedNodes.length>0)for(var t in e.removedNodes)if(p&&e.removedNodes[t]===j)return p.remove()}))})),p.observerremover.observe(j.parentNode,{childList:!0,characterData:!1,attributes:!1,subtree:!1})):(p.bind(j,C.isie&&!C.isie9?"propertychange":"DOMAttrModified",p.onAttributeChange),C.isie9&&j.attachEvent("onpropertychange",p.onAttributeChange),p.bind(j,"DOMNodeRemoved",(function(e){e.target===j&&p.remove()})))}!p.ispage&&x.boxzoom&&p.bind(l,"resize",p.resizeZoom),p.istextarea&&(p.bind(p.win,"keydown",p.lazyResize),p.bind(p.win,"mouseup",p.lazyResize)),p.lazyResize(30)}if("IFRAME"==this.doc[0].nodeName){var M=function(){var t;p.iframexd=!1;try{(t="contentDocument"in this?this.contentDocument:this.contentWindow._doc).domain}catch(e){p.iframexd=!0,t=!1}if(p.iframexd)return"console"in l&&console.log("NiceScroll error: policy restriced iframe"),!0;if(p.forcescreen=!0,p.isiframe&&(p.iframe={doc:s(t),html:p.doc.contents().find("html")[0],body:p.doc.contents().find("body")[0]},p.getContentSize=function(){return{w:Math.max(p.iframe.html.scrollWidth,p.iframe.body.scrollWidth),h:Math.max(p.iframe.html.scrollHeight,p.iframe.body.scrollHeight)}},p.docscroll=s(p.iframe.body)),!C.isios&&x.iframeautoresize&&!p.isiframe){p.win.scrollTop(0),p.doc.height("");var n=Math.max(t.getElementsByTagName("html")[0].scrollHeight,t.body.scrollHeight);p.doc.height(n)}p.lazyResize(30),p.css(s(p.iframe.body),e),C.isios&&p.haswrapper&&p.css(s(t.body),{"-webkit-transform":"translate3d(0,0,0)"}),"contentWindow"in this?p.bind(this.contentWindow,"scroll",p.onscroll):p.bind(t,"scroll",p.onscroll),x.enablemousewheel&&p.mousewheel(t,p.onmousewheel),x.enablekeyboard&&p.bind(t,C.isopera?"keypress":"keydown",p.onkeypress),C.cantouch?(p.bind(t,"touchstart",p.ontouchstart),p.bind(t,"touchmove",p.ontouchmove)):x.emulatetouch&&(p.bind(t,"mousedown",p.ontouchstart),p.bind(t,"mousemove",(function(e){return p.ontouchmove(e,!0)})),x.grabcursorenabled&&C.cursorgrabvalue&&p.css(s(t.body),{cursor:C.cursorgrabvalue})),p.bind(t,"mouseup",p.ontouchend),p.zoom&&(x.dblclickzoom&&p.bind(t,"dblclick",p.doZoom),p.ongesturezoom&&p.bind(t,"gestureend",p.ongesturezoom))};this.doc[0].readyState&&"complete"===this.doc[0].readyState&&setTimeout((function(){M.call(p.doc[0],!1)}),500),p.bind(this.doc,"load",M)}},this.showCursor=function(e,t){if(p.cursortimeout&&(clearTimeout(p.cursortimeout),p.cursortimeout=0),p.rail){if(p.autohidedom&&(p.autohidedom.stop().css({opacity:x.cursoropacitymax}),p.cursoractive=!0),p.rail.drag&&1==p.rail.drag.pt||(void 0!==e&&!1!==e&&(p.scroll.y=e/p.scrollratio.y|0),void 0!==t&&(p.scroll.x=t/p.scrollratio.x|0)),p.cursor.css({height:p.cursorheight,top:p.scroll.y}),p.cursorh){var n=p.hasreversehr?p.scrollvaluemaxw-p.scroll.x:p.scroll.x;p.cursorh.css({width:p.cursorwidth,left:!p.rail.align&&p.rail.visibility?n+p.rail.width:n}),p.cursoractive=!0}p.zoom&&p.zoom.stop().css({opacity:x.cursoropacitymax})}},this.hideCursor=function(e){p.cursortimeout||p.rail&&p.autohidedom&&(p.hasmousefocus&&"leave"===x.autohidemode||(p.cursortimeout=setTimeout((function(){p.rail.active&&p.showonmouseevent||(p.autohidedom.stop().animate({opacity:x.cursoropacitymin}),p.zoom&&p.zoom.stop().animate({opacity:x.cursoropacitymin}),p.cursoractive=!1),p.cursortimeout=0}),e||x.hidecursordelay)))},this.noticeCursor=function(e,t,n){p.showCursor(t,n),p.rail.active||p.hideCursor(e)},this.getContentSize=p.ispage?function(){return{w:Math.max(a.body.scrollWidth,a.documentElement.scrollWidth),h:Math.max(a.body.scrollHeight,a.documentElement.scrollHeight)}}:p.haswrapper?function(){return{w:p.doc[0].offsetWidth,h:p.doc[0].offsetHeight}}:function(){return{w:p.docscroll[0].scrollWidth,h:p.docscroll[0].scrollHeight}},this.onResize=function(e,t){if(!p||!p.win)return!1;var n=p.page.maxh,r=p.page.maxw,o=p.view.h,i=p.view.w;if(p.view={w:p.ispage?p.win.width():p.win[0].clientWidth,h:p.ispage?p.win.height():p.win[0].clientHeight},p.page=t||p.getContentSize(),p.page.maxh=Math.max(0,p.page.h-p.view.h),p.page.maxw=Math.max(0,p.page.w-p.view.w),p.page.maxh==n&&p.page.maxw==r&&p.view.w==i&&p.view.h==o){if(p.ispage)return p;var s=p.win.offset();if(p.lastposition){var a=p.lastposition;if(a.top==s.top&&a.left==s.left)return p}p.lastposition=s}return 0===p.page.maxh?(p.hideRail(),p.scrollvaluemax=0,p.scroll.y=0,p.scrollratio.y=0,p.cursorheight=0,p.setScrollTop(0),p.rail&&(p.rail.scrollable=!1)):(p.page.maxh-=x.railpadding.top+x.railpadding.bottom,p.rail.scrollable=!0),0===p.page.maxw?(p.hideRailHr(),p.scrollvaluemaxw=0,p.scroll.x=0,p.scrollratio.x=0,p.cursorwidth=0,p.setScrollLeft(0),p.railh&&(p.railh.scrollable=!1)):(p.page.maxw-=x.railpadding.left+x.railpadding.right,p.railh&&(p.railh.scrollable=x.horizrailenabled)),p.railslocked=p.locked||0===p.page.maxh&&0===p.page.maxw,p.railslocked?(p.ispage||p.updateScrollBar(p.view),!1):(p.hidden||(p.rail.visibility||p.showRail(),p.railh&&!p.railh.visibility&&p.showRailHr()),p.istextarea&&p.win.css("resize")&&"none"!=p.win.css("resize")&&(p.view.h-=20),p.cursorheight=Math.min(p.view.h,Math.round(p.view.h*(p.view.h/p.page.h))),p.cursorheight=x.cursorfixedheight?x.cursorfixedheight:Math.max(x.cursorminheight,p.cursorheight),p.cursorwidth=Math.min(p.view.w,Math.round(p.view.w*(p.view.w/p.page.w))),p.cursorwidth=x.cursorfixedheight?x.cursorfixedheight:Math.max(x.cursorminheight,p.cursorwidth),p.scrollvaluemax=p.view.h-p.cursorheight-(x.railpadding.top+x.railpadding.bottom),p.hasborderbox||(p.scrollvaluemax-=p.cursor[0].offsetHeight-p.cursor[0].clientHeight),p.railh&&(p.railh.width=p.page.maxh>0?p.view.w-p.rail.width:p.view.w,p.scrollvaluemaxw=p.railh.width-p.cursorwidth-(x.railpadding.left+x.railpadding.right)),p.ispage||p.updateScrollBar(p.view),p.scrollratio={x:p.page.maxw/p.scrollvaluemaxw,y:p.page.maxh/p.scrollvaluemax},p.getScrollTop()>p.page.maxh?p.doScrollTop(p.page.maxh):(p.scroll.y=p.getScrollTop()/p.scrollratio.y|0,p.scroll.x=p.getScrollLeft()/p.scrollratio.x|0,p.cursoractive&&p.noticeCursor()),p.scroll.y&&0===p.getScrollTop()&&p.doScrollTo(p.scroll.y*p.scrollratio.y|0),p)},this.resize=p.onResize;var j=0;function M(e,t,n,r){p._bind(e,t,(function(r){var o={original:r=r||l.event,target:r.target||r.srcElement,type:"wheel",deltaMode:"MozMousePixelScroll"==r.type?0:1,deltaX:0,deltaZ:0,preventDefault:function(){return r.preventDefault?r.preventDefault():r.returnValue=!1,!1},stopImmediatePropagation:function(){r.stopImmediatePropagation?r.stopImmediatePropagation():r.cancelBubble=!0}};return"mousewheel"==t?(r.wheelDeltaX&&(o.deltaX=-1/40*r.wheelDeltaX),r.wheelDeltaY&&(o.deltaY=-1/40*r.wheelDeltaY),!o.deltaY&&!o.deltaX&&(o.deltaY=-1/40*r.wheelDelta)):o.deltaY=r.detail,n.call(e,o)}),r)}this.onscreenresize=function(e){clearTimeout(j);var t=!p.ispage&&!p.haswrapper;t&&p.hideRails(),j=setTimeout((function(){p&&(t&&p.showRails(),p.resize()),j=0}),120)},this.lazyResize=function(e){return clearTimeout(j),e=isNaN(e)?240:e,j=setTimeout((function(){p&&p.resize(),j=0}),e),p},this.jqbind=function(e,t,n){p.events.push({e,n:t,f:n,q:!0}),s(e).on(t,n)},this.mousewheel=function(e,t,n){var r="jquery"in e?e[0]:e;if("onwheel"in a.createElement("div"))p._bind(r,"wheel",t,n||!1);else{var o=void 0!==a.onmousewheel?"mousewheel":"DOMMouseScroll";M(r,o,t,n||!1),"DOMMouseScroll"==o&&M(r,"MozMousePixelScroll",t,n||!1)}};var q=!1;if(C.haseventlistener){try{var H=Object.defineProperty({},"passive",{get:function(){q=!0}});l.addEventListener("test",null,H)}catch(e){}this.stopPropagation=function(e){return!!e&&((e=e.original?e.original:e).stopPropagation(),!1)},this.cancelEvent=function(e){return e.cancelable&&e.preventDefault(),e.stopImmediatePropagation(),e.preventManipulation&&e.preventManipulation(),!1}}else Event.prototype.preventDefault=function(){this.returnValue=!1},Event.prototype.stopPropagation=function(){this.cancelBubble=!0},l.constructor.prototype.addEventListener=a.constructor.prototype.addEventListener=Element.prototype.addEventListener=function(e,t,n){this.attachEvent("on"+e,t)},l.constructor.prototype.removeEventListener=a.constructor.prototype.removeEventListener=Element.prototype.removeEventListener=function(e,t,n){this.detachEvent("on"+e,t)},this.cancelEvent=function(e){return(e=e||l.event)&&(e.cancelBubble=!0,e.cancel=!0,e.returnValue=!1),!1},this.stopPropagation=function(e){return(e=e||l.event)&&(e.cancelBubble=!0),!1};this.delegate=function(e,t,n,r,o){var i=u[t]||!1;i||(i={a:[],l:[],f:function(e){for(var t=i.l,n=!1,r=t.length-1;r>=0;r--)if(!1===(n=t[r].call(e.target,e)))return!1;return n}},p.bind(e,t,i.f,r,o),u[t]=i),p.ispage?(i.a=[p.id].concat(i.a),i.l=[n].concat(i.l)):(i.a.push(p.id),i.l.push(n))},this.undelegate=function(e,t,n,r,o){var i=u[t]||!1;if(i&&i.l)for(var s=0,a=i.l.length;s<a;s++)i.a[s]===p.id&&(i.a.splice(s),i.l.splice(s),0===i.a.length&&(p._unbind(e,t,i.l.f),u[t]=null))},this.bind=function(e,t,n,r,o){var i="jquery"in e?e[0]:e;p._bind(i,t,n,r||!1,o||!1)},this._bind=function(e,t,n,r,o){p.events.push({e,n:t,f:n,b:r,q:!1}),q&&o?e.addEventListener(t,n,{passive:!1,capture:r}):e.addEventListener(t,n,r||!1)},this._unbind=function(e,t,n,r){u[t]?p.undelegate(e,t,n,r):e.removeEventListener(t,n,r)},this.unbindAll=function(){for(var e=0;e<p.events.length;e++){var t=p.events[e];t.q?t.e.unbind(t.n,t.f):p._unbind(t.e,t.n,t.f,t.b)}},this.showRails=function(){return p.showRail().showRailHr()},this.showRail=function(){return 0===p.page.maxh||!p.ispage&&"none"==p.win.css("display")||(p.rail.visibility=!0,p.rail.css("display","block")),p},this.showRailHr=function(){return p.railh&&(0===p.page.maxw||!p.ispage&&"none"==p.win.css("display")||(p.railh.visibility=!0,p.railh.css("display","block"))),p},this.hideRails=function(){return p.hideRail().hideRailHr()},this.hideRail=function(){return p.rail.visibility=!1,p.rail.css("display","none"),p},this.hideRailHr=function(){return p.railh&&(p.railh.visibility=!1,p.railh.css("display","none")),p},this.show=function(){return p.hidden=!1,p.railslocked=!1,p.showRails()},this.hide=function(){return p.hidden=!0,p.railslocked=!0,p.hideRails()},this.toggle=function(){return p.hidden?p.show():p.hide()},this.remove=function(){for(var e in p.stop(),p.cursortimeout&&clearTimeout(p.cursortimeout),p.delaylist)p.delaylist[e]&&f(p.delaylist[e].h);p.doZoomOut(),p.unbindAll(),C.isie9&&p.win[0].detachEvent("onpropertychange",p.onAttributeChange),!1!==p.observer&&p.observer.disconnect(),!1!==p.observerremover&&p.observerremover.disconnect(),!1!==p.observerbody&&p.observerbody.disconnect(),p.events=null,p.cursor&&p.cursor.remove(),p.cursorh&&p.cursorh.remove(),p.rail&&p.rail.remove(),p.railh&&p.railh.remove(),p.zoom&&p.zoom.remove();for(var t=0;t<p.saved.css.length;t++){var n=p.saved.css[t];n[0].css(n[1],void 0===n[2]?"":n[2])}p.saved=!1,p.me.data("__nicescroll","");var r=s.nicescroll;for(var o in r.each((function(e){if(this&&this.id===p.id){delete r[e];for(var t=++e;t<r.length;t++,e++)r[e]=r[t];r.length--,r.length&&delete r[r.length]}})),p)p[o]=null,delete p[o];p=null},this.scrollstart=function(e){return this.onscrollstart=e,p},this.scrollend=function(e){return this.onscrollend=e,p},this.scrollcancel=function(e){return this.onscrollcancel=e,p},this.zoomin=function(e){return this.onzoomin=e,p},this.zoomout=function(e){return this.onzoomout=e,p},this.isScrollable=function(e){var t=e.target?e.target:e;if("OPTION"==t.nodeName)return!0;for(;t&&1==t.nodeType&&t!==this.me[0]&&!/^BODY|HTML/.test(t.nodeName);){var n=s(t),r=n.css("overflowY")||n.css("overflowX")||n.css("overflow")||"";if(/scroll|auto/.test(r))return t.clientHeight!=t.scrollHeight;t=!!t.parentNode&&t.parentNode}return!1},this.getViewport=function(e){for(var t=!(!e||!e.parentNode)&&e.parentNode;t&&1==t.nodeType&&!/^BODY|HTML/.test(t.nodeName);){var n=s(t);if(/fixed|absolute/.test(n.css("position")))return n;var r=n.css("overflowY")||n.css("overflowX")||n.css("overflow")||"";if(/scroll|auto/.test(r)&&t.clientHeight!=t.scrollHeight)return n;if(n.getNiceScroll().length>0)return n;t=!!t.parentNode&&t.parentNode}return!1},this.triggerScrollStart=function(e,t,n,r,o){if(p.onscrollstart){var i={type:"scrollstart",current:{x:e,y:t},request:{x:n,y:r},end:{x:p.newscrollx,y:p.newscrolly},speed:o};p.onscrollstart.call(p,i)}},this.triggerScrollEnd=function(){if(p.onscrollend){var e=p.getScrollLeft(),t=p.getScrollTop(),n={type:"scrollend",current:{x:e,y:t},end:{x:e,y:t}};p.onscrollend.call(p,n)}};var P=0,O=0,R=0,I=1;function B(e,t,n,r){p.scrollrunning||(p.newscrolly=p.getScrollTop(),p.newscrollx=p.getScrollLeft(),R=g());var o=g()-R;if(R=g(),o>350?I=1:I+=(2-I)/10,t=t*I|0,e=e*I|0){if(r)if(e<0){if(p.getScrollLeft()>=p.page.maxw)return!0}else if(p.getScrollLeft()<=0)return!0;var i=e>0?1:-1;O!==i&&(p.scrollmom&&p.scrollmom.stop(),p.newscrollx=p.getScrollLeft(),O=i),p.lastdeltax-=e}if(t){if(function(){var e=p.getScrollTop();if(t<0){if(e>=p.page.maxh)return!0}else if(e<=0)return!0}()){if(x.nativeparentscrolling&&n&&!p.ispage&&!p.zoomactive)return!0;var s=p.view.h>>1;p.newscrolly<-s?(p.newscrolly=-s,t=-1):p.newscrolly>p.page.maxh+s?(p.newscrolly=p.page.maxh+s,t=1):t=0}var a=t>0?1:-1;P!==a&&(p.scrollmom&&p.scrollmom.stop(),p.newscrolly=p.getScrollTop(),P=a),p.lastdeltay-=t}(t||e)&&p.synched("relativexy",(function(){var e=p.lastdeltay+p.newscrolly;p.lastdeltay=0;var t=p.lastdeltax+p.newscrollx;p.lastdeltax=0,p.rail.drag||p.doScrollPos(t,e)}))}var _=!1;function W(e,t,n){var r,o;return!(n||!_)||(0===e.deltaMode?(r=-e.deltaX*(x.mousescrollstep/54)|0,o=-e.deltaY*(x.mousescrollstep/54)|0):1===e.deltaMode&&(r=-e.deltaX*x.mousescrollstep*50/80|0,o=-e.deltaY*x.mousescrollstep*50/80|0),t&&x.oneaxismousemode&&0===r&&o&&(r=o,o=0,n&&(r<0?p.getScrollLeft()>=p.page.maxw:p.getScrollLeft()<=0)&&(o=r,r=0)),p.isrtlmode&&(r=-r),B(r,o,n,!0)?void(n&&(_=!0)):(_=!1,e.stopImmediatePropagation(),e.preventDefault()))}if(this.onmousewheel=function(e){if(p.wheelprevented||p.locked)return!1;if(p.railslocked)return p.debounced("checkunlock",p.resize,250),!1;if(p.rail.drag)return p.cancelEvent(e);if("auto"===x.oneaxismousemode&&0!==e.deltaX&&(x.oneaxismousemode=!1),x.oneaxismousemode&&0===e.deltaX&&!p.rail.scrollable)return!p.railh||!p.railh.scrollable||p.onmousewheelhr(e);var t=g(),n=!1;if(x.preservenativescrolling&&p.checkarea+600<t&&(p.nativescrollingarea=p.isScrollable(e),n=!0),p.checkarea=t,p.nativescrollingarea)return!0;var r=W(e,!1,n);return r&&(p.checkarea=0),r},this.onmousewheelhr=function(e){if(!p.wheelprevented){if(p.railslocked||!p.railh.scrollable)return!0;if(p.rail.drag)return p.cancelEvent(e);var t=g(),n=!1;return x.preservenativescrolling&&p.checkarea+600<t&&(p.nativescrollingarea=p.isScrollable(e),n=!0),p.checkarea=t,!!p.nativescrollingarea||(p.railslocked?p.cancelEvent(e):W(e,!0,n))}},this.stop=function(){return p.cancelScroll(),p.scrollmon&&p.scrollmon.stop(),p.cursorfreezed=!1,p.scroll.y=Math.round(p.getScrollTop()*(1/p.scrollratio.y)),p.noticeCursor(),p},this.getTransitionSpeed=function(e){return 80+e/72*x.scrollspeed|0},x.smoothscroll)if(p.ishwscroll&&C.hastransition&&x.usetransition&&x.smoothscroll){var F="";this.resetTransition=function(){F="",p.doc.css(C.prefixstyle+"transition-duration","0ms")},this.prepareTransition=function(e,t){var n=t?e:p.getTransitionSpeed(e),r=n+"ms";return F!==r&&(F=r,p.doc.css(C.prefixstyle+"transition-duration",r)),n},this.doScrollLeft=function(e,t){var n=p.scrollrunning?p.newscrolly:p.getScrollTop();p.doScrollPos(e,n,t)},this.doScrollTop=function(e,t){var n=p.scrollrunning?p.newscrollx:p.getScrollLeft();p.doScrollPos(n,e,t)},this.cursorupdate={running:!1,start:function(){var e=this;if(!e.running){e.running=!0;var t=function(){e.running&&h(t),p.showCursor(p.getScrollTop(),p.getScrollLeft()),p.notifyScrollEvent(p.win[0])};h(t)}},stop:function(){this.running=!1}},this.doScrollPos=function(e,t,n){var r=p.getScrollTop(),o=p.getScrollLeft();if(((p.newscrolly-r)*(t-r)<0||(p.newscrollx-o)*(e-o)<0)&&p.cancelScroll(),x.bouncescroll?(t<0?t=t/2|0:t>p.page.maxh&&(t=p.page.maxh+(t-p.page.maxh)/2|0),e<0?e=e/2|0:e>p.page.maxw&&(e=p.page.maxw+(e-p.page.maxw)/2|0)):(t<0?t=0:t>p.page.maxh&&(t=p.page.maxh),e<0?e=0:e>p.page.maxw&&(e=p.page.maxw)),p.scrollrunning&&e==p.newscrollx&&t==p.newscrolly)return!1;p.newscrolly=t,p.newscrollx=e;var i=p.getScrollTop(),s=p.getScrollLeft(),a={};a.x=e-s,a.y=t-i;var l=0|Math.sqrt(a.x*a.x+a.y*a.y),c=p.prepareTransition(l);p.scrollrunning||(p.scrollrunning=!0,p.triggerScrollStart(s,i,e,t,c),p.cursorupdate.start()),p.scrollendtrapped=!0,C.transitionend||(p.scrollendtrapped&&clearTimeout(p.scrollendtrapped),p.scrollendtrapped=setTimeout(p.onScrollTransitionEnd,c)),p.setScrollTop(p.newscrolly),p.setScrollLeft(p.newscrollx)},this.cancelScroll=function(){if(!p.scrollendtrapped)return!0;var e=p.getScrollTop(),t=p.getScrollLeft();return p.scrollrunning=!1,C.transitionend||clearTimeout(C.transitionend),p.scrollendtrapped=!1,p.resetTransition(),p.setScrollTop(e),p.railh&&p.setScrollLeft(t),p.timerscroll&&p.timerscroll.tm&&clearInterval(p.timerscroll.tm),p.timerscroll=!1,p.cursorfreezed=!1,p.cursorupdate.stop(),p.showCursor(e,t),p},this.onScrollTransitionEnd=function(){if(p.scrollendtrapped){var e=p.getScrollTop(),t=p.getScrollLeft();if(e<0?e=0:e>p.page.maxh&&(e=p.page.maxh),t<0?t=0:t>p.page.maxw&&(t=p.page.maxw),e!=p.newscrolly||t!=p.newscrollx)return p.doScrollPos(t,e,x.snapbackspeed);p.scrollrunning&&p.triggerScrollEnd(),p.scrollrunning=!1,p.scrollendtrapped=!1,p.resetTransition(),p.timerscroll=!1,p.setScrollTop(e),p.railh&&p.setScrollLeft(t),p.cursorupdate.stop(),p.noticeCursor(!1,e,t),p.cursorfreezed=!1}}}else this.doScrollLeft=function(e,t){var n=p.scrollrunning?p.newscrolly:p.getScrollTop();p.doScrollPos(e,n,t)},this.doScrollTop=function(e,t){var n=p.scrollrunning?p.newscrollx:p.getScrollLeft();p.doScrollPos(n,e,t)},this.doScrollPos=function(e,t,n){var r=p.getScrollTop(),o=p.getScrollLeft();((p.newscrolly-r)*(t-r)<0||(p.newscrollx-o)*(e-o)<0)&&p.cancelScroll();var i=!1;if(p.bouncescroll&&p.rail.visibility||(t<0?(t=0,i=!0):t>p.page.maxh&&(t=p.page.maxh,i=!0)),p.bouncescroll&&p.railh.visibility||(e<0?(e=0,i=!0):e>p.page.maxw&&(e=p.page.maxw,i=!0)),p.scrollrunning&&p.newscrolly===t&&p.newscrollx===e)return!0;p.newscrolly=t,p.newscrollx=e,p.dst={},p.dst.x=e-o,p.dst.y=t-r,p.dst.px=o,p.dst.py=r;var s=0|Math.sqrt(p.dst.x*p.dst.x+p.dst.y*p.dst.y),a=p.getTransitionSpeed(s);p.bzscroll={};var l=i?1:.58;p.bzscroll.x=new E(o,p.newscrollx,a,0,0,l,1),p.bzscroll.y=new E(r,p.newscrolly,a,0,0,l,1),g();var c=function(){if(p.scrollrunning){var e=p.bzscroll.y.getPos();p.setScrollLeft(p.bzscroll.x.getNow()),p.setScrollTop(p.bzscroll.y.getNow()),e<=1?p.timer=h(c):(p.scrollrunning=!1,p.timer=0,p.triggerScrollEnd())}};p.scrollrunning||(p.triggerScrollStart(o,r,e,t,a),p.scrollrunning=!0,p.timer=h(c))},this.cancelScroll=function(){return p.timer&&f(p.timer),p.timer=0,p.bzscroll=!1,p.scrollrunning=!1,p};else this.doScrollLeft=function(e,t){var n=p.getScrollTop();p.doScrollPos(e,n,t)},this.doScrollTop=function(e,t){var n=p.getScrollLeft();p.doScrollPos(n,e,t)},this.doScrollPos=function(e,t,n){var r=e>p.page.maxw?p.page.maxw:e;r<0&&(r=0);var o=t>p.page.maxh?p.page.maxh:t;o<0&&(o=0),p.synched("scroll",(function(){p.setScrollTop(o),p.setScrollLeft(r)}))},this.cancelScroll=function(){};this.doScrollBy=function(e,t){B(0,e)},this.doScrollLeftBy=function(e,t){B(e,0)},this.doScrollTo=function(e,t){var n=t?Math.round(e*p.scrollratio.y):e;n<0?n=0:n>p.page.maxh&&(n=p.page.maxh),p.cursorfreezed=!1,p.doScrollTop(e)},this.checkContentSize=function(){var e=p.getContentSize();e.h==p.page.h&&e.w==p.page.w||p.resize(!1,e)},p.onscroll=function(e){p.rail.drag||p.cursorfreezed||p.synched("scroll",(function(){p.scroll.y=Math.round(p.getScrollTop()/p.scrollratio.y),p.railh&&(p.scroll.x=Math.round(p.getScrollLeft()/p.scrollratio.x)),p.noticeCursor()}))},p.bind(p.docscroll,"scroll",p.onscroll),this.doZoomIn=function(e){if(!p.zoomactive){p.zoomactive=!0,p.zoomrestore={style:{}};var t=["position","top","left","zIndex","backgroundColor","marginTop","marginBottom","marginLeft","marginRight"],n=p.win[0].style;for(var r in t){var o=t[r];p.zoomrestore.style[o]=void 0!==n[o]?n[o]:""}p.zoomrestore.style.width=p.win.css("width"),p.zoomrestore.style.height=p.win.css("height"),p.zoomrestore.padding={w:p.win.outerWidth()-p.win.width(),h:p.win.outerHeight()-p.win.height()},C.isios4&&(p.zoomrestore.scrollTop=c.scrollTop(),c.scrollTop(0)),p.win.css({position:C.isios4?"absolute":"fixed",top:0,left:0,zIndex:i+100,margin:0});var s=p.win.css("backgroundColor");return(""===s||/transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(s))&&p.win.css("backgroundColor","#fff"),p.rail.css({zIndex:i+101}),p.zoom.css({zIndex:i+102}),p.zoom.css("backgroundPosition","0 -18px"),p.resizeZoom(),p.onzoomin&&p.onzoomin.call(p),p.cancelEvent(e)}},this.doZoomOut=function(e){if(p.zoomactive)return p.zoomactive=!1,p.win.css("margin",""),p.win.css(p.zoomrestore.style),C.isios4&&c.scrollTop(p.zoomrestore.scrollTop),p.rail.css({"z-index":p.zindex}),p.zoom.css({"z-index":p.zindex}),p.zoomrestore=!1,p.zoom.css("backgroundPosition","0 0"),p.onResize(),p.onzoomout&&p.onzoomout.call(p),p.cancelEvent(e)},this.doZoom=function(e){return p.zoomactive?p.doZoomOut(e):p.doZoomIn(e)},this.resizeZoom=function(){if(p.zoomactive){var e=p.getScrollTop();p.win.css({width:c.width()-p.zoomrestore.padding.w+"px",height:c.height()-p.zoomrestore.padding.h+"px"}),p.onResize(),p.setScrollTop(Math.min(p.page.maxh,e))}},this.init(),s.nicescroll.push(this)},w=function(e){var t=this;this.nc=e,this.lastx=0,this.lasty=0,this.speedx=0,this.speedy=0,this.lasttime=0,this.steptime=0,this.snapx=!1,this.snapy=!1,this.demulx=0,this.demuly=0,this.lastscrollx=-1,this.lastscrolly=-1,this.chkx=0,this.chky=0,this.timer=0,this.reset=function(e,n){t.stop(),t.steptime=0,t.lasttime=g(),t.speedx=0,t.speedy=0,t.lastx=e,t.lasty=n,t.lastscrollx=-1,t.lastscrolly=-1},this.update=function(e,n){var r=g();t.steptime=r-t.lasttime,t.lasttime=r;var o=n-t.lasty,i=e-t.lastx,s=t.nc.getScrollTop()+o,a=t.nc.getScrollLeft()+i;t.snapx=a<0||a>t.nc.page.maxw,t.snapy=s<0||s>t.nc.page.maxh,t.speedx=i,t.speedy=o,t.lastx=e,t.lasty=n},this.stop=function(){t.nc.unsynched("domomentum2d"),t.timer&&clearTimeout(t.timer),t.timer=0,t.lastscrollx=-1,t.lastscrolly=-1},this.doSnapy=function(e,n){var r=!1;n<0?(n=0,r=!0):n>t.nc.page.maxh&&(n=t.nc.page.maxh,r=!0),e<0?(e=0,r=!0):e>t.nc.page.maxw&&(e=t.nc.page.maxw,r=!0),r?t.nc.doScrollPos(e,n,t.nc.opt.snapbackspeed):t.nc.triggerScrollEnd()},this.doMomentum=function(e){var n=g(),r=e?n+e:t.lasttime,o=t.nc.getScrollLeft(),i=t.nc.getScrollTop(),s=t.nc.page.maxh,a=t.nc.page.maxw;t.speedx=a>0?Math.min(60,t.speedx):0,t.speedy=s>0?Math.min(60,t.speedy):0;var l=r&&n-r<=60;(i<0||i>s||o<0||o>a)&&(l=!1);var c=!(!t.speedy||!l)&&t.speedy,u=!(!t.speedx||!l)&&t.speedx;if(c||u){var d=Math.max(16,t.steptime);if(d>50){var h=d/50;t.speedx*=h,t.speedy*=h,d=50}t.demulxy=0,t.lastscrollx=t.nc.getScrollLeft(),t.chkx=t.lastscrollx,t.lastscrolly=t.nc.getScrollTop(),t.chky=t.lastscrolly;var f=t.lastscrollx,p=t.lastscrolly,m=function(){var e=g()-n>600?.04:.02;t.speedx&&(f=Math.floor(t.lastscrollx-t.speedx*(1-t.demulxy)),t.lastscrollx=f,(f<0||f>a)&&(e=.1)),t.speedy&&(p=Math.floor(t.lastscrolly-t.speedy*(1-t.demulxy)),t.lastscrolly=p,(p<0||p>s)&&(e=.1)),t.demulxy=Math.min(1,t.demulxy+e),t.nc.synched("domomentum2d",(function(){t.speedx&&(t.nc.getScrollLeft(),t.chkx=f,t.nc.setScrollLeft(f)),t.speedy&&(t.nc.getScrollTop(),t.chky=p,t.nc.setScrollTop(p)),t.timer||(t.nc.hideCursor(),t.doSnapy(f,p))})),t.demulxy<1?t.timer=setTimeout(m,d):(t.stop(),t.nc.hideCursor(),t.doSnapy(f,p))};m()}else t.doSnapy(t.nc.getScrollLeft(),t.nc.getScrollTop())}},T=e.fn.scrollTop;e.cssHooks.pageYOffset={get:function(e,t,n){var r=s.data(e,"__nicescroll")||!1;return r&&r.ishwscroll?r.getScrollTop():T.call(e)},set:function(e,t){var n=s.data(e,"__nicescroll")||!1;return n&&n.ishwscroll?n.setScrollTop(parseInt(t)):T.call(e,t),this}},e.fn.scrollTop=function(e){if(void 0===e){var t=this[0]&&s.data(this[0],"__nicescroll")||!1;return t&&t.ishwscroll?t.getScrollTop():T.call(this)}return this.each((function(){var t=s.data(this,"__nicescroll")||!1;t&&t.ishwscroll?t.setScrollTop(parseInt(e)):T.call(s(this),e)}))};var S=e.fn.scrollLeft;s.cssHooks.pageXOffset={get:function(e,t,n){var r=s.data(e,"__nicescroll")||!1;return r&&r.ishwscroll?r.getScrollLeft():S.call(e)},set:function(e,t){var n=s.data(e,"__nicescroll")||!1;return n&&n.ishwscroll?n.setScrollLeft(parseInt(t)):S.call(e,t),this}},e.fn.scrollLeft=function(e){if(void 0===e){var t=this[0]&&s.data(this[0],"__nicescroll")||!1;return t&&t.ishwscroll?t.getScrollLeft():S.call(this)}return this.each((function(){var t=s.data(this,"__nicescroll")||!1;t&&t.ishwscroll?t.setScrollLeft(parseInt(e)):S.call(s(this),e)}))};var k=function(e){var t=this;if(this.length=0,this.name="nicescrollarray",this.each=function(e){return s.each(t,e),t},this.push=function(e){t[t.length]=e,t.length++},this.eq=function(e){return t[e]},e)for(var n=0;n<e.length;n++){var r=s.data(e[n],"__nicescroll")||!1;r&&(this[this.length]=r,this.length++)}return this};function C(e,t,n){for(var r=0,o=t.length;r<o;r++)n(e,t[r])}C(k.prototype,["show","hide","toggle","onResize","resize","remove","stop","doScrollPos"],(function(e,t){e[t]=function(){var e=arguments;return this.each((function(){this[t].apply(this,e)}))}})),e.fn.getNiceScroll=function(e){return void 0===e?new k(this):this[e]&&s.data(this[e],"__nicescroll")||!1},(e.expr.pseudos||e.expr[":"]).nicescroll=function(e){return void 0!==s.data(e,"__nicescroll")},s.fn.niceScroll=function(e,t){void 0!==t||"object"!=typeof e||"jquery"in e||(t=e,e=!1);var n=new k;return this.each((function(){var r=s(this),o=s.extend({},t);if(e){var i=s(e);o.doc=i.length>1?s(e,r):i,o.win=r}!("doc"in o)||"win"in o||(o.win=r);var a=r.data("__nicescroll")||!1;a||(o.doc=o.doc||r,a=new x(o,r),r.data("__nicescroll",a)),n.push(a)})),1===n.length?n[0]:n},l.NiceScroll={getjQuery:function(){return e}},s.nicescroll||(s.nicescroll=new k,s.nicescroll.options=v)},void 0===(i="function"==typeof r?r.apply(t,o):r)||(e.exports=i)},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,o){"use strict";var i=[],s=Object.getPrototypeOf,a=i.slice,l=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,u=i.indexOf,d={},h=d.toString,f=d.hasOwnProperty,p=f.toString,m=p.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=r.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||b).createElement("script");if(i.text=e,t)for(r in x)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var S="3.6.0",k=function(e,t){return new k.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}k.fn=k.prototype={jquery:S,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(c&&r&&(k.isPlainObject(r)||(o=Array.isArray(r)))?(n=s[t],i=o&&!Array.isArray(n)?[]:o||k.isPlainObject(n)?n:{},o=!1,s[t]=k.extend(c,i,r)):void 0!==r&&(s[t]=r));return s},k.extend({expando:"jQuery"+(S+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=s(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?k.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,s=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&s.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&s.push(o);return l(s)},guid:1,support:g}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,r,o,i,s,a,l,c,u,d,h,f,p,m,g,v,y,b,x="sizzle"+1*new Date,w=e.document,T=0,S=0,k=le(),C=le(),E=le(),z=le(),L=function(e,t){return e===t&&(d=!0),0},N={}.hasOwnProperty,A=[],D=A.pop,j=A.push,M=A.push,q=A.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\[[\\x20\\t\\r\\n\\f]*("+R+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+O+"*\\]",B=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",_=new RegExp(O+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),X=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),$=new RegExp(O+"|>"),Y=new RegExp(B),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){h()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{M.apply(A=q.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){M={apply:A.length?function(e,t){j.apply(e,q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,o){var i,a,c,u,d,p,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!o&&(h(t),t=t||f,m)){if(11!==w&&(d=J.exec(e)))if(i=d[1]){if(9===w){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(y&&(c=y.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(d[2])return M.apply(r,t.getElementsByTagName(e)),r;if((i=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return M.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!z[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&($.test(e)||X.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(re,oe):t.setAttribute("id",u=x)),a=(p=s(e)).length;a--;)p[a]=(u?"#"+u:":scope")+" "+be(p[a]);v=p.join(",")}try{return M.apply(r,y.querySelectorAll(v)),r}catch(t){z(e,!0)}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,r,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[x]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function he(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},i=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},h=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:w;return s!=f&&9===s.nodeType&&s.documentElement?(p=(f=s).documentElement,m=!i(f),w!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=ue((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ue((function(e){return p.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Q.test(f.querySelectorAll))&&(ue((function(e){var t;p.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+P+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=Q.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",B)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(p.compareDocumentPosition),b=t||Q.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==w&&b(w,e)?-1:t==f||t.ownerDocument==w&&b(w,t)?1:u?H(u,e)-H(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e==f?-1:t==f?1:o?-1:i?1:u?H(u,e)-H(u,t):0;if(o===i)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?he(s[r],a[r]):s[r]==w?-1:a[r]==w?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(h(e),n.matchesSelector&&m&&!z[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){z(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&h(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&h(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(re,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],o=0,i=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(L),d){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return u=null,e},o=ae.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},r=ae.selectors={cacheLength:50,createPseudo:ce,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+O+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=ae.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(_," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,h,f,p,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(i){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&y){for(b=(f=(c=(u=(d=(h=g)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===T&&c[1])&&c[2],h=f&&g.childNodes[f];h=++f&&h&&h[m]||(b=f=0)||p.pop();)if(1===h.nodeType&&++b&&h===t){u[e]=[T,f,b];break}}else if(y&&(b=f=(c=(u=(d=(h=t)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===T&&c[1]),!1===b)for(;(h=++f&&h&&h[m]||(b=f=0)||p.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((u=(d=h[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[T,b]),h!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,i=o(e,t),s=i.length;s--;)e[r=H(e,i[s])]=!(n[r]=i[s])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],r=a(e.replace(W,"$1"));return r[x]?ce((function(e,t,n,o){for(var i,s=r(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return U.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=S++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,h=[T,a];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(u=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[i])&&c[0]===T&&c[1]===a)return h[2]=c[2];if(u[i]=h,h[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Te(e,t,n,r,o){for(var i,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),c&&t.push(a)));return s}function Se(e,t,n,r,o,i){return r&&!r[x]&&(r=Se(r)),o&&!o[x]&&(o=Se(o,i)),ce((function(i,s,a,l){var c,u,d,h=[],f=[],p=s.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ae(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!i&&t?m:Te(m,h,e,a,l),v=n?o||(i?e:p||r)?[]:s:g;if(n&&n(g,v,a,l),r)for(c=Te(v,f),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[f[u]]=!(g[f[u]]=d));if(i){if(o||e){if(o){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);o(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=o?H(i,d):h[u])>-1&&(i[c]=!(s[c]=d))}}else v=Te(v===s?v.splice(p,v.length):v),o?o(null,s,v,l):M.apply(s,v)}))}function ke(e){for(var t,n,o,i=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],l=s?1:0,u=xe((function(e){return e===t}),a,!0),d=xe((function(e){return H(t,e)>-1}),a,!0),h=[function(e,n,r){var o=!s&&(r||n!==c)||((t=n).nodeType?u(e,n,r):d(e,n,r));return t=null,o}];l<i;l++)if(n=r.relative[e[l].type])h=[xe(we(h),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(o=++l;o<i&&!r.relative[e[o].type];o++);return Se(l>1&&we(h),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&ke(e.slice(l,o)),o<i&&ke(e=e.slice(o)),o<i&&be(e))}h.push(n)}return we(h)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=ae.tokenize=function(e,t){var n,o,i,s,a,l,c,u=C[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=r.preFilter;a;){for(s in n&&!(o=F.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(i=[])),n=!1,(o=X.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),r.filter)!(o=V[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):C(e,l).slice(0)},a=ae.compile=function(e,t){var n,o=[],i=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=ke(t[n]))[x]?o.push(a):i.push(a);a=E(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,s,a,l,u){var d,p,g,v=0,y="0",b=i&&[],x=[],w=c,S=i||o&&r.find.TAG("*",u),k=T+=null==w?1:Math.random()||.1,C=S.length;for(u&&(c=s==f||s||u);y!==C&&null!=(d=S[y]);y++){if(o&&d){for(p=0,s||d.ownerDocument==f||(h(d),a=!m);g=e[p++];)if(g(d,s||f,a)){l.push(d);break}u&&(T=k)}n&&((d=!g&&d)&&v--,i&&b.push(d))}if(v+=y,n&&y!==v){for(p=0;g=t[p++];)g(b,x,s,a);if(i){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=D.call(l));x=Te(x)}M.apply(l,x),u&&!i&&x.length>0&&v+t.length>1&&ae.uniqueSort(l)}return u&&(T=k,c=w),b};return n?ce(i):i}(i,o)),a.selector=e}return a},l=ae.select=function(e,t,n,o){var i,l,c,u,d,h="function"==typeof e&&e,f=!o&&s(e=h.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=V.needsContext.test(e)?0:l.length;i--&&(c=l[i],!r.relative[u=c.type]);)if((d=r.find[u])&&(o=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(i,1),!(e=o.length&&be(l)))return M.apply(n,o),n;break}}return(h||a(e,f))(o,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(L).join("")===x,n.detectDuplicates=!!d,h(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(P,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ae}(r);k.find=E,k.expr=E.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=E.uniqueSort,k.text=E.getText,k.isXMLDoc=E.isXML,k.contains=E.contains,k.escapeSelector=E.escape;var z=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&k(e).is(n))break;r.push(e)}return r},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return v(t)?k.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?k.grep(e,(function(e){return u.call(t,e)>-1!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<r;t++)if(k.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,o[t],n);return r>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var M,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||M,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:q.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=b.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,M=k(b);var H=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&k(e);if(!N.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(k(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return z(e,"parentNode")},parentsUntil:function(e,t,n){return z(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return z(e,"nextSibling")},prevAll:function(e){return z(e,"previousSibling")},nextUntil:function(e,t,n){return z(e,"nextSibling",n)},prevUntil:function(e,t,n){return z(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,r){var o=k.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=k.filter(r,o)),this.length>1&&(P[e]||k.uniqueSort(o),H.test(e)&&o.reverse()),this.pushStack(o)}}));var R=/[^\x20\t\r\n\f]+/g;function I(e){return e}function B(e){throw e}function _(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):k.extend({},e);var t,n,r,o,i=[],s=[],a=-1,l=function(){for(o=o||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(a=i.length-1,s.push(n)),function t(n){k.each(n,(function(n,r){v(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==T(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;(n=k.inArray(t,i,n))>-1;)i.splice(n,1),n<=a&&a--})),this},has:function(e){return e?k.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(n){k.each(t,(function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var i=0;function s(e,t,n,o){return function(){var a=this,l=arguments,c=function(){var r,c;if(!(e<i)){if((r=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"==typeof r||"function"==typeof r)&&r.then,v(c)?o?c.call(r,s(i,t,I,o),s(i,t,B,o)):(i++,c.call(r,s(i,t,I,o),s(i,t,B,o),s(i,t,I,t.notifyWith))):(n!==I&&(a=void 0,l=[r]),(o||t.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(r){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(r,u.stackTrace),e+1>=i&&(n!==B&&(a=void 0,l=[r]),t.rejectWith(a,l))}};e?u():(k.Deferred.getStackHook&&(u.stackTrace=k.Deferred.getStackHook()),r.setTimeout(u))}}return k.Deferred((function(r){t[0][3].add(s(0,r,v(o)?o:I,r.notifyWith)),t[1][3].add(s(0,r,v(e)?e:I)),t[2][3].add(s(0,r,v(n)?n:B))})).promise()},promise:function(e){return null!=e?k.extend(e,o):o}},i={};return k.each(t,(function(e,r){var s=r[2],a=r[5];o[r[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=s.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=a.call(arguments),i=k.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(_(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)_(o[n],s(n),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&W.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){r.setTimeout((function(){throw e}))};var F=k.Deferred();function X(){b.removeEventListener("DOMContentLoaded",X),r.removeEventListener("load",X),k.ready()}k.fn.ready=function(e){return F.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||F.resolveWith(b,[k]))}}),k.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(k.ready):(b.addEventListener("DOMContentLoaded",X),r.addEventListener("load",X));var $=function(e,t,n,r,o,i,s){var a=0,l=e.length,c=null==n;if("object"===T(n))for(a in o=!0,n)$(e,t,a,n[a],!0,i,s);else if(void 0!==r&&(o=!0,v(r)||(s=!0),c&&(s?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(k(e),n)})),t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):i},Y=/^-ms-/,U=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function Z(e){return e.replace(Y,"ms-").replace(U,V)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=k.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Z(t)]=n;else for(r in t)o[Z(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new K,J=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=J.get(i),1===i.nodeType&&!Q.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=Z(r.slice(5)),ne(i,r,o[r]));Q.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){J.set(this,e)})):$(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=J.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,o=n.shift(),i=k._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){k.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=k.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=b.documentElement,ae=function(e){return k.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(ae=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===k.css(e,"display")};function ue(e,t,n,r){var o,i,s=20,a=r?function(){return r.cur()}:function(){return k.css(e,t,"")},l=a(),c=n&&n[3]||(k.cssNumber[t]?"":"px"),u=e.nodeType&&(k.cssNumber[t]||"px"!==c&&+l)&&oe.exec(k.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)k.style(e,t,u+c),(1-i)*(1-(i=a()/l||.5))<=0&&(s=0),u/=i;u*=2,k.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var de={};function he(e){var t,n=e.ownerDocument,r=e.nodeName,o=de[r];return o||(t=n.body.appendChild(n.createElement(r)),o=k.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),de[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=Q.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ce(r)&&(o[i]=he(r))):"none"!==n&&(o[i]="none",Q.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?k(this).show():k(this).hide()}))}});var pe,me,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(me=b.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),pe.appendChild(me),g.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",g.option=!!pe.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function we(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,g.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function Se(e,t,n,r,o){for(var i,s,a,l,c,u,d=t.createDocumentFragment(),h=[],f=0,p=e.length;f<p;f++)if((i=e[f])||0===i)if("object"===T(i))k.merge(h,i.nodeType?[i]:i);else if(Te.test(i)){for(s=s||d.appendChild(t.createElement("div")),a=(ve.exec(i)||["",""])[1].toLowerCase(),l=be[a]||be._default,s.innerHTML=l[1]+k.htmlPrefilter(i)+l[2],u=l[0];u--;)s=s.lastChild;k.merge(h,s.childNodes),(s=d.firstChild).textContent=""}else h.push(t.createTextNode(i));for(d.textContent="",f=0;i=h[f++];)if(r&&k.inArray(i,r)>-1)o&&o.push(i);else if(c=ae(i),s=xe(d.appendChild(i),"script"),c&&we(s),n)for(u=0;i=s[u++];)ye.test(i.type||"")&&n.push(i);return d}var ke=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Ee(){return!1}function ze(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Le(e,t,n,r,o,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Le(e,a,n,r,t[a],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Ee;else if(!o)return e;return 1===i&&(s=o,o=function(e){return k().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=k.guid++)),e.each((function(){k.event.add(this,t,o,r,n)}))}function Ne(e,t,n){n?(Q.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),Q.set(this,t,i),r=n(this,t),this[t](),i!==(o=Q.get(this,t))||r?Q.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o&&o.value}else i.length&&(Q.set(this,t,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&k.event.add(e,t,Ce)}k.event={global:{},add:function(e,t,n,r,o){var i,s,a,l,c,u,d,h,f,p,m,g=Q.get(e);if(G(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&k.find.matchesSelector(se,o),n.guid||(n.guid=k.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)f=m=(a=ke.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},u=k.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:p.join(".")},i),(h=l[f])||((h=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,p,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,u):h.push(u),k.event.global[f]=!0)},remove:function(e,t,n,r,o){var i,s,a,l,c,u,d,h,f,p,m,g=Q.hasData(e)&&Q.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(f=m=(a=ke.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},h=l[f=(r?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=h.length;i--;)u=h[i],!o&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(h.splice(i,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(e,u));s&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,p,g.handle)||k.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)k.event.remove(e,f+t[c],n,r,!0);k.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,a=new Array(arguments.length),l=k.event.fix(e),c=(Q.get(this,"events")||Object.create(null))[l.type]||[],u=k.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=k.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((k.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,a))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],s={},n=0;n<l;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?k(o,this).index(c)>-1:k.find(o,this,null,[c]).length),s[o]&&i.push(r);i.length&&a.push({elem:c,handlers:i})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click",Ce),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(e,t){k.event.special[e]={setup:function(){return Ne(this,e,ze),!1},trigger:function(){return Ne(this,e),!0},_default:function(){return!0},delegateType:t}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||k.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,r){return Le(this,e,t,n,r)},one:function(e,t,n,r){return Le(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){k.event.remove(this,e,n,t)}))}});var Ae=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,o,i,s,a;if(1===t.nodeType){if(Q.hasData(e)&&(a=Q.get(e).events))for(o in Q.remove(t,"handle events"),a)for(n=0,r=a[o].length;n<r;n++)k.event.add(t,o,a[o][n]);J.hasData(e)&&(i=J.access(e),s=k.extend({},i),J.set(t,s))}}function Oe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=l(t);var o,i,s,a,c,u,d=0,h=e.length,f=h-1,p=t[0],m=v(p);if(m||h>1&&"string"==typeof p&&!g.checkClone&&De.test(p))return e.each((function(o){var i=e.eq(o);m&&(t[0]=p.call(this,o,i.html())),Re(i,t,n,r)}));if(h&&(i=(o=Se(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(a=(s=k.map(xe(o,"script"),qe)).length;d<h;d++)c=o,d!==f&&(c=k.clone(c,!0,!0),a&&k.merge(s,xe(c,"script"))),n.call(e[d],c,d);if(a)for(u=s[s.length-1].ownerDocument,k.map(s,He),d=0;d<a;d++)c=s[d],ye.test(c.type||"")&&!Q.access(c,"globalEval")&&k.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?k._evalUrl&&!c.noModule&&k._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(je,""),c,u))}return e}function Ie(e,t,n){for(var r,o=t?k.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||k.cleanData(xe(r)),r.parentNode&&(n&&ae(r)&&we(xe(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,s,a=e.cloneNode(!0),l=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=xe(a),r=0,o=(i=xe(e)).length;r<o;r++)Oe(i[r],s[r]);if(t)if(n)for(i=i||xe(e),s=s||xe(a),r=0,o=i.length;r<o;r++)Pe(i[r],s[r]);else Pe(e,a);return(s=xe(a,"script")).length>0&&we(s,!l&&xe(e,"script")),a},cleanData:function(e){for(var t,n,r,o=k.event.special,i=0;void 0!==(n=e[i]);i++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)o[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return $(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return $(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!be[(ve.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){k.fn[e]=function(e){for(var n,r=[],o=k(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),k(o[s])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Be=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),_e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},We=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Fe=new RegExp(ie.join("|"),"i");function Xe(e,t,n){var r,o,i,s,a=e.style;return(n=n||_e(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=k.style(e,t)),!g.pixelBoxStyles()&&Be.test(s)&&Fe.test(t)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(c).appendChild(u);var e=r.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),o=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),se.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(g,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var Ye=["Webkit","Moz","ms"],Ue=b.createElement("div").style,Ve={};function Ze(e){var t=k.cssProps[e]||Ve[e];return t||(e in Ue?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Ue)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,o,i){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=k.css(e,n+ie[s],!0,o)),r?("content"===n&&(l-=k.css(e,"padding"+ie[s],!0,o)),"margin"!==n&&(l-=k.css(e,"border"+ie[s]+"Width",!0,o))):(l+=k.css(e,"padding"+ie[s],!0,o),"padding"!==n?l+=k.css(e,"border"+ie[s]+"Width",!0,o):a+=k.css(e,"border"+ie[s]+"Width",!0,o));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-a-.5))||0),l}function nt(e,t,n){var r=_e(e),o=(!g.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),i=o,s=Xe(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Be.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&o||!g.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===k.css(e,"boxSizing",!1,r),(i=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+tt(e,t,n||(o?"border":"content"),i,r,s)+"px"}function rt(e,t,n,r,o){return new rt.prototype.init(e,t,n,r,o)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Xe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=Z(t),l=Ke.test(t),c=e.style;if(l||(t=Ze(a)),s=k.cssHooks[t]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:c[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ue(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=o&&o[3]||(k.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,s,a=Z(t);return Ke.test(t)||(t=Ze(a)),(s=k.cssHooks[t]||k.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Xe(e,t,r)),"normal"===o&&t in Je&&(o=Je[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),k.each(["height","width"],(function(e,t){k.cssHooks[t]={get:function(e,n,r){if(n)return!Ge.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):We(e,Qe,(function(){return nt(e,t,r)}))},set:function(e,n,r){var o,i=_e(e),s=!g.scrollboxSize()&&"absolute"===i.position,a=(s||r)&&"border-box"===k.css(e,"boxSizing",!1,i),l=r?tt(e,t,r,a,i):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),et(0,n,l)}}})),k.cssHooks.marginLeft=$e(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Xe(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(k.cssHooks[e+t].set=et)})),k.fn.extend({css:function(e,t){return $(this,(function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=_e(e),o=t.length;s<o;s++)i[t[s]]=k.css(e,t[s],!1,r);return i}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,arguments.length>1)}}),k.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(k.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=rt.prototype.init,k.fx.step={};var ot,it,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function lt(){it&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return r.setTimeout((function(){ot=void 0})),ot=Date.now()}function ut(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function dt(e,t,n){for(var r,o=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function ht(e,t,n){var r,o,i=0,s=ht.prefilters.length,a=k.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=ot||ct(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,s=c.tweens.length;i<s;i++)c.tweens[i].run(r);return a.notifyWith(e,[c,r,n]),r<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var r=k.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,r,o,i,s;for(n in e)if(o=t[r=Z(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=k.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);i<s;i++)if(r=ht.prefilters[i].call(c,e,u,c.opts))return v(r.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return k.map(u,dt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,a,l,c,u,d="width"in t||"height"in t,h=this,f={},p=e.style,m=e.nodeType&&ce(e),g=Q.get(e,"fxshow");for(r in n.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always((function(){h.always((function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[r],st.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||k.style(e,r)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=g&&g.display)&&(c=Q.get(e,"display")),"none"===(u=k.css(e,"display"))&&(c?u=c:(fe([e],!0),c=e.style.display||c,u=k.css(e,"display"),fe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===k.css(e,"float")&&(l||(h.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(e,"fxshow",{display:c}),i&&(g.hidden=!m),m&&fe([e],!0),h.done((function(){for(r in m||fe([e]),Q.remove(e,"fxshow"),f)k.style(e,r,f[r])}))),l=dt(m?g[r]:0,r,h),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=k.isEmptyObject(e),i=k.speed(t,n,r),s=function(){var t=ht(this,k.extend({},e),i);(o||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=k.timers,s=Q.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&at.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=k.timers,s=r?r.length:0;for(n.finish=!0,k.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),k.each(["toggle","show","hide"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,o)}})),k.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){k.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ot=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ft,pt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return $(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?k.prop(e,t,n):(1===i&&k.isXMLDoc(e)||(o=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(R);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=pt[t]||k.find.attr;pt[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=pt[s],pt[s]=o,o=null!=n(e,t,r)?s:null,pt[s]=i),o}}));var mt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function vt(e){return(e.match(R)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return $(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(e)||(t=k.propFix[t]||t,o=k.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,r,o,i,s,a,l=0;if(v(e))return this.each((function(t){k(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(o=yt(n),r=1===n.nodeType&&" "+vt(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=vt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,o,i,s,a,l=0;if(v(e))return this.each((function(t){k(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(o=yt(n),r=1===n.nodeType&&" "+vt(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=vt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,o,i,s;if(r)for(o=0,i=k(this),s=bt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;k.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,k(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=k.map(o,(function(e){return null==e?"":e+""}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=k.valHooks[o.type]||k.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(xt,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:vt(k.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?i+1:o.length;for(r=i<0?l:s?i:0;r<l;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=k.makeArray(t),s=o.length;s--;)((r=o[s]).selected=k.inArray(k.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},g.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in r;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,o){var i,s,a,l,c,u,d,h,p=[n||b],m=f.call(e,"type")?e.type:e,g=f.call(e,"namespace")?e.namespace.split("."):[];if(s=h=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(m+k.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[k.expando]?e:new k.Event(m,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),d=k.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(n,t))){if(!o&&!d.noBubble&&!y(n)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(n.ownerDocument||b)&&p.push(a.defaultView||a.parentWindow||r)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)h=s,e.type=i>1?l:d.bindType||m,(u=(Q.get(s,"events")||Object.create(null))[e.type]&&Q.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&G(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!G(n)||c&&v(n[m])&&!y(n)&&((a=n[c])&&(n[c]=null),k.event.triggered=m,e.isPropagationStopped()&&h.addEventListener(m,Tt),n[m](),e.isPropagationStopped()&&h.removeEventListener(m,Tt),k.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),g.focusin||k.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=Q.access(r,t);o||r.addEventListener(e,n,!0),Q.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=Q.access(r,t)-1;o?Q.access(r,t,o):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}}));var St=r.location,kt={guid:Date.now()},Ct=/\?/;k.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||k.error("Invalid XML: "+(n?k.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Et=/\[\]$/,zt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function At(e,t,n,r){var o;if(Array.isArray(t))k.each(t,(function(t,o){n||Et.test(e)?r(e,o):At(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==T(t))r(e,t);else for(o in t)At(e+"["+o+"]",t[o],n,r)}k.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){o(this.name,this.value)}));else for(n in e)At(n,e[n],t,o);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Nt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(zt,"\r\n")}})):{name:t.name,value:n.replace(zt,"\r\n")}})).get()}});var Dt=/%20/g,jt=/#.*$/,Mt=/([?&])_=[^&]*/,qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,Pt=/^\/\//,Ot={},Rt={},It="*/".concat("*"),Bt=b.createElement("a");function _t(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(R)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Wt(e,t,n,r){var o={},i=e===Rt;function s(a){var l;return o[a]=!0,k.each(e[a]||[],(function(e,a){var c=a(t,n,r);return"string"!=typeof c||i||o[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Ft(e,t){var n,r,o=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Bt.href=St.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,k.ajaxSettings),t):Ft(k.ajaxSettings,e)},ajaxPrefilter:_t(Ot),ajaxTransport:_t(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,i,s,a,l,c,u,d,h,f=k.ajaxSetup({},t),p=f.context||f,m=f.context&&(p.nodeType||p.jquery)?k(p):k.event,g=k.Deferred(),v=k.Callbacks("once memory"),y=f.statusCode||{},x={},w={},T="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=qt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),C(0,t),this}};if(g.promise(S),f.url=((e||f.url||St.href)+"").replace(Pt,St.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(R)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Bt.protocol+"//"+Bt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=k.param(f.data,f.traditional)),Wt(Ot,f,t,S),c)return S;for(d in(u=k.event&&f.global)&&0==k.active++&&k.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ht.test(f.type),o=f.url.replace(jt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Dt,"+")):(h=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Ct.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Mt,"$1"),h=(Ct.test(o)?"&":"?")+"_="+kt.guid+++h),f.url=o+h),f.ifModified&&(k.lastModified[o]&&S.setRequestHeader("If-Modified-Since",k.lastModified[o]),k.etag[o]&&S.setRequestHeader("If-None-Match",k.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&S.setRequestHeader("Content-Type",f.contentType),S.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+It+"; q=0.01":""):f.accepts["*"]),f.headers)S.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(p,S,f)||c))return S.abort();if(T="abort",v.add(f.complete),S.done(f.success),S.fail(f.error),n=Wt(Rt,f,t,S)){if(S.readyState=1,u&&m.trigger("ajaxSend",[S,f]),c)return S;f.async&&f.timeout>0&&(a=r.setTimeout((function(){S.abort("timeout")}),f.timeout));try{c=!1,n.send(x,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,l){var d,h,b,x,w,T=t;c||(c=!0,a&&r.clearTimeout(a),n=void 0,i=l||"",S.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,o,i,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==l[0]&&l.unshift(i),n[i]}(f,S,s)),!d&&k.inArray("script",f.dataTypes)>-1&&k.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),x=function(e,t,n,r){var o,i,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(s=c[l+" "+i]||c["* "+i]))for(o in c)if((a=o.split(" "))[1]===i&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(i=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(f,x,S,d),d?(f.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(k.lastModified[o]=w),(w=S.getResponseHeader("etag"))&&(k.etag[o]=w)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=x.state,h=x.data,d=!(b=x.error))):(b=T,!e&&T||(T="error",e<0&&(e=0))),S.status=e,S.statusText=(t||T)+"",d?g.resolveWith(p,[h,T,S]):g.rejectWith(p,[S,T,b]),S.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[S,f,d?h:b]),v.fireWith(p,[S,T]),u&&(m.trigger("ajaxComplete",[S,f]),--k.active||k.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],(function(e,t){k[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:o,data:n,success:r},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Xt={0:200,1223:204},$t=k.ajaxSettings.xhr();g.cors=!!$t&&"withCredentials"in $t,g.ajax=$t=!!$t,k.ajaxTransport((function(e){var t,n;if(g.cors||$t&&!e.crossDomain)return{send:function(o,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Xt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),k.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=k("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Yt,Ut=[],Vt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||k.expando+"_"+kt.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",(function(e,t,n){var o,i,s,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||k.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=r[o],r[o]=function(){s=arguments},n.always((function(){void 0===i?k(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(o)),s&&v(i)&&i(s[0]),s=i=void 0})),"script"})),g.createHTMLDocument=((Yt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),i=!n&&[],(o=D.exec(e))?[t.createElement(o[1])]:(o=Se([e],t,i),i&&i.length&&k(i).remove(),k.merge([],o.childNodes)));var r,o,i},k.fn.load=function(e,t,n){var r,o,i,s=this,a=e.indexOf(" ");return a>-1&&(r=vt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&k.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var r,o,i,s,a,l,c=k.css(e,"position"),u=k(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),i=k.css(e,"top"),l=k.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(s=(r=u.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(l)||0),v(t)&&(t=t.call(e,n,k.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):u.css(d)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),o.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-k.css(r,"marginTop",!0),left:t.left-o.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||se}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;k.fn[e]=function(r){return $(this,(function(e,r,o){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),k.each(["top","left"],(function(e,t){k.cssHooks[t]=$e(g.pixelPosition,(function(e,n){if(n)return n=Xe(e,t),Be.test(n)?k(e).position()[t]+"px":n}))})),k.each({Height:"height",Width:"width"},(function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){k.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return $(this,(function(t,n,o){var i;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?k.css(t,n,a):k.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=a.call(arguments,2),o=function(){return e.apply(t||this,r.concat(a.call(arguments)))},o.guid=e.guid=e.guid||k.guid++,o},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=v,k.isWindow=y,k.camelCase=Z,k.type=T,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(n=function(){return k}.apply(t,[]))||(e.exports=n);var Gt=r.jQuery,Kt=r.$;return k.noConflict=function(e){return r.$===k&&(r.$=Kt),e&&r.jQuery===k&&(r.jQuery=Gt),k},void 0===o&&(r.jQuery=r.$=k),k}))}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";n(248);var e=n(755);e((function(){e("body").niceScroll({cursorcolor:"#555",cursorborder:"1px solid #555",cursorwidth:"18",cursorminheight:"40",cursorborderradius:"0"}),e(".header").niceScroll({cursorcolor:"#555",cursorborder:"1px solid #555",cursorwidth:"18",cursorminheight:"40",cursorborderradius:"0"}),e(".menu-activea, .header-container").height(e(window).height()),e(window).resize((function(){e(".header-container").height(e(window).height())}));var t=e(".menu-activea");e(".menu-activea h4").on("click",(function(){t.toggleClass("show-menu","hide-menu"),t.hasClass("show-menu")?e(".header").animate({paddingLeft:t.innerWidth()},500):e(".header").animate({paddingLeft:0},500)})),e(".copyright i").on("click",(function(){e("html, body").animate({scrollTop:"0"},1300)})),e(".header .user-i, .header .finger-i, .header .message-i, .header .screen-i, .header .cam-i ").on("click",(function(){e("html, body").animate({scrollTop:e(e(this).data("scroll")).offset().top+1},1500)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRSxjQUFjdWlCLFFBQVEsQ0FBQzNSLFVBQWE1USxFQUFFQSxFQUFFbUwsTUFBTXViLEtBQUssV0FBV2xSLFNBQVNsUixJQUFPLEdBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaWdpdGFsLXByb2R1Y3QvLi9ub2RlX21vZHVsZXMvanF1ZXJ5Lm5pY2VzY3JvbGwvanF1ZXJ5Lm5pY2VzY3JvbGwuanMiLCJ3ZWJwYWNrOi8vZGlnaXRhbC1wcm9kdWN0Ly4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly9kaWdpdGFsLXByb2R1Y3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZGlnaXRhbC1wcm9kdWN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2RpZ2l0YWwtcHJvZHVjdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZGlnaXRhbC1wcm9kdWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZGlnaXRhbC1wcm9kdWN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGpxdWVyeS5uaWNlc2Nyb2xsXHJcbi0tIHZlcnNpb24gMy43LjZcclxuLS0gY29weXJpZ2h0IDIwMTctMDctMTkgSW51WWFrc2EqMjAxN1xyXG4tLSBsaWNlbnNlZCB1bmRlciB0aGUgTUlUXHJcbi0tXHJcbi0tIGh0dHBzOi8vbmljZXNjcm9sbC5hcmVhYXBlcnRhLmNvbS9cclxuLS0gaHR0cHM6Ly9naXRodWIuY29tL2ludXlha3NhL2pxdWVyeS5uaWNlc2Nyb2xsXHJcbi0tXHJcbiovXHJcblxyXG4vKiBqc2hpbnQgZXhwcjogdHJ1ZSAqL1xyXG5cclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbm9ueW1vdXMgbW9kdWxlLlxyXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAvLyBOb2RlL0NvbW1vbkpTLlxyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gQnJvd3NlciBnbG9iYWxzLlxyXG4gICAgZmFjdG9yeShqUXVlcnkpO1xyXG4gIH1cclxufShmdW5jdGlvbiAoalF1ZXJ5KSB7XHJcblxyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvLyBnbG9iYWxzXHJcbiAgdmFyIGRvbWZvY3VzID0gZmFsc2UsXHJcbiAgICBtb3VzZWZvY3VzID0gZmFsc2UsXHJcbiAgICB0YWJpbmRleGNvdW50ZXIgPSAwLFxyXG4gICAgYXNjcmFpbGNvdW50ZXIgPSAyMDAwLFxyXG4gICAgZ2xvYmFsbWF4emluZGV4ID0gMDtcclxuXHJcbiAgdmFyICQgPSBqUXVlcnksICAgICAgIC8vIHNhbmRib3hcclxuICAgIF9kb2MgPSBkb2N1bWVudCxcclxuICAgIF93aW4gPSB3aW5kb3csXHJcbiAgICAkd2luZG93ID0gJChfd2luKTtcclxuXHJcbiAgdmFyIGRlbGVnYXRldmVudHMgPSBbXTtcclxuXHJcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTYxMTU5L2dldC1zY3JpcHQtcGF0aFxyXG4gIGZ1bmN0aW9uIGdldFNjcmlwdFBhdGgoKSB7XHJcbiAgICB2YXIgc2NyaXB0cyA9IF9kb2MuY3VycmVudFNjcmlwdCB8fCAoZnVuY3Rpb24gKCkgeyB2YXIgcyA9IF9kb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpOyByZXR1cm4gKHMubGVuZ3RoKSA/IHNbcy5sZW5ndGggLSAxXSA6IGZhbHNlOyB9KSgpO1xyXG4gICAgdmFyIHBhdGggPSBzY3JpcHRzID8gc2NyaXB0cy5zcmMuc3BsaXQoJz8nKVswXSA6ICcnO1xyXG4gICAgcmV0dXJuIChwYXRoLnNwbGl0KCcvJykubGVuZ3RoID4gMCkgPyBwYXRoLnNwbGl0KCcvJykuc2xpY2UoMCwgLTEpLmpvaW4oJy8nKSArICcvJyA6ICcnO1xyXG4gIH1cclxuXHJcbiAgLy8gYmFzZWQgb24gY29kZSBieSBQYXVsIElyaXNoIGh0dHBzOi8vd3d3LnBhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy8gIFxyXG4gIHZhciBzZXRBbmltYXRpb25GcmFtZSA9IF93aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IF93aW4ud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IF93aW4ubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZhbHNlO1xyXG4gIHZhciBjbGVhckFuaW1hdGlvbkZyYW1lID0gX3dpbi5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBfd2luLndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IF93aW4ubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgZmFsc2U7XHJcblxyXG4gIGlmICghc2V0QW5pbWF0aW9uRnJhbWUpIHtcclxuICAgIHZhciBhbmlsYXN0dGltZSA9IDA7XHJcbiAgICBzZXRBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkge1xyXG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGFuaWxhc3R0aW1lKSk7XHJcbiAgICAgIHZhciBpZCA9IF93aW4uc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sXHJcbiAgICAgICAgdGltZVRvQ2FsbCk7XHJcbiAgICAgIGFuaWxhc3R0aW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xyXG4gICAgICByZXR1cm4gaWQ7XHJcbiAgICB9O1xyXG4gICAgY2xlYXJBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICBfd2luLmNsZWFyVGltZW91dChpZCk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoIV93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUpIGNsZWFyQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHsgfTtcclxuICB9XHJcblxyXG4gIHZhciBDbHNNdXRhdGlvbk9ic2VydmVyID0gX3dpbi5NdXRhdGlvbk9ic2VydmVyIHx8IF93aW4uV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fCBmYWxzZTtcclxuXHJcbiAgdmFyIG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9O1xyXG5cclxuICB2YXIgX2dsb2JhbG9wdGlvbnMgPSB7XHJcbiAgICB6aW5kZXg6IFwiYXV0b1wiLFxyXG4gICAgY3Vyc29yb3BhY2l0eW1pbjogMCxcclxuICAgIGN1cnNvcm9wYWNpdHltYXg6IDEsXHJcbiAgICBjdXJzb3Jjb2xvcjogXCIjNDI0MjQyXCIsXHJcbiAgICBjdXJzb3J3aWR0aDogXCI2cHhcIixcclxuICAgIGN1cnNvcmJvcmRlcjogXCIxcHggc29saWQgI2ZmZlwiLFxyXG4gICAgY3Vyc29yYm9yZGVycmFkaXVzOiBcIjVweFwiLFxyXG4gICAgc2Nyb2xsc3BlZWQ6IDQwLFxyXG4gICAgbW91c2VzY3JvbGxzdGVwOiA5ICogMyxcclxuICAgIHRvdWNoYmVoYXZpb3I6IGZhbHNlLCAgIC8vIGRlcHJlY2F0ZWRcclxuICAgIGVtdWxhdGV0b3VjaDogZmFsc2UsICAgIC8vIHJlcGxhY2luZyB0b3VjaGJlaGF2aW9yXHJcbiAgICBod2FjY2VsZXJhdGlvbjogdHJ1ZSxcclxuICAgIHVzZXRyYW5zaXRpb246IHRydWUsXHJcbiAgICBib3h6b29tOiBmYWxzZSxcclxuICAgIGRibGNsaWNrem9vbTogdHJ1ZSxcclxuICAgIGdlc3R1cmV6b29tOiB0cnVlLFxyXG4gICAgZ3JhYmN1cnNvcmVuYWJsZWQ6IHRydWUsXHJcbiAgICBhdXRvaGlkZW1vZGU6IHRydWUsXHJcbiAgICBiYWNrZ3JvdW5kOiBcIlwiLFxyXG4gICAgaWZyYW1lYXV0b3Jlc2l6ZTogdHJ1ZSxcclxuICAgIGN1cnNvcm1pbmhlaWdodDogMzIsXHJcbiAgICBwcmVzZXJ2ZW5hdGl2ZXNjcm9sbGluZzogdHJ1ZSxcclxuICAgIHJhaWxvZmZzZXQ6IGZhbHNlLFxyXG4gICAgcmFpbGhvZmZzZXQ6IGZhbHNlLFxyXG4gICAgYm91bmNlc2Nyb2xsOiB0cnVlLFxyXG4gICAgc3BhY2ViYXJlbmFibGVkOiB0cnVlLFxyXG4gICAgcmFpbHBhZGRpbmc6IHtcclxuICAgICAgdG9wOiAwLFxyXG4gICAgICByaWdodDogMCxcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgYm90dG9tOiAwXHJcbiAgICB9LFxyXG4gICAgZGlzYWJsZW91dGxpbmU6IHRydWUsXHJcbiAgICBob3JpenJhaWxlbmFibGVkOiB0cnVlLFxyXG4gICAgcmFpbGFsaWduOiBcInJpZ2h0XCIsXHJcbiAgICByYWlsdmFsaWduOiBcImJvdHRvbVwiLFxyXG4gICAgZW5hYmxldHJhbnNsYXRlM2Q6IHRydWUsXHJcbiAgICBlbmFibGVtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgZW5hYmxla2V5Ym9hcmQ6IHRydWUsXHJcbiAgICBzbW9vdGhzY3JvbGw6IHRydWUsXHJcbiAgICBzZW5zaXRpdmVyYWlsOiB0cnVlLFxyXG4gICAgZW5hYmxlbW91c2Vsb2NrYXBpOiB0cnVlLFxyXG4gICAgLy8gICAgICBjdXJzb3JtYXhoZWlnaHQ6ZmFsc2UsXHJcbiAgICBjdXJzb3JmaXhlZGhlaWdodDogZmFsc2UsXHJcbiAgICBkaXJlY3Rpb25sb2NrZGVhZHpvbmU6IDYsXHJcbiAgICBoaWRlY3Vyc29yZGVsYXk6IDQwMCxcclxuICAgIG5hdGl2ZXBhcmVudHNjcm9sbGluZzogdHJ1ZSxcclxuICAgIGVuYWJsZXNjcm9sbG9uc2VsZWN0aW9uOiB0cnVlLFxyXG4gICAgb3ZlcmZsb3d4OiB0cnVlLFxyXG4gICAgb3ZlcmZsb3d5OiB0cnVlLFxyXG4gICAgY3Vyc29yZHJhZ3NwZWVkOiAwLjMsXHJcbiAgICBydGxtb2RlOiBcImF1dG9cIixcclxuICAgIGN1cnNvcmRyYWdvbnRvdWNoOiBmYWxzZSxcclxuICAgIG9uZWF4aXNtb3VzZW1vZGU6IFwiYXV0b1wiLFxyXG4gICAgc2NyaXB0cGF0aDogZ2V0U2NyaXB0UGF0aCgpLFxyXG4gICAgcHJldmVudG11bHRpdG91Y2hzY3JvbGxpbmc6IHRydWUsXHJcbiAgICBkaXNhYmxlbXV0YXRpb25vYnNlcnZlcjogZmFsc2UsXHJcbiAgICBlbmFibGVvYnNlcnZlcjogdHJ1ZSxcclxuICAgIHNjcm9sbGJhcmlkOiBmYWxzZVxyXG4gIH07XHJcblxyXG4gIHZhciBicm93c2VyZGV0ZWN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgdmFyIGdldEJyb3dzZXJEZXRlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgaWYgKGJyb3dzZXJkZXRlY3RlZCkgcmV0dXJuIGJyb3dzZXJkZXRlY3RlZDtcclxuXHJcbiAgICB2YXIgX2VsID0gX2RvYy5jcmVhdGVFbGVtZW50KCdESVYnKSxcclxuICAgICAgX3N0eWxlID0gX2VsLnN0eWxlLFxyXG4gICAgICBfYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxyXG4gICAgICBfcGxhdGZvcm0gPSBuYXZpZ2F0b3IucGxhdGZvcm0sXHJcbiAgICAgIGQgPSB7fTtcclxuXHJcbiAgICBkLmhhc3BvaW50ZXJsb2NrID0gXCJwb2ludGVyTG9ja0VsZW1lbnRcIiBpbiBfZG9jIHx8IFwid2Via2l0UG9pbnRlckxvY2tFbGVtZW50XCIgaW4gX2RvYyB8fCBcIm1velBvaW50ZXJMb2NrRWxlbWVudFwiIGluIF9kb2M7XHJcblxyXG4gICAgZC5pc29wZXJhID0gKFwib3BlcmFcIiBpbiBfd2luKTsgLy8gMTItXHJcbiAgICBkLmlzb3BlcmExMiA9IChkLmlzb3BlcmEgJiYgKFwiZ2V0VXNlck1lZGlhXCIgaW4gbmF2aWdhdG9yKSk7XHJcbiAgICBkLmlzb3BlcmFtaW5pID0gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChfd2luLm9wZXJhbWluaSkgPT09IFwiW29iamVjdCBPcGVyYU1pbmldXCIpO1xyXG5cclxuICAgIGQuaXNpZSA9ICgoXCJhbGxcIiBpbiBfZG9jKSAmJiAoXCJhdHRhY2hFdmVudFwiIGluIF9lbCkgJiYgIWQuaXNvcGVyYSk7IC8vSUUxMC1cclxuICAgIGQuaXNpZW9sZCA9IChkLmlzaWUgJiYgIShcIm1zSW50ZXJwb2xhdGlvbk1vZGVcIiBpbiBfc3R5bGUpKTsgLy8gSUU2IGFuZCBvbGRlclxyXG4gICAgZC5pc2llNyA9IGQuaXNpZSAmJiAhZC5pc2llb2xkICYmICghKFwiZG9jdW1lbnRNb2RlXCIgaW4gX2RvYykgfHwgKF9kb2MuZG9jdW1lbnRNb2RlID09PSA3KSk7XHJcbiAgICBkLmlzaWU4ID0gZC5pc2llICYmIChcImRvY3VtZW50TW9kZVwiIGluIF9kb2MpICYmIChfZG9jLmRvY3VtZW50TW9kZSA9PT0gOCk7XHJcbiAgICBkLmlzaWU5ID0gZC5pc2llICYmIChcInBlcmZvcm1hbmNlXCIgaW4gX3dpbikgJiYgKF9kb2MuZG9jdW1lbnRNb2RlID09PSA5KTtcclxuICAgIGQuaXNpZTEwID0gZC5pc2llICYmIChcInBlcmZvcm1hbmNlXCIgaW4gX3dpbikgJiYgKF9kb2MuZG9jdW1lbnRNb2RlID09PSAxMCk7XHJcbiAgICBkLmlzaWUxMSA9IChcIm1zUmVxdWVzdEZ1bGxzY3JlZW5cIiBpbiBfZWwpICYmIChfZG9jLmRvY3VtZW50TW9kZSA+PSAxMSk7IC8vIElFMTErXHJcblxyXG4gICAgZC5pc21zZWRnZSA9IChcIm1zQ3JlZGVudGlhbHNcIiBpbiBfd2luKTsgIC8vIE1TIEVkZ2UgMTQrXHJcblxyXG4gICAgZC5pc21vemlsbGEgPSAoXCJNb3pBcHBlYXJhbmNlXCIgaW4gX3N0eWxlKTtcclxuXHJcbiAgICBkLmlzd2Via2l0ID0gIWQuaXNtc2VkZ2UgJiYgKFwiV2Via2l0QXBwZWFyYW5jZVwiIGluIF9zdHlsZSk7XHJcblxyXG4gICAgZC5pc2Nocm9tZSA9IGQuaXN3ZWJraXQgJiYgKFwiY2hyb21lXCIgaW4gX3dpbik7XHJcbiAgICBkLmlzY2hyb21lMzggPSAoZC5pc2Nocm9tZSAmJiAoXCJ0b3VjaEFjdGlvblwiIGluIF9zdHlsZSkpOyAvLyBiZWhhdmlvciBjaGFuZ2VkIGluIHRvdWNoIGVtdWxhdGlvbiAgICBcclxuICAgIGQuaXNjaHJvbWUyMiA9ICghZC5pc2Nocm9tZTM4KSAmJiAoZC5pc2Nocm9tZSAmJiBkLmhhc3BvaW50ZXJsb2NrKTtcclxuICAgIGQuaXNjaHJvbWUyNiA9ICghZC5pc2Nocm9tZTM4KSAmJiAoZC5pc2Nocm9tZSAmJiAoXCJ0cmFuc2l0aW9uXCIgaW4gX3N0eWxlKSk7IC8vIGlzc3VlIHdpdGggdHJhbnNmb3JtIGRldGVjdGlvbiAobWFpbnRhaW4gcHJlZml4KVxyXG5cclxuICAgIGQuY2FudG91Y2ggPSAoXCJvbnRvdWNoc3RhcnRcIiBpbiBfZG9jLmRvY3VtZW50RWxlbWVudCkgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gX3dpbik7IC8vIHdpdGggZGV0ZWN0aW9uIGZvciBDaHJvbWUgVG91Y2ggRW11bGF0aW9uICAgIFxyXG4gICAgZC5oYXN3M2N0b3VjaCA9IChfd2luLlBvaW50ZXJFdmVudCB8fCBmYWxzZSkgJiYgKChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAobmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwKSk7IC8vSUUxMSBwb2ludGVyIGV2ZW50cywgZm9sbG93aW5nIFczQyBQb2ludGVyIEV2ZW50cyBzcGVjXHJcbiAgICBkLmhhc21zdG91Y2ggPSAoIWQuaGFzdzNjdG91Y2gpICYmIChfd2luLk1TUG9pbnRlckV2ZW50IHx8IGZhbHNlKTsgLy8gSUUxMCBwb2ludGVyIGV2ZW50c1xyXG5cclxuICAgIGQuaXNtYWMgPSAvXm1hYyQvaS50ZXN0KF9wbGF0Zm9ybSk7XHJcblxyXG4gICAgZC5pc2lvcyA9IGQuY2FudG91Y2ggJiYgL2lwaG9uZXxpcGFkfGlwb2QvaS50ZXN0KF9wbGF0Zm9ybSk7XHJcbiAgICBkLmlzaW9zNCA9IGQuaXNpb3MgJiYgIShcInNlYWxcIiBpbiBPYmplY3QpO1xyXG4gICAgZC5pc2lvczcgPSBkLmlzaW9zICYmIChcIndlYmtpdEhpZGRlblwiIGluIF9kb2MpOyAgLy9pT1MgNytcclxuICAgIGQuaXNpb3M4ID0gZC5pc2lvcyAmJiAoXCJoaWRkZW5cIiBpbiBfZG9jKTsgIC8vaU9TIDgrXHJcbiAgICBkLmlzaW9zMTAgPSBkLmlzaW9zICYmIF93aW4uUHJveHk7ICAvL2lPUyAxMCtcclxuXHJcbiAgICBkLmlzYW5kcm9pZCA9ICgvYW5kcm9pZC9pLnRlc3QoX2FnZW50KSk7XHJcblxyXG4gICAgZC5oYXNldmVudGxpc3RlbmVyID0gKFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIF9lbCk7XHJcblxyXG4gICAgZC50cnN0eWxlID0gZmFsc2U7XHJcbiAgICBkLmhhc3RyYW5zZm9ybSA9IGZhbHNlO1xyXG4gICAgZC5oYXN0cmFuc2xhdGUzZCA9IGZhbHNlO1xyXG4gICAgZC50cmFuc2l0aW9uc3R5bGUgPSBmYWxzZTtcclxuICAgIGQuaGFzdHJhbnNpdGlvbiA9IGZhbHNlO1xyXG4gICAgZC50cmFuc2l0aW9uZW5kID0gZmFsc2U7XHJcblxyXG4gICAgZC50cnN0eWxlID0gXCJ0cmFuc2Zvcm1cIjtcclxuICAgIGQuaGFzdHJhbnNmb3JtID0gKFwidHJhbnNmb3JtXCIgaW4gX3N0eWxlKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgY2hlY2sgPSBbJ21zVHJhbnNmb3JtJywgJ3dlYmtpdFRyYW5zZm9ybScsICdNb3pUcmFuc2Zvcm0nLCAnT1RyYW5zZm9ybSddO1xyXG4gICAgICBmb3IgKHZhciBhID0gMCwgYyA9IGNoZWNrLmxlbmd0aDsgYSA8IGM7IGErKykge1xyXG4gICAgICAgIGlmIChfc3R5bGVbY2hlY2tbYV1dICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGQudHJzdHlsZSA9IGNoZWNrW2FdO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGQuaGFzdHJhbnNmb3JtID0gKCEhZC50cnN0eWxlKTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgaWYgKGQuaGFzdHJhbnNmb3JtKSB7XHJcbiAgICAgIF9zdHlsZVtkLnRyc3R5bGVdID0gXCJ0cmFuc2xhdGUzZCgxcHgsMnB4LDNweClcIjtcclxuICAgICAgZC5oYXN0cmFuc2xhdGUzZCA9IC90cmFuc2xhdGUzZC8udGVzdChfc3R5bGVbZC50cnN0eWxlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZC50cmFuc2l0aW9uc3R5bGUgPSBcInRyYW5zaXRpb25cIjtcclxuICAgIGQucHJlZml4c3R5bGUgPSAnJztcclxuICAgIGQudHJhbnNpdGlvbmVuZCA9IFwidHJhbnNpdGlvbmVuZFwiO1xyXG5cclxuICAgIGQuaGFzdHJhbnNpdGlvbiA9IChcInRyYW5zaXRpb25cIiBpbiBfc3R5bGUpIHx8IChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICBkLnRyYW5zaXRpb25lbmQgPSBmYWxzZTtcclxuICAgICAgdmFyIGNoZWNrID0gWyd3ZWJraXRUcmFuc2l0aW9uJywgJ21zVHJhbnNpdGlvbicsICdNb3pUcmFuc2l0aW9uJywgJ09UcmFuc2l0aW9uJywgJ09UcmFuc2l0aW9uJywgJ0todG1sVHJhbnNpdGlvbiddO1xyXG4gICAgICB2YXIgcHJlZml4ID0gWyctd2Via2l0LScsICctbXMtJywgJy1tb3otJywgJy1vLScsICctbycsICcta2h0bWwtJ107XHJcbiAgICAgIHZhciBldnMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAnbXNUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnLCAnb3RyYW5zaXRpb25lbmQnLCAnb1RyYW5zaXRpb25FbmQnLCAnS2h0bWxUcmFuc2l0aW9uRW5kJ107XHJcbiAgICAgIGZvciAodmFyIGEgPSAwLCBjID0gY2hlY2subGVuZ3RoOyBhIDwgYzsgYSsrKSB7XHJcbiAgICAgICAgaWYgKGNoZWNrW2FdIGluIF9zdHlsZSkge1xyXG4gICAgICAgICAgZC50cmFuc2l0aW9uc3R5bGUgPSBjaGVja1thXTtcclxuICAgICAgICAgIGQucHJlZml4c3R5bGUgPSBwcmVmaXhbYV07XHJcbiAgICAgICAgICBkLnRyYW5zaXRpb25lbmQgPSBldnNbYV07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGQuaXNjaHJvbWUyNikgZC5wcmVmaXhzdHlsZSA9IHByZWZpeFsxXTsgIC8vIGFsd2F5cyB1c2UgcHJlZml4XHJcblxyXG4gICAgICBkLmhhc3RyYW5zaXRpb24gPSAoZC50cmFuc2l0aW9uc3R5bGUpO1xyXG5cclxuICAgIH0pKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gZGV0ZWN0Q3Vyc29yR3JhYigpIHtcclxuICAgICAgdmFyIGxzdCA9IFsnZ3JhYicsICctd2Via2l0LWdyYWInLCAnLW1vei1ncmFiJ107XHJcbiAgICAgIGlmICgoZC5pc2Nocm9tZSAmJiAhZC5pc2Nocm9tZTM4KSB8fCBkLmlzaWUpIGxzdCA9IFtdOyAvLyBmb3JjZSBzZXR0aW5nIGZvciBJRSByZXR1cm5zIGZhbHNlIHBvc2l0aXZlIGFuZCBjaHJvbWUgY3Vyc29yIGJ1Z1xyXG4gICAgICBmb3IgKHZhciBhID0gMCwgbCA9IGxzdC5sZW5ndGg7IGEgPCBsOyBhKyspIHtcclxuICAgICAgICB2YXIgcCA9IGxzdFthXTtcclxuICAgICAgICBfc3R5bGUuY3Vyc29yID0gcDtcclxuICAgICAgICBpZiAoX3N0eWxlLmN1cnNvciA9PSBwKSByZXR1cm4gcDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gJ3VybChodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zbGlkZXItcHJvLzEuMy4wL2Nzcy9pbWFnZXMvb3BlbmhhbmQuY3VyKSxuLXJlc2l6ZSc7IC8vIHRoYW5rcyB0byBodHRwczovL2NkbmpzLmNvbS8gZm9yIHRoZSBvcGVuaGFuZCBjdXJzb3IhXHJcbiAgICB9XHJcbiAgICBkLmN1cnNvcmdyYWJ2YWx1ZSA9IGRldGVjdEN1cnNvckdyYWIoKTtcclxuXHJcbiAgICBkLmhhc21vdXNlY2FwdHVyZSA9IChcInNldENhcHR1cmVcIiBpbiBfZWwpO1xyXG5cclxuICAgIGQuaGFzTXV0YXRpb25PYnNlcnZlciA9IChDbHNNdXRhdGlvbk9ic2VydmVyICE9PSBmYWxzZSk7XHJcblxyXG4gICAgX2VsID0gbnVsbDsgLy9tZW1vcnkgcmVsZWFzZWRcclxuXHJcbiAgICBicm93c2VyZGV0ZWN0ZWQgPSBkO1xyXG5cclxuICAgIHJldHVybiBkO1xyXG4gIH07XHJcblxyXG4gIHZhciBOaWNlU2Nyb2xsQ2xhc3MgPSBmdW5jdGlvbiAobXlvcHQsIG1lKSB7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMudmVyc2lvbiA9ICczLjcuNic7XHJcbiAgICB0aGlzLm5hbWUgPSAnbmljZXNjcm9sbCc7XHJcblxyXG4gICAgdGhpcy5tZSA9IG1lO1xyXG5cclxuICAgIHZhciAkYm9keSA9ICQoXCJib2R5XCIpO1xyXG5cclxuICAgIHZhciBvcHQgPSB0aGlzLm9wdCA9IHtcclxuICAgICAgZG9jOiAkYm9keSxcclxuICAgICAgd2luOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmV4dGVuZChvcHQsIF9nbG9iYWxvcHRpb25zKTsgIC8vIGNsb25lIG9wdHNcclxuXHJcbiAgICAvLyBPcHRpb25zIGZvciBpbnRlcm5hbCB1c2VcclxuICAgIG9wdC5zbmFwYmFja3NwZWVkID0gODA7XHJcblxyXG4gICAgaWYgKG15b3B0IHx8IGZhbHNlKSB7XHJcbiAgICAgIGZvciAodmFyIGEgaW4gb3B0KSB7XHJcbiAgICAgICAgaWYgKG15b3B0W2FdICE9PSB1bmRlZmluZWQpIG9wdFthXSA9IG15b3B0W2FdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdC5kaXNhYmxlbXV0YXRpb25vYnNlcnZlcikgQ2xzTXV0YXRpb25PYnNlcnZlciA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuZG9jID0gb3B0LmRvYztcclxuICAgIHRoaXMuaWRkb2MgPSAodGhpcy5kb2MgJiYgdGhpcy5kb2NbMF0pID8gdGhpcy5kb2NbMF0uaWQgfHwgJycgOiAnJztcclxuICAgIHRoaXMuaXNwYWdlID0gL15CT0RZfEhUTUwvLnRlc3QoKG9wdC53aW4pID8gb3B0LndpblswXS5ub2RlTmFtZSA6IHRoaXMuZG9jWzBdLm5vZGVOYW1lKTtcclxuICAgIHRoaXMuaGFzd3JhcHBlciA9IChvcHQud2luICE9PSBmYWxzZSk7XHJcbiAgICB0aGlzLndpbiA9IG9wdC53aW4gfHwgKHRoaXMuaXNwYWdlID8gJHdpbmRvdyA6IHRoaXMuZG9jKTtcclxuICAgIHRoaXMuZG9jc2Nyb2xsID0gKHRoaXMuaXNwYWdlICYmICF0aGlzLmhhc3dyYXBwZXIpID8gJHdpbmRvdyA6IHRoaXMud2luO1xyXG4gICAgdGhpcy5ib2R5ID0gJGJvZHk7XHJcbiAgICB0aGlzLnZpZXdwb3J0ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5pc2ZpeGVkID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5pZnJhbWUgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNpZnJhbWUgPSAoKHRoaXMuZG9jWzBdLm5vZGVOYW1lID09ICdJRlJBTUUnKSAmJiAodGhpcy53aW5bMF0ubm9kZU5hbWUgPT0gJ0lGUkFNRScpKTtcclxuXHJcbiAgICB0aGlzLmlzdGV4dGFyZWEgPSAodGhpcy53aW5bMF0ubm9kZU5hbWUgPT0gJ1RFWFRBUkVBJyk7XHJcblxyXG4gICAgdGhpcy5mb3JjZXNjcmVlbiA9IGZhbHNlOyAvL2ZvcmNlIHRvIHVzZSBzY3JlZW4gcG9zaXRpb24gb24gZXZlbnRzXHJcblxyXG4gICAgdGhpcy5jYW5zaG93b25tb3VzZWV2ZW50ID0gKG9wdC5hdXRvaGlkZW1vZGUgIT0gXCJzY3JvbGxcIik7XHJcblxyXG4gICAgLy8gRXZlbnRzIGp1bXAgdGFibGUgICAgXHJcbiAgICB0aGlzLm9ubW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICB0aGlzLm9ubW91c2V1cCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbm1vdXNlbW92ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbm1vdXNld2hlZWwgPSBmYWxzZTtcclxuICAgIHRoaXMub25rZXlwcmVzcyA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbmdlc3R1cmV6b29tID0gZmFsc2U7XHJcbiAgICB0aGlzLm9uY2xpY2sgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBOaWNlc2Nyb2xsIGN1c3RvbSBldmVudHNcclxuICAgIHRoaXMub25zY3JvbGxzdGFydCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbnNjcm9sbGVuZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbnNjcm9sbGNhbmNlbCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMub256b29taW4gPSBmYWxzZTtcclxuICAgIHRoaXMub256b29tb3V0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gTGV0J3Mgc3RhcnQhICBcclxuICAgIHRoaXMudmlldyA9IGZhbHNlO1xyXG4gICAgdGhpcy5wYWdlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDBcclxuICAgIH07XHJcbiAgICB0aGlzLnNjcm9sbHJhdGlvID0ge1xyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5jdXJzb3JoZWlnaHQgPSAyMDtcclxuICAgIHRoaXMuc2Nyb2xsdmFsdWVtYXggPSAwO1xyXG5cclxuICAgIC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy13cml0aW5nLW1vZGVzLTMvI2xvZ2ljYWwtdG8tcGh5c2ljYWxcclxuICAgIC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy13cml0aW5nLW1vZGVzLTMvI3N2Zy13cml0aW5nLW1vZGVcclxuICAgIGlmIChvcHQucnRsbW9kZSA9PSBcImF1dG9cIikge1xyXG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcy53aW5bMF0gPT0gX3dpbiA/IHRoaXMuYm9keSA6IHRoaXMud2luO1xyXG4gICAgICB2YXIgd3JpdGluZ01vZGUgPSB0YXJnZXQuY3NzKFwid3JpdGluZy1tb2RlXCIpIHx8IHRhcmdldC5jc3MoXCItd2Via2l0LXdyaXRpbmctbW9kZVwiKSB8fCB0YXJnZXQuY3NzKFwiLW1zLXdyaXRpbmctbW9kZVwiKSB8fCB0YXJnZXQuY3NzKFwiLW1vei13cml0aW5nLW1vZGVcIik7XHJcblxyXG4gICAgICBpZiAod3JpdGluZ01vZGUgPT0gXCJob3Jpem9udGFsLXRiXCIgfHwgd3JpdGluZ01vZGUgPT0gXCJsci10YlwiIHx8IHdyaXRpbmdNb2RlID09PSBcIlwiKSB7XHJcbiAgICAgICAgdGhpcy5pc3J0bG1vZGUgPSAodGFyZ2V0LmNzcyhcImRpcmVjdGlvblwiKSA9PSBcInJ0bFwiKTtcclxuICAgICAgICB0aGlzLmlzdmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmlzcnRsbW9kZSA9ICh3cml0aW5nTW9kZSA9PSBcInZlcnRpY2FsLXJsXCIgfHwgd3JpdGluZ01vZGUgPT0gXCJ0YlwiIHx8IHdyaXRpbmdNb2RlID09IFwidGItcmxcIiB8fCB3cml0aW5nTW9kZSA9PSBcInJsLXRiXCIpO1xyXG4gICAgICAgIHRoaXMuaXN2ZXJ0aWNhbCA9ICh3cml0aW5nTW9kZSA9PSBcInZlcnRpY2FsLXJsXCIgfHwgd3JpdGluZ01vZGUgPT0gXCJ0YlwiIHx8IHdyaXRpbmdNb2RlID09IFwidGItcmxcIik7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaXNydGxtb2RlID0gKG9wdC5ydGxtb2RlID09PSB0cnVlKTtcclxuICAgICAgdGhpcy5pc3ZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAgICB0aGlzLmNoZWNrcnRsbW9kZSA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xscnVubmluZyA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsbW9tID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5vYnNlcnZlciA9IGZhbHNlOyAgLy8gb2JzZXJ2ZXIgZGl2IGNoYW5nZXNcclxuICAgIHRoaXMub2JzZXJ2ZXJyZW1vdmVyID0gZmFsc2U7ICAvLyBvYnNlcnZlciBvbiBwYXJlbnQgZm9yIHJlbW92ZSBkZXRlY3Rpb25cclxuICAgIHRoaXMub2JzZXJ2ZXJib2R5ID0gZmFsc2U7ICAvLyBvYnNlcnZlciBvbiBib2R5IGZvciBwb3NpdGlvbiBjaGFuZ2VcclxuXHJcbiAgICBpZiAob3B0LnNjcm9sbGJhcmlkICE9PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLmlkID0gb3B0LnNjcm9sbGJhcmlkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIHRoaXMuaWQgPSBcImFzY3JhaWxcIiArIChhc2NyYWlsY291bnRlcisrKTtcclxuICAgICAgfSB3aGlsZSAoX2RvYy5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yYWlsID0gZmFsc2U7XHJcbiAgICB0aGlzLmN1cnNvciA9IGZhbHNlO1xyXG4gICAgdGhpcy5jdXJzb3JmcmVlemVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnNlbGVjdGlvbmRyYWcgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLnpvb20gPSBmYWxzZTtcclxuICAgIHRoaXMuem9vbWFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuaGFzZm9jdXMgPSBmYWxzZTtcclxuICAgIHRoaXMuaGFzbW91c2Vmb2N1cyA9IGZhbHNlO1xyXG5cclxuICAgIC8vdGhpcy52aXNpYmlsaXR5ID0gdHJ1ZTtcclxuICAgIHRoaXMucmFpbHNsb2NrZWQgPSBmYWxzZTsgIC8vIGxvY2tlZCBieSByZXNpemVcclxuICAgIHRoaXMubG9ja2VkID0gZmFsc2U7ICAvLyBwcmV2ZW50IGxvc3Qgb2YgbG9ja2VkIHN0YXR1cyBzZXRzIGJ5IHVzZXJcclxuICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7IC8vIHJhaWxzIGFsd2F5cyBoaWRkZW5cclxuICAgIHRoaXMuY3Vyc29yYWN0aXZlID0gdHJ1ZTsgLy8gdXNlciBjYW4gaW50ZXJhY3Qgd2l0aCBjdXJzb3JzXHJcblxyXG4gICAgdGhpcy53aGVlbHByZXZlbnRlZCA9IGZhbHNlOyAvL3ByZXZlbnQgbW91c2V3aGVlbCBldmVudFxyXG5cclxuICAgIHRoaXMub3ZlcmZsb3d4ID0gb3B0Lm92ZXJmbG93eDtcclxuICAgIHRoaXMub3ZlcmZsb3d5ID0gb3B0Lm92ZXJmbG93eTtcclxuXHJcbiAgICB0aGlzLm5hdGl2ZXNjcm9sbGluZ2FyZWEgPSBmYWxzZTtcclxuICAgIHRoaXMuY2hlY2thcmVhID0gMDtcclxuXHJcbiAgICB0aGlzLmV2ZW50cyA9IFtdOyAvLyBldmVudCBsaXN0IGZvciB1bmJpbmRcclxuXHJcbiAgICB0aGlzLnNhdmVkID0ge307ICAvLyBzdHlsZSBzYXZlZFxyXG5cclxuICAgIHRoaXMuZGVsYXlsaXN0ID0ge307XHJcbiAgICB0aGlzLnN5bmNsaXN0ID0ge307XHJcblxyXG4gICAgdGhpcy5sYXN0ZGVsdGF4ID0gMDtcclxuICAgIHRoaXMubGFzdGRlbHRheSA9IDA7XHJcblxyXG4gICAgdGhpcy5kZXRlY3RlZCA9IGdldEJyb3dzZXJEZXRlY3Rpb24oKTtcclxuXHJcbiAgICB2YXIgY2FwID0gJC5leHRlbmQoe30sIHRoaXMuZGV0ZWN0ZWQpO1xyXG5cclxuICAgIHRoaXMuY2FuaHdzY3JvbGwgPSAoY2FwLmhhc3RyYW5zZm9ybSAmJiBvcHQuaHdhY2NlbGVyYXRpb24pO1xyXG4gICAgdGhpcy5pc2h3c2Nyb2xsID0gKHRoaXMuY2FuaHdzY3JvbGwgJiYgc2VsZi5oYXN3cmFwcGVyKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuaXNydGxtb2RlKSB7XHJcbiAgICAgIHRoaXMuaGFzcmV2ZXJzZWhyID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXN2ZXJ0aWNhbCkgeyAvLyBSVEwgbW9kZSB3aXRoIHJldmVyc2UgaG9yaXpvbnRhbCBheGlzXHJcbiAgICAgIHRoaXMuaGFzcmV2ZXJzZWhyID0gIShjYXAuaXN3ZWJraXQgfHwgY2FwLmlzaWUgfHwgY2FwLmlzaWUxMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmhhc3JldmVyc2VociA9ICEoY2FwLmlzd2Via2l0IHx8IChjYXAuaXNpZSAmJiAhY2FwLmlzaWUxMCAmJiAhY2FwLmlzaWUxMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaXN0b3VjaGNhcGFibGUgPSBmYWxzZTsgLy8gZGVza3RvcCBkZXZpY2VzIHdpdGggdG91Y2ggc2NyZWVuIHN1cHBvcnRcclxuXHJcbiAgICAvLyMjIENoZWNrIFdlYktpdC1iYXNlZCBkZXNrdG9wIHdpdGggdG91Y2ggc3VwcG9ydFxyXG4gICAgLy8jIyArIEZpcmVmb3ggMTggbmlnaHRseSBidWlsZCAoZGVza3RvcCkgZmFsc2UgcG9zaXRpdmUgKG9yIGRlc2t0b3Agd2l0aCB0b3VjaCBzdXBwb3J0KVxyXG5cclxuICAgIGlmICghY2FwLmNhbnRvdWNoICYmIChjYXAuaGFzdzNjdG91Y2ggfHwgY2FwLmhhc21zdG91Y2gpKSB7ICAvLyBkZXNrdG9wIGRldmljZSB3aXRoIG11bHRpcGxlIGlucHV0XHJcbiAgICAgIHRoaXMuaXN0b3VjaGNhcGFibGUgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChjYXAuY2FudG91Y2ggJiYgIWNhcC5pc2lvcyAmJiAhY2FwLmlzYW5kcm9pZCAmJiAoY2FwLmlzd2Via2l0IHx8IGNhcC5pc21vemlsbGEpKSB7XHJcbiAgICAgIHRoaXMuaXN0b3VjaGNhcGFibGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMgZGlzYWJsZSBNb3VzZUxvY2sgQVBJIG9uIHVzZXIgcmVxdWVzdFxyXG4gICAgaWYgKCFvcHQuZW5hYmxlbW91c2Vsb2NrYXBpKSB7XHJcbiAgICAgIGNhcC5oYXNtb3VzZWNhcHR1cmUgPSBmYWxzZTtcclxuICAgICAgY2FwLmhhc3BvaW50ZXJsb2NrID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kZWJvdW5jZWQgPSBmdW5jdGlvbiAobmFtZSwgZm4sIHRtKSB7XHJcbiAgICAgIGlmICghc2VsZikgcmV0dXJuO1xyXG4gICAgICB2YXIgZGQgPSBzZWxmLmRlbGF5bGlzdFtuYW1lXSB8fCBmYWxzZTtcclxuICAgICAgaWYgKCFkZCkge1xyXG4gICAgICAgIHNlbGYuZGVsYXlsaXN0W25hbWVdID0ge1xyXG4gICAgICAgICAgaDogc2V0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmRlbGF5bGlzdFtuYW1lXS5mbi5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICBzZWxmLmRlbGF5bGlzdFtuYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgfSwgdG0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmbi5jYWxsKHNlbGYpO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuZGVsYXlsaXN0W25hbWVdLmZuID0gZm47XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0aGlzLnN5bmNoZWQgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcclxuICAgICAgaWYgKHNlbGYuc3luY2xpc3RbbmFtZV0pIHNlbGYuc3luY2xpc3RbbmFtZV0gPSBmbjtcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2VsZi5zeW5jbGlzdFtuYW1lXSA9IGZuO1xyXG4gICAgICAgIHNldEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGlmICghc2VsZikgcmV0dXJuO1xyXG4gICAgICAgICAgc2VsZi5zeW5jbGlzdFtuYW1lXSAmJiBzZWxmLnN5bmNsaXN0W25hbWVdLmNhbGwoc2VsZik7XHJcbiAgICAgICAgICBzZWxmLnN5bmNsaXN0W25hbWVdID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVuc3luY2hlZCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIGlmIChzZWxmLnN5bmNsaXN0W25hbWVdKSBzZWxmLnN5bmNsaXN0W25hbWVdID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3NzID0gZnVuY3Rpb24gKGVsLCBwYXJzKSB7IC8vIHNhdmUgJiBzZXRcclxuICAgICAgZm9yICh2YXIgbiBpbiBwYXJzKSB7XHJcbiAgICAgICAgc2VsZi5zYXZlZC5jc3MucHVzaChbZWwsIG4sIGVsLmNzcyhuKV0pO1xyXG4gICAgICAgIGVsLmNzcyhuLCBwYXJzW25dKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNjcm9sbFRvcCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgcmV0dXJuICh2YWwgPT09IHVuZGVmaW5lZCkgPyBzZWxmLmdldFNjcm9sbFRvcCgpIDogc2VsZi5zZXRTY3JvbGxUb3AodmFsKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICByZXR1cm4gKHZhbCA9PT0gdW5kZWZpbmVkKSA/IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpIDogc2VsZi5zZXRTY3JvbGxMZWZ0KHZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGRlcml2ZWQgYnkgYnkgRGFuIFB1cGl1cyB3d3cucHVwaXVzLm5ldFxyXG4gICAgdmFyIEJlemllckNsYXNzID0gZnVuY3Rpb24gKHN0LCBlZCwgc3BkLCBwMSwgcDIsIHAzLCBwNCkge1xyXG5cclxuICAgICAgdGhpcy5zdCA9IHN0O1xyXG4gICAgICB0aGlzLmVkID0gZWQ7XHJcbiAgICAgIHRoaXMuc3BkID0gc3BkO1xyXG5cclxuICAgICAgdGhpcy5wMSA9IHAxIHx8IDA7XHJcbiAgICAgIHRoaXMucDIgPSBwMiB8fCAxO1xyXG4gICAgICB0aGlzLnAzID0gcDMgfHwgMDtcclxuICAgICAgdGhpcy5wNCA9IHA0IHx8IDE7XHJcblxyXG4gICAgICB0aGlzLnRzID0gbm93KCk7XHJcbiAgICAgIHRoaXMuZGYgPSBlZCAtIHN0O1xyXG4gICAgfTtcclxuICAgIEJlemllckNsYXNzLnByb3RvdHlwZSA9IHtcclxuICAgICAgQjI6IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgcmV0dXJuIDMgKiAoMSAtIHQpICogKDEgLSB0KSAqIHQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIEIzOiBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHJldHVybiAzICogKDEgLSB0KSAqIHQgKiB0O1xyXG4gICAgICB9LFxyXG4gICAgICBCNDogZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICByZXR1cm4gdCAqIHQgKiB0O1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRQb3M6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKG5vdygpIC0gdGhpcy50cykgLyB0aGlzLnNwZDtcclxuICAgICAgfSxcclxuICAgICAgZ2V0Tm93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBjID0gKG5vdygpIC0gdGhpcy50cykgLyB0aGlzLnNwZDtcclxuICAgICAgICB2YXIgYnogPSB0aGlzLkIyKHBjKSArIHRoaXMuQjMocGMpICsgdGhpcy5CNChwYyk7XHJcbiAgICAgICAgcmV0dXJuIChwYyA+PSAxKSA/IHRoaXMuZWQgOiB0aGlzLnN0ICsgKHRoaXMuZGYgKiBieikgfCAwO1xyXG4gICAgICB9LFxyXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIChlZCwgc3BkKSB7XHJcbiAgICAgICAgdGhpcy5zdCA9IHRoaXMuZ2V0Tm93KCk7XHJcbiAgICAgICAgdGhpcy5lZCA9IGVkO1xyXG4gICAgICAgIHRoaXMuc3BkID0gc3BkO1xyXG4gICAgICAgIHRoaXMudHMgPSBub3coKTtcclxuICAgICAgICB0aGlzLmRmID0gdGhpcy5lZCAtIHRoaXMuc3Q7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy9kZXJpdmVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTIzNjA5MC9cclxuICAgIGZ1bmN0aW9uIGdldE1hdHJpeFZhbHVlcygpIHtcclxuICAgICAgdmFyIHRyID0gc2VsZi5kb2MuY3NzKGNhcC50cnN0eWxlKTtcclxuICAgICAgaWYgKHRyICYmICh0ci5zdWJzdHIoMCwgNikgPT0gXCJtYXRyaXhcIikpIHtcclxuICAgICAgICByZXR1cm4gdHIucmVwbGFjZSgvXi4qXFwoKC4qKVxcKSQvZywgXCIkMVwiKS5yZXBsYWNlKC9weC9nLCAnJykuc3BsaXQoLywgKy8pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc2h3c2Nyb2xsKSB7ICAgIC8vIGh3IGFjY2VsZXJhdGVkIHNjcm9sbFxyXG5cclxuICAgICAgdGhpcy5kb2MudHJhbnNsYXRlID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB0eDogXCIwcHhcIixcclxuICAgICAgICB0eTogXCIwcHhcIlxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy90aGlzIG9uZSBjYW4gaGVscCB0byBlbmFibGUgaHcgYWNjZWwgb24gaW9zNiBodHRwOi8vaW5kaWVnYW1yLmNvbS9pb3M2LWh0bWwtaGFyZHdhcmUtYWNjZWxlcmF0aW9uLWNoYW5nZXMtYW5kLWhvdy10by1maXgtdGhlbS9cclxuICAgICAgaWYgKGNhcC5oYXN0cmFuc2xhdGUzZCAmJiBjYXAuaXNpb3MpIHRoaXMuZG9jLmNzcyhcIi13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTsgLy8gcHJldmVudCBmbGlja2VyaW5nIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQ2MTQ0MS8gICAgICBcclxuXHJcbiAgICAgIHRoaXMuZ2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKGxhc3QpIHtcclxuICAgICAgICBpZiAoIWxhc3QpIHtcclxuICAgICAgICAgIHZhciBtdHggPSBnZXRNYXRyaXhWYWx1ZXMoKTtcclxuICAgICAgICAgIGlmIChtdHgpIHJldHVybiAobXR4Lmxlbmd0aCA9PSAxNikgPyAtbXR4WzEzXSA6IC1tdHhbNV07IC8vbWF0cml4M2QgMTYgb24gSUUxMFxyXG4gICAgICAgICAgaWYgKHNlbGYudGltZXJzY3JvbGwgJiYgc2VsZi50aW1lcnNjcm9sbC5ieikgcmV0dXJuIHNlbGYudGltZXJzY3JvbGwuYnouZ2V0Tm93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxmLmRvYy50cmFuc2xhdGUueTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZ2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIChsYXN0KSB7XHJcbiAgICAgICAgaWYgKCFsYXN0KSB7XHJcbiAgICAgICAgICB2YXIgbXR4ID0gZ2V0TWF0cml4VmFsdWVzKCk7XHJcbiAgICAgICAgICBpZiAobXR4KSByZXR1cm4gKG10eC5sZW5ndGggPT0gMTYpID8gLW10eFsxMl0gOiAtbXR4WzRdOyAvL21hdHJpeDNkIDE2IG9uIElFMTBcclxuICAgICAgICAgIGlmIChzZWxmLnRpbWVyc2Nyb2xsICYmIHNlbGYudGltZXJzY3JvbGwuYmgpIHJldHVybiBzZWxmLnRpbWVyc2Nyb2xsLmJoLmdldE5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZi5kb2MudHJhbnNsYXRlLng7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLm5vdGlmeVNjcm9sbEV2ZW50ID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgdmFyIGUgPSBfZG9jLmNyZWF0ZUV2ZW50KFwiVUlFdmVudHNcIik7XHJcbiAgICAgICAgZS5pbml0VUlFdmVudChcInNjcm9sbFwiLCBmYWxzZSwgZmFsc2UsIF93aW4sIDEpO1xyXG4gICAgICAgIGUubmljZWV2ZW50ID0gdHJ1ZTtcclxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGN4c2Nyb2xsbGVmdCA9ICh0aGlzLmlzcnRsbW9kZSkgPyAxIDogLTE7XHJcblxyXG4gICAgICBpZiAoY2FwLmhhc3RyYW5zbGF0ZTNkICYmIG9wdC5lbmFibGV0cmFuc2xhdGUzZCkge1xyXG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKHZhbCwgc2lsZW50KSB7XHJcbiAgICAgICAgICBzZWxmLmRvYy50cmFuc2xhdGUueSA9IHZhbDtcclxuICAgICAgICAgIHNlbGYuZG9jLnRyYW5zbGF0ZS50eSA9ICh2YWwgKiAtMSkgKyBcInB4XCI7XHJcbiAgICAgICAgICBzZWxmLmRvYy5jc3MoY2FwLnRyc3R5bGUsIFwidHJhbnNsYXRlM2QoXCIgKyBzZWxmLmRvYy50cmFuc2xhdGUudHggKyBcIixcIiArIHNlbGYuZG9jLnRyYW5zbGF0ZS50eSArIFwiLDApXCIpO1xyXG4gICAgICAgICAgaWYgKCFzaWxlbnQpIHNlbGYubm90aWZ5U2Nyb2xsRXZlbnQoc2VsZi53aW5bMF0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHZhbCwgc2lsZW50KSB7XHJcbiAgICAgICAgICBzZWxmLmRvYy50cmFuc2xhdGUueCA9IHZhbDtcclxuICAgICAgICAgIHNlbGYuZG9jLnRyYW5zbGF0ZS50eCA9ICh2YWwgKiBjeHNjcm9sbGxlZnQpICsgXCJweFwiO1xyXG4gICAgICAgICAgc2VsZi5kb2MuY3NzKGNhcC50cnN0eWxlLCBcInRyYW5zbGF0ZTNkKFwiICsgc2VsZi5kb2MudHJhbnNsYXRlLnR4ICsgXCIsXCIgKyBzZWxmLmRvYy50cmFuc2xhdGUudHkgKyBcIiwwKVwiKTtcclxuICAgICAgICAgIGlmICghc2lsZW50KSBzZWxmLm5vdGlmeVNjcm9sbEV2ZW50KHNlbGYud2luWzBdKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKHZhbCwgc2lsZW50KSB7XHJcbiAgICAgICAgICBzZWxmLmRvYy50cmFuc2xhdGUueSA9IHZhbDtcclxuICAgICAgICAgIHNlbGYuZG9jLnRyYW5zbGF0ZS50eSA9ICh2YWwgKiAtMSkgKyBcInB4XCI7XHJcbiAgICAgICAgICBzZWxmLmRvYy5jc3MoY2FwLnRyc3R5bGUsIFwidHJhbnNsYXRlKFwiICsgc2VsZi5kb2MudHJhbnNsYXRlLnR4ICsgXCIsXCIgKyBzZWxmLmRvYy50cmFuc2xhdGUudHkgKyBcIilcIik7XHJcbiAgICAgICAgICBpZiAoIXNpbGVudCkgc2VsZi5ub3RpZnlTY3JvbGxFdmVudChzZWxmLndpblswXSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAodmFsLCBzaWxlbnQpIHtcclxuICAgICAgICAgIHNlbGYuZG9jLnRyYW5zbGF0ZS54ID0gdmFsO1xyXG4gICAgICAgICAgc2VsZi5kb2MudHJhbnNsYXRlLnR4ID0gKHZhbCAqIGN4c2Nyb2xsbGVmdCkgKyBcInB4XCI7XHJcbiAgICAgICAgICBzZWxmLmRvYy5jc3MoY2FwLnRyc3R5bGUsIFwidHJhbnNsYXRlKFwiICsgc2VsZi5kb2MudHJhbnNsYXRlLnR4ICsgXCIsXCIgKyBzZWxmLmRvYy50cmFuc2xhdGUudHkgKyBcIilcIik7XHJcbiAgICAgICAgICBpZiAoIXNpbGVudCkgc2VsZi5ub3RpZnlTY3JvbGxFdmVudChzZWxmLndpblswXSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHsgICAgLy8gbmF0aXZlIHNjcm9sbFxyXG5cclxuICAgICAgdGhpcy5nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuZG9jc2Nyb2xsLnNjcm9sbFRvcCgpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICBzZWxmLmRvY3Njcm9sbC5zY3JvbGxUb3AodmFsKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZ2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsO1xyXG4gICAgICAgIGlmICghc2VsZi5oYXNyZXZlcnNlaHIpIHtcclxuICAgICAgICAgIHZhbCA9IHNlbGYuZG9jc2Nyb2xsLnNjcm9sbExlZnQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuZGV0ZWN0ZWQuaXNtb3ppbGxhKSB7XHJcbiAgICAgICAgICB2YWwgPSBzZWxmLnBhZ2UubWF4dyAtIE1hdGguYWJzKHNlbGYuZG9jc2Nyb2xsLnNjcm9sbExlZnQoKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhbCA9IHNlbGYucGFnZS5tYXh3IC0gc2VsZi5kb2NzY3JvbGwuc2Nyb2xsTGVmdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLnNldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKCFzZWxmKSByZXR1cm47XHJcbiAgICAgICAgICBpZiAoc2VsZi5oYXNyZXZlcnNlaHIpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuZGV0ZWN0ZWQuaXNtb3ppbGxhKSB7XHJcbiAgICAgICAgICAgICAgdmFsID0gLShzZWxmLnBhZ2UubWF4dyAtIHZhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFsID0gc2VsZi5wYWdlLm1heHcgLSB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBzZWxmLmRvY3Njcm9sbC5zY3JvbGxMZWZ0KHZhbCk7XHJcbiAgICAgICAgfSwgMSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nZXRUYXJnZXQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAoIWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKGUudGFyZ2V0KSByZXR1cm4gZS50YXJnZXQ7XHJcbiAgICAgIGlmIChlLnNyY0VsZW1lbnQpIHJldHVybiBlLnNyY0VsZW1lbnQ7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oYXNQYXJlbnQgPSBmdW5jdGlvbiAoZSwgaWQpIHtcclxuICAgICAgaWYgKCFlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHZhciBlbCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCB8fCBlIHx8IGZhbHNlO1xyXG4gICAgICB3aGlsZSAoZWwgJiYgZWwuaWQgIT0gaWQpIHtcclxuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGUgfHwgZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIChlbCAhPT0gZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRaSW5kZXgoKSB7XHJcbiAgICAgIHZhciBkb20gPSBzZWxmLndpbjtcclxuICAgICAgaWYgKFwiekluZGV4XCIgaW4gZG9tKSByZXR1cm4gZG9tLnpJbmRleCgpOyAvLyB1c2UgalF1ZXJ5IFVJIG1ldGhvZCB3aGVuIGF2YWlsYWJsZVxyXG4gICAgICB3aGlsZSAoZG9tLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpZiAoZG9tWzBdLm5vZGVUeXBlID09IDkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2YXIgemkgPSBkb20uY3NzKCd6SW5kZXgnKTtcclxuICAgICAgICBpZiAoIWlzTmFOKHppKSAmJiB6aSAhPT0gMCkgcmV0dXJuIHBhcnNlSW50KHppKTtcclxuICAgICAgICBkb20gPSBkb20ucGFyZW50KCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vaW5zcGlyZWQgYnkgaHR0cDovL2ZvcnVtLmpxdWVyeS5jb20vdG9waWMvd2lkdGgtaW5jbHVkZXMtYm9yZGVyLXdpZHRoLXdoZW4tc2V0LXRvLXRoaW4tbWVkaXVtLXRoaWNrLWluLWllXHJcbiAgICB2YXIgX2NvbnZlcnRCb3JkZXJXaWR0aCA9IHtcclxuICAgICAgXCJ0aGluXCI6IDEsXHJcbiAgICAgIFwibWVkaXVtXCI6IDMsXHJcbiAgICAgIFwidGhpY2tcIjogNVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRXaWR0aFRvUGl4ZWwoZG9tLCBwcm9wLCBjaGtoZWlnaHQpIHtcclxuICAgICAgdmFyIHdkID0gZG9tLmNzcyhwcm9wKTtcclxuICAgICAgdmFyIHB4ID0gcGFyc2VGbG9hdCh3ZCk7XHJcbiAgICAgIGlmIChpc05hTihweCkpIHtcclxuICAgICAgICBweCA9IF9jb252ZXJ0Qm9yZGVyV2lkdGhbd2RdIHx8IDA7XHJcbiAgICAgICAgdmFyIGJyZCA9IChweCA9PSAzKSA/ICgoY2hraGVpZ2h0KSA/IChzZWxmLndpbi5vdXRlckhlaWdodCgpIC0gc2VsZi53aW4uaW5uZXJIZWlnaHQoKSkgOiAoc2VsZi53aW4ub3V0ZXJXaWR0aCgpIC0gc2VsZi53aW4uaW5uZXJXaWR0aCgpKSkgOiAxOyAvL0RPTidUIFRSVVNUIENTU1xyXG4gICAgICAgIGlmIChzZWxmLmlzaWU4ICYmIHB4KSBweCArPSAxO1xyXG4gICAgICAgIHJldHVybiAoYnJkKSA/IHB4IDogMDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHg7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nZXREb2N1bWVudFNjcm9sbE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3A6IF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wLFxyXG4gICAgICAgIGxlZnQ6IF93aW4ucGFnZVhPZmZzZXQgfHwgX2RvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHNlbGYuaXNmaXhlZCkge1xyXG4gICAgICAgIHZhciBvZnMgPSBzZWxmLndpbi5vZmZzZXQoKTsgIC8vIGZpeCBDaHJvbWUgYXV0byBpc3N1ZSAod2hlbiByaWdodC9ib3R0b20gcHJvcHMgb25seSlcclxuICAgICAgICB2YXIgc2NybCA9IHNlbGYuZ2V0RG9jdW1lbnRTY3JvbGxPZmZzZXQoKTtcclxuICAgICAgICBvZnMudG9wIC09IHNjcmwudG9wO1xyXG4gICAgICAgIG9mcy5sZWZ0IC09IHNjcmwubGVmdDtcclxuICAgICAgICByZXR1cm4gb2ZzO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciB3dyA9IHNlbGYud2luLm9mZnNldCgpO1xyXG4gICAgICBpZiAoIXNlbGYudmlld3BvcnQpIHJldHVybiB3dztcclxuICAgICAgdmFyIHZwID0gc2VsZi52aWV3cG9ydC5vZmZzZXQoKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3A6IHd3LnRvcCAtIHZwLnRvcCxcclxuICAgICAgICBsZWZ0OiB3dy5sZWZ0IC0gdnAubGVmdFxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNjcm9sbEJhciA9IGZ1bmN0aW9uIChsZW4pIHtcclxuICAgICAgdmFyIHBvcywgb2ZmO1xyXG4gICAgICBpZiAoc2VsZi5pc2h3c2Nyb2xsKSB7XHJcbiAgICAgICAgc2VsZi5yYWlsLmNzcyh7XHJcbiAgICAgICAgICBoZWlnaHQ6IHNlbGYud2luLmlubmVySGVpZ2h0KCkgLSAob3B0LnJhaWxwYWRkaW5nLnRvcCArIG9wdC5yYWlscGFkZGluZy5ib3R0b20pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHNlbGYucmFpbGgpIHNlbGYucmFpbGguY3NzKHtcclxuICAgICAgICAgIHdpZHRoOiBzZWxmLndpbi5pbm5lcldpZHRoKCkgLSAob3B0LnJhaWxwYWRkaW5nLmxlZnQgKyBvcHQucmFpbHBhZGRpbmcucmlnaHQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHdwb3MgPSBzZWxmLmdldE9mZnNldCgpO1xyXG4gICAgICAgIHBvcyA9IHtcclxuICAgICAgICAgIHRvcDogd3Bvcy50b3AsXHJcbiAgICAgICAgICBsZWZ0OiB3cG9zLmxlZnQgLSAob3B0LnJhaWxwYWRkaW5nLmxlZnQgKyBvcHQucmFpbHBhZGRpbmcucmlnaHQpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBwb3MudG9wICs9IGdldFdpZHRoVG9QaXhlbChzZWxmLndpbiwgJ2JvcmRlci10b3Atd2lkdGgnLCB0cnVlKTtcclxuICAgICAgICBwb3MubGVmdCArPSAoc2VsZi5yYWlsLmFsaWduKSA/IHNlbGYud2luLm91dGVyV2lkdGgoKSAtIGdldFdpZHRoVG9QaXhlbChzZWxmLndpbiwgJ2JvcmRlci1yaWdodC13aWR0aCcpIC0gc2VsZi5yYWlsLndpZHRoIDogZ2V0V2lkdGhUb1BpeGVsKHNlbGYud2luLCAnYm9yZGVyLWxlZnQtd2lkdGgnKTtcclxuXHJcbiAgICAgICAgb2ZmID0gb3B0LnJhaWxvZmZzZXQ7XHJcbiAgICAgICAgaWYgKG9mZikge1xyXG4gICAgICAgICAgaWYgKG9mZi50b3ApIHBvcy50b3AgKz0gb2ZmLnRvcDtcclxuICAgICAgICAgIGlmIChvZmYubGVmdCkgcG9zLmxlZnQgKz0gb2ZmLmxlZnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNlbGYucmFpbHNsb2NrZWQpIHNlbGYucmFpbC5jc3Moe1xyXG4gICAgICAgICAgdG9wOiBwb3MudG9wLFxyXG4gICAgICAgICAgbGVmdDogcG9zLmxlZnQsXHJcbiAgICAgICAgICBoZWlnaHQ6ICgobGVuKSA/IGxlbi5oIDogc2VsZi53aW4uaW5uZXJIZWlnaHQoKSkgLSAob3B0LnJhaWxwYWRkaW5nLnRvcCArIG9wdC5yYWlscGFkZGluZy5ib3R0b20pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChzZWxmLnpvb20pIHtcclxuICAgICAgICAgIHNlbGYuem9vbS5jc3Moe1xyXG4gICAgICAgICAgICB0b3A6IHBvcy50b3AgKyAxLFxyXG4gICAgICAgICAgICBsZWZ0OiAoc2VsZi5yYWlsLmFsaWduID09IDEpID8gcG9zLmxlZnQgLSAyMCA6IHBvcy5sZWZ0ICsgc2VsZi5yYWlsLndpZHRoICsgNFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VsZi5yYWlsaCAmJiAhc2VsZi5yYWlsc2xvY2tlZCkge1xyXG4gICAgICAgICAgcG9zID0ge1xyXG4gICAgICAgICAgICB0b3A6IHdwb3MudG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiB3cG9zLmxlZnRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBvZmYgPSBvcHQucmFpbGhvZmZzZXQ7XHJcbiAgICAgICAgICBpZiAob2ZmKSB7XHJcbiAgICAgICAgICAgIGlmIChvZmYudG9wKSBwb3MudG9wICs9IG9mZi50b3A7XHJcbiAgICAgICAgICAgIGlmIChvZmYubGVmdCkgcG9zLmxlZnQgKz0gb2ZmLmxlZnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2YXIgeSA9IChzZWxmLnJhaWxoLmFsaWduKSA/IHBvcy50b3AgKyBnZXRXaWR0aFRvUGl4ZWwoc2VsZi53aW4sICdib3JkZXItdG9wLXdpZHRoJywgdHJ1ZSkgKyBzZWxmLndpbi5pbm5lckhlaWdodCgpIC0gc2VsZi5yYWlsaC5oZWlnaHQgOiBwb3MudG9wICsgZ2V0V2lkdGhUb1BpeGVsKHNlbGYud2luLCAnYm9yZGVyLXRvcC13aWR0aCcsIHRydWUpO1xyXG4gICAgICAgICAgdmFyIHggPSBwb3MubGVmdCArIGdldFdpZHRoVG9QaXhlbChzZWxmLndpbiwgJ2JvcmRlci1sZWZ0LXdpZHRoJyk7XHJcbiAgICAgICAgICBzZWxmLnJhaWxoLmNzcyh7XHJcbiAgICAgICAgICAgIHRvcDogeSAtIChvcHQucmFpbHBhZGRpbmcudG9wICsgb3B0LnJhaWxwYWRkaW5nLmJvdHRvbSksXHJcbiAgICAgICAgICAgIGxlZnQ6IHgsXHJcbiAgICAgICAgICAgIHdpZHRoOiBzZWxmLnJhaWxoLndpZHRoXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZG9SYWlsQ2xpY2sgPSBmdW5jdGlvbiAoZSwgZGJsLCBocikge1xyXG4gICAgICB2YXIgZm4sIHBnLCBjdXIsIHBvcztcclxuXHJcbiAgICAgIGlmIChzZWxmLnJhaWxzbG9ja2VkKSByZXR1cm47XHJcblxyXG4gICAgICBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG5cclxuICAgICAgaWYgKCEoXCJwYWdlWVwiIGluIGUpKSB7XHJcbiAgICAgICAgZS5wYWdlWCA9IGUuY2xpZW50WCArIF9kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XHJcbiAgICAgICAgZS5wYWdlWSA9IGUuY2xpZW50WSArIF9kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGRibCkge1xyXG4gICAgICAgIGZuID0gKGhyKSA/IHNlbGYuZG9TY3JvbGxMZWZ0IDogc2VsZi5kb1Njcm9sbFRvcDtcclxuICAgICAgICBjdXIgPSAoaHIpID8gKChlLnBhZ2VYIC0gc2VsZi5yYWlsaC5vZmZzZXQoKS5sZWZ0IC0gKHNlbGYuY3Vyc29yd2lkdGggLyAyKSkgKiBzZWxmLnNjcm9sbHJhdGlvLngpIDogKChlLnBhZ2VZIC0gc2VsZi5yYWlsLm9mZnNldCgpLnRvcCAtIChzZWxmLmN1cnNvcmhlaWdodCAvIDIpKSAqIHNlbGYuc2Nyb2xscmF0aW8ueSk7XHJcbiAgICAgICAgc2VsZi51bnN5bmNoZWQoXCJyZWxhdGl2ZXh5XCIpO1xyXG4gICAgICAgIGZuKGN1cnwwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmbiA9IChocikgPyBzZWxmLmRvU2Nyb2xsTGVmdEJ5IDogc2VsZi5kb1Njcm9sbEJ5O1xyXG4gICAgICAgIGN1ciA9IChocikgPyBzZWxmLnNjcm9sbC54IDogc2VsZi5zY3JvbGwueTtcclxuICAgICAgICBwb3MgPSAoaHIpID8gZS5wYWdlWCAtIHNlbGYucmFpbGgub2Zmc2V0KCkubGVmdCA6IGUucGFnZVkgLSBzZWxmLnJhaWwub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIHBnID0gKGhyKSA/IHNlbGYudmlldy53IDogc2VsZi52aWV3Lmg7XHJcbiAgICAgICAgZm4oKGN1ciA+PSBwb3MpID8gcGcgOiAtcGcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLm5ld3Njcm9sbHkgPSBzZWxmLm5ld3Njcm9sbHggPSAwO1xyXG5cclxuICAgIHNlbGYuaGFzYW5pbWF0aW9uZnJhbWUgPSAoXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiBpbiBfd2luKTtcclxuICAgIHNlbGYuaGFzY2FuY2VsYW5pbWF0aW9uZnJhbWUgPSAoXCJjYW5jZWxBbmltYXRpb25GcmFtZVwiIGluIF93aW4pO1xyXG5cclxuICAgIHNlbGYuaGFzYm9yZGVyYm94ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgc2VsZi5zYXZlZC5jc3MgPSBbXTtcclxuXHJcbiAgICAgIGlmIChjYXAuaXNvcGVyYW1pbmkpIHJldHVybiB0cnVlOyAvLyBTT1JSWSwgRE8gTk9UIFdPUkshXHJcbiAgICAgIGlmIChjYXAuaXNhbmRyb2lkICYmICEoXCJoaWRkZW5cIiBpbiBfZG9jKSkgcmV0dXJuIHRydWU7IC8vIEFuZHJvaWQgMy0gU09SUlksIERPIE5PVCBXT1JLIVxyXG5cclxuICAgICAgb3B0LmVtdWxhdGV0b3VjaCA9IG9wdC5lbXVsYXRldG91Y2ggfHwgb3B0LnRvdWNoYmVoYXZpb3I7ICAvLyBtYW50YWluIGNvbXBhdGliaWxpdHkgd2l0aCBcInRvdWNoYmVoYXZpb3JcIiAgICAgIFxyXG5cclxuICAgICAgc2VsZi5oYXNib3JkZXJib3ggPSBfd2luLmdldENvbXB1dGVkU3R5bGUgJiYgKF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfZG9jLmJvZHkpWydib3gtc2l6aW5nJ10gPT09IFwiYm9yZGVyLWJveFwiKTtcclxuXHJcbiAgICAgIHZhciBfc2Nyb2xseWhpZGRlbiA9IHsgJ292ZXJmbG93LXknOiAnaGlkZGVuJyB9O1xyXG4gICAgICBpZiAoY2FwLmlzaWUxMSB8fCBjYXAuaXNpZTEwKSBfc2Nyb2xseWhpZGRlblsnLW1zLW92ZXJmbG93LXN0eWxlJ10gPSAnbm9uZSc7ICAvLyBJRSAxMCAmIDExIGlzIGFsd2F5cyBhIHdvcmxkIGFwYXJ0IVxyXG5cclxuICAgICAgaWYgKHNlbGYuaXNod3Njcm9sbCkge1xyXG4gICAgICAgIHRoaXMuZG9jLmNzcyhjYXAudHJhbnNpdGlvbnN0eWxlLCBjYXAucHJlZml4c3R5bGUgKyAndHJhbnNmb3JtIDBtcyBlYXNlLW91dCcpO1xyXG4gICAgICAgIGlmIChjYXAudHJhbnNpdGlvbmVuZCkgc2VsZi5iaW5kKHNlbGYuZG9jLCBjYXAudHJhbnNpdGlvbmVuZCwgc2VsZi5vblNjcm9sbFRyYW5zaXRpb25FbmQsIGZhbHNlKTsgLy9JIGhhdmUgZ290IHRvIGRvIHNvbWV0aGluZyB1c2VmdWxsISFcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi56aW5kZXggPSBcImF1dG9cIjtcclxuICAgICAgaWYgKCFzZWxmLmlzcGFnZSAmJiBvcHQuemluZGV4ID09IFwiYXV0b1wiKSB7XHJcbiAgICAgICAgc2VsZi56aW5kZXggPSBnZXRaSW5kZXgoKSB8fCBcImF1dG9cIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnppbmRleCA9IG9wdC56aW5kZXg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghc2VsZi5pc3BhZ2UgJiYgc2VsZi56aW5kZXggIT0gXCJhdXRvXCIgJiYgc2VsZi56aW5kZXggPiBnbG9iYWxtYXh6aW5kZXgpIHtcclxuICAgICAgICBnbG9iYWxtYXh6aW5kZXggPSBzZWxmLnppbmRleDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNlbGYuaXNpZSAmJiBzZWxmLnppbmRleCA9PT0gMCAmJiBvcHQuemluZGV4ID09IFwiYXV0b1wiKSB7IC8vIGZpeCBJRSBhdXRvID09IDBcclxuICAgICAgICBzZWxmLnppbmRleCA9IFwiYXV0b1wiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXNlbGYuaXNwYWdlIHx8ICFjYXAuaXNpZW9sZCkge1xyXG5cclxuICAgICAgICB2YXIgY29udCA9IHNlbGYuZG9jc2Nyb2xsO1xyXG4gICAgICAgIGlmIChzZWxmLmlzcGFnZSkgY29udCA9IChzZWxmLmhhc3dyYXBwZXIpID8gc2VsZi53aW4gOiBzZWxmLmRvYztcclxuXHJcbiAgICAgICAgc2VsZi5jc3MoY29udCwgX3Njcm9sbHloaWRkZW4pO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5pc3BhZ2UgJiYgKGNhcC5pc2llMTEgfHwgY2FwLmlzaWUpKSB7IC8vIElFIDctMTFcclxuICAgICAgICAgIHNlbGYuY3NzKCQoXCJodG1sXCIpLCBfc2Nyb2xseWhpZGRlbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FwLmlzaW9zICYmICFzZWxmLmlzcGFnZSAmJiAhc2VsZi5oYXN3cmFwcGVyKSBzZWxmLmNzcygkYm9keSwge1xyXG4gICAgICAgICAgXCItd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZ1wiOiBcInRvdWNoXCJcclxuICAgICAgICB9KTsgLy9mb3JjZSBodyBhY2NlbGVyYXRpb25cclxuXHJcbiAgICAgICAgdmFyIGN1cnNvciA9ICQoX2RvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XHJcbiAgICAgICAgY3Vyc29yLmNzcyh7XHJcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxyXG4gICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgXCJmbG9hdFwiOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICB3aWR0aDogb3B0LmN1cnNvcndpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBvcHQuY3Vyc29yY29sb3IsXHJcbiAgICAgICAgICBib3JkZXI6IG9wdC5jdXJzb3Jib3JkZXIsXHJcbiAgICAgICAgICAnYmFja2dyb3VuZC1jbGlwJzogJ3BhZGRpbmctYm94JyxcclxuICAgICAgICAgICctd2Via2l0LWJvcmRlci1yYWRpdXMnOiBvcHQuY3Vyc29yYm9yZGVycmFkaXVzLFxyXG4gICAgICAgICAgJy1tb3otYm9yZGVyLXJhZGl1cyc6IG9wdC5jdXJzb3Jib3JkZXJyYWRpdXMsXHJcbiAgICAgICAgICAnYm9yZGVyLXJhZGl1cyc6IG9wdC5jdXJzb3Jib3JkZXJyYWRpdXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY3Vyc29yLmFkZENsYXNzKCduaWNlc2Nyb2xsLWN1cnNvcnMnKTtcclxuXHJcbiAgICAgICAgc2VsZi5jdXJzb3IgPSBjdXJzb3I7XHJcblxyXG4gICAgICAgIHZhciByYWlsID0gJChfZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuICAgICAgICByYWlsLmF0dHIoJ2lkJywgc2VsZi5pZCk7XHJcbiAgICAgICAgcmFpbC5hZGRDbGFzcygnbmljZXNjcm9sbC1yYWlscyBuaWNlc2Nyb2xsLXJhaWxzLXZyJyk7XHJcblxyXG4gICAgICAgIHZhciB2LCBhLCBrcCA9IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInRvcFwiLCBcImJvdHRvbVwiXTsgIC8vKipcclxuICAgICAgICBmb3IgKHZhciBuIGluIGtwKSB7XHJcbiAgICAgICAgICBhID0ga3Bbbl07XHJcbiAgICAgICAgICB2ID0gb3B0LnJhaWxwYWRkaW5nW2FdIHx8IDA7XHJcbiAgICAgICAgICB2ICYmIHJhaWwuY3NzKFwicGFkZGluZy1cIiArIGEsIHYgKyBcInB4XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmFpbC5hcHBlbmQoY3Vyc29yKTtcclxuXHJcbiAgICAgICAgcmFpbC53aWR0aCA9IE1hdGgubWF4KHBhcnNlRmxvYXQob3B0LmN1cnNvcndpZHRoKSwgY3Vyc29yLm91dGVyV2lkdGgoKSk7XHJcbiAgICAgICAgcmFpbC5jc3Moe1xyXG4gICAgICAgICAgd2lkdGg6IHJhaWwud2lkdGggKyBcInB4XCIsXHJcbiAgICAgICAgICB6SW5kZXg6IHNlbGYuemluZGV4LFxyXG4gICAgICAgICAgYmFja2dyb3VuZDogb3B0LmJhY2tncm91bmQsXHJcbiAgICAgICAgICBjdXJzb3I6IFwiZGVmYXVsdFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJhaWwudmlzaWJpbGl0eSA9IHRydWU7XHJcbiAgICAgICAgcmFpbC5zY3JvbGxhYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmFpbC5hbGlnbiA9IChvcHQucmFpbGFsaWduID09IFwibGVmdFwiKSA/IDAgOiAxO1xyXG5cclxuICAgICAgICBzZWxmLnJhaWwgPSByYWlsO1xyXG5cclxuICAgICAgICBzZWxmLnJhaWwuZHJhZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgem9vbSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChvcHQuYm94em9vbSAmJiAhc2VsZi5pc3BhZ2UgJiYgIWNhcC5pc2llb2xkKSB7XHJcbiAgICAgICAgICB6b29tID0gX2RvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmJpbmQoem9vbSwgXCJjbGlja1wiLCBzZWxmLmRvWm9vbSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoem9vbSwgXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi56b29tLmNzcygnb3BhY2l0eScsIG9wdC5jdXJzb3JvcGFjaXR5bWF4KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHpvb20sIFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuem9vbS5jc3MoJ29wYWNpdHknLCBvcHQuY3Vyc29yb3BhY2l0eW1pbik7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBzZWxmLnpvb20gPSAkKHpvb20pO1xyXG4gICAgICAgICAgc2VsZi56b29tLmNzcyh7XHJcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXHJcbiAgICAgICAgICAgIHpJbmRleDogc2VsZi56aW5kZXgsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgb3B0LnNjcmlwdHBhdGggKyAnem9vbWljby5wbmcpJyxcclxuICAgICAgICAgICAgaGVpZ2h0OiAxOCxcclxuICAgICAgICAgICAgd2lkdGg6IDE4LFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwIDAnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChvcHQuZGJsY2xpY2t6b29tKSBzZWxmLmJpbmQoc2VsZi53aW4sIFwiZGJsY2xpY2tcIiwgc2VsZi5kb1pvb20pO1xyXG4gICAgICAgICAgaWYgKGNhcC5jYW50b3VjaCAmJiBvcHQuZ2VzdHVyZXpvb20pIHtcclxuICAgICAgICAgICAgc2VsZi5vbmdlc3R1cmV6b29tID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICBpZiAoZS5zY2FsZSA+IDEuNSkgc2VsZi5kb1pvb21JbihlKTtcclxuICAgICAgICAgICAgICBpZiAoZS5zY2FsZSA8IDAuOCkgc2VsZi5kb1pvb21PdXQoZSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChzZWxmLndpbiwgXCJnZXN0dXJlZW5kXCIsIHNlbGYub25nZXN0dXJlem9vbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpbml0IEhPUklaXHJcblxyXG4gICAgICAgIHNlbGYucmFpbGggPSBmYWxzZTtcclxuICAgICAgICB2YXIgcmFpbGg7XHJcblxyXG4gICAgICAgIGlmIChvcHQuaG9yaXpyYWlsZW5hYmxlZCkge1xyXG5cclxuICAgICAgICAgIHNlbGYuY3NzKGNvbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJ1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY3Vyc29yID0gJChfZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuICAgICAgICAgIGN1cnNvci5jc3Moe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogb3B0LmN1cnNvcndpZHRoLFxyXG4gICAgICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHQuY3Vyc29yY29sb3IsXHJcbiAgICAgICAgICAgIGJvcmRlcjogb3B0LmN1cnNvcmJvcmRlcixcclxuICAgICAgICAgICAgYmFja2dyb3VuZENsaXA6ICdwYWRkaW5nLWJveCcsXHJcbiAgICAgICAgICAgICctd2Via2l0LWJvcmRlci1yYWRpdXMnOiBvcHQuY3Vyc29yYm9yZGVycmFkaXVzLFxyXG4gICAgICAgICAgICAnLW1vei1ib3JkZXItcmFkaXVzJzogb3B0LmN1cnNvcmJvcmRlcnJhZGl1cyxcclxuICAgICAgICAgICAgJ2JvcmRlci1yYWRpdXMnOiBvcHQuY3Vyc29yYm9yZGVycmFkaXVzXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoY2FwLmlzaWVvbGQpIGN1cnNvci5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpOyAgLy9JRTYgaG9yaXogc2Nyb2xsYmFyIGlzc3VlXHJcblxyXG4gICAgICAgICAgY3Vyc29yLmFkZENsYXNzKCduaWNlc2Nyb2xsLWN1cnNvcnMnKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmN1cnNvcmggPSBjdXJzb3I7XHJcblxyXG4gICAgICAgICAgcmFpbGggPSAkKF9kb2MuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICAgICAgcmFpbGguYXR0cignaWQnLCBzZWxmLmlkICsgJy1ocicpO1xyXG4gICAgICAgICAgcmFpbGguYWRkQ2xhc3MoJ25pY2VzY3JvbGwtcmFpbHMgbmljZXNjcm9sbC1yYWlscy1ocicpO1xyXG4gICAgICAgICAgcmFpbGguaGVpZ2h0ID0gTWF0aC5tYXgocGFyc2VGbG9hdChvcHQuY3Vyc29yd2lkdGgpLCBjdXJzb3Iub3V0ZXJIZWlnaHQoKSk7XHJcbiAgICAgICAgICByYWlsaC5jc3Moe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IHJhaWxoLmhlaWdodCArIFwicHhcIixcclxuICAgICAgICAgICAgJ3pJbmRleCc6IHNlbGYuemluZGV4LFxyXG4gICAgICAgICAgICBcImJhY2tncm91bmRcIjogb3B0LmJhY2tncm91bmRcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJhaWxoLmFwcGVuZChjdXJzb3IpO1xyXG5cclxuICAgICAgICAgIHJhaWxoLnZpc2liaWxpdHkgPSB0cnVlO1xyXG4gICAgICAgICAgcmFpbGguc2Nyb2xsYWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgcmFpbGguYWxpZ24gPSAob3B0LnJhaWx2YWxpZ24gPT0gXCJ0b3BcIikgPyAwIDogMTtcclxuXHJcbiAgICAgICAgICBzZWxmLnJhaWxoID0gcmFpbGg7XHJcblxyXG4gICAgICAgICAgc2VsZi5yYWlsaC5kcmFnID0gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlbGYuaXNwYWdlKSB7XHJcblxyXG4gICAgICAgICAgcmFpbC5jc3Moe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJhaWwuY3NzKChyYWlsLmFsaWduKSA/IHsgcmlnaHQ6IDAgfSA6IHsgbGVmdDogMCB9KTtcclxuXHJcbiAgICAgICAgICBzZWxmLmJvZHkuYXBwZW5kKHJhaWwpO1xyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbGgpIHtcclxuICAgICAgICAgICAgcmFpbGguY3NzKHtcclxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxyXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmFpbGguY3NzKChyYWlsaC5hbGlnbikgPyB7IGJvdHRvbTogMCB9IDogeyB0b3A6IDAgfSk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmJvZHkuYXBwZW5kKHJhaWxoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHNlbGYuaXNod3Njcm9sbCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi53aW4uY3NzKCdwb3NpdGlvbicpID09ICdzdGF0aWMnKSBzZWxmLmNzcyhzZWxmLndpbiwgeyAncG9zaXRpb24nOiAncmVsYXRpdmUnIH0pO1xyXG4gICAgICAgICAgICB2YXIgYmQgPSAoc2VsZi53aW5bMF0ubm9kZU5hbWUgPT0gJ0hUTUwnKSA/IHNlbGYuYm9keSA6IHNlbGYud2luO1xyXG4gICAgICAgICAgICAkKGJkKS5zY3JvbGxUb3AoMCkuc2Nyb2xsTGVmdCgwKTsgIC8vIGZpeCByYWlsIHBvc2l0aW9uIGlmIGNvbnRlbnQgYWxyZWFkeSBzY3JvbGxlZFxyXG4gICAgICAgICAgICBpZiAoc2VsZi56b29tKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi56b29tLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAxLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBcIm1hcmdpbi1yaWdodFwiOiByYWlsLndpZHRoICsgNFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGJkLmFwcGVuZChzZWxmLnpvb20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJhaWwuY3NzKHtcclxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICAgIHRvcDogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmFpbC5jc3MoKHJhaWwuYWxpZ24pID8geyByaWdodDogMCB9IDogeyBsZWZ0OiAwIH0pO1xyXG4gICAgICAgICAgICBiZC5hcHBlbmQocmFpbCk7XHJcbiAgICAgICAgICAgIGlmIChyYWlsaCkge1xyXG4gICAgICAgICAgICAgIHJhaWxoLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogMFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJhaWxoLmNzcygocmFpbGguYWxpZ24pID8geyBib3R0b206IDAgfSA6IHsgdG9wOiAwIH0pO1xyXG4gICAgICAgICAgICAgIGJkLmFwcGVuZChyYWlsaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuaXNmaXhlZCA9IChzZWxmLndpbi5jc3MoXCJwb3NpdGlvblwiKSA9PSBcImZpeGVkXCIpO1xyXG4gICAgICAgICAgICB2YXIgcmxwb3MgPSAoc2VsZi5pc2ZpeGVkKSA/IFwiZml4ZWRcIiA6IFwiYWJzb2x1dGVcIjtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2VsZi5pc2ZpeGVkKSBzZWxmLnZpZXdwb3J0ID0gc2VsZi5nZXRWaWV3cG9ydChzZWxmLndpblswXSk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnZpZXdwb3J0KSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5ib2R5ID0gc2VsZi52aWV3cG9ydDtcclxuICAgICAgICAgICAgICBpZiAoISgvZml4ZWR8YWJzb2x1dGUvLnRlc3Qoc2VsZi52aWV3cG9ydC5jc3MoXCJwb3NpdGlvblwiKSkpKSBzZWxmLmNzcyhzZWxmLnZpZXdwb3J0LCB7XHJcbiAgICAgICAgICAgICAgICBcInBvc2l0aW9uXCI6IFwicmVsYXRpdmVcIlxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByYWlsLmNzcyh7XHJcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJscG9zXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi56b29tKSBzZWxmLnpvb20uY3NzKHtcclxuICAgICAgICAgICAgICBwb3NpdGlvbjogcmxwb3NcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU2Nyb2xsQmFyKCk7XHJcbiAgICAgICAgICAgIHNlbGYuYm9keS5hcHBlbmQocmFpbCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnpvb20pIHNlbGYuYm9keS5hcHBlbmQoc2VsZi56b29tKTtcclxuICAgICAgICAgICAgaWYgKHNlbGYucmFpbGgpIHtcclxuICAgICAgICAgICAgICByYWlsaC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJscG9zXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgc2VsZi5ib2R5LmFwcGVuZChyYWlsaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoY2FwLmlzaW9zKSBzZWxmLmNzcyhzZWxmLndpbiwge1xyXG4gICAgICAgICAgICAnLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yJzogJ3JnYmEoMCwwLDAsMCknLFxyXG4gICAgICAgICAgICAnLXdlYmtpdC10b3VjaC1jYWxsb3V0JzogJ25vbmUnXHJcbiAgICAgICAgICB9KTsgLy8gcHJldmVudCBncmV5IGxheWVyIG9uIGNsaWNrXHJcblxyXG4gICAgICAgICAgaWYgKG9wdC5kaXNhYmxlb3V0bGluZSkge1xyXG4gICAgICAgICAgICBpZiAoY2FwLmlzaWUpIHNlbGYud2luLmF0dHIoXCJoaWRlRm9jdXNcIiwgXCJ0cnVlXCIpOyAvLyBJRSwgcHJldmVudCBkb3R0ZWQgcmVjdGFuZ2xlIG9uIGZvY3VzZWQgZGl2XHJcbiAgICAgICAgICAgIGlmIChjYXAuaXN3ZWJraXQpIHNlbGYud2luLmNzcygnb3V0bGluZScsICdub25lJyk7ICAvLyBXZWJraXQgb3V0bGluZVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHQuYXV0b2hpZGVtb2RlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgc2VsZi5hdXRvaGlkZWRvbSA9IGZhbHNlO1xyXG4gICAgICAgICAgc2VsZi5yYWlsLmNzcyh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wdC5jdXJzb3JvcGFjaXR5bWF4XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWxoKSBzZWxmLnJhaWxoLmNzcyh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IG9wdC5jdXJzb3JvcGFjaXR5bWF4XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKChvcHQuYXV0b2hpZGVtb2RlID09PSB0cnVlKSB8fCAob3B0LmF1dG9oaWRlbW9kZSA9PT0gXCJsZWF2ZVwiKSkge1xyXG4gICAgICAgICAgc2VsZi5hdXRvaGlkZWRvbSA9ICQoKS5hZGQoc2VsZi5yYWlsKTtcclxuICAgICAgICAgIGlmIChjYXAuaXNpZTgpIHNlbGYuYXV0b2hpZGVkb20gPSBzZWxmLmF1dG9oaWRlZG9tLmFkZChzZWxmLmN1cnNvcik7XHJcbiAgICAgICAgICBpZiAoc2VsZi5yYWlsaCkgc2VsZi5hdXRvaGlkZWRvbSA9IHNlbGYuYXV0b2hpZGVkb20uYWRkKHNlbGYucmFpbGgpO1xyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbGggJiYgY2FwLmlzaWU4KSBzZWxmLmF1dG9oaWRlZG9tID0gc2VsZi5hdXRvaGlkZWRvbS5hZGQoc2VsZi5jdXJzb3JoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdC5hdXRvaGlkZW1vZGUgPT0gXCJzY3JvbGxcIikge1xyXG4gICAgICAgICAgc2VsZi5hdXRvaGlkZWRvbSA9ICQoKS5hZGQoc2VsZi5yYWlsKTtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWxoKSBzZWxmLmF1dG9oaWRlZG9tID0gc2VsZi5hdXRvaGlkZWRvbS5hZGQoc2VsZi5yYWlsaCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHQuYXV0b2hpZGVtb2RlID09IFwiY3Vyc29yXCIpIHtcclxuICAgICAgICAgIHNlbGYuYXV0b2hpZGVkb20gPSAkKCkuYWRkKHNlbGYuY3Vyc29yKTtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWxoKSBzZWxmLmF1dG9oaWRlZG9tID0gc2VsZi5hdXRvaGlkZWRvbS5hZGQoc2VsZi5jdXJzb3JoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdC5hdXRvaGlkZW1vZGUgPT0gXCJoaWRkZW5cIikge1xyXG4gICAgICAgICAgc2VsZi5hdXRvaGlkZWRvbSA9IGZhbHNlO1xyXG4gICAgICAgICAgc2VsZi5oaWRlKCk7XHJcbiAgICAgICAgICBzZWxmLnJhaWxzbG9ja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FwLmNhbnRvdWNoIHx8IHNlbGYuaXN0b3VjaGNhcGFibGUgfHwgb3B0LmVtdWxhdGV0b3VjaCB8fCBjYXAuaGFzbXN0b3VjaCkge1xyXG5cclxuICAgICAgICAgIHNlbGYuc2Nyb2xsbW9tID0gbmV3IFNjcm9sbE1vbWVudHVtQ2xhc3MyRChzZWxmKTtcclxuXHJcbiAgICAgICAgICB2YXIgZGVsYXllZGNsaWNrID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBzZWxmLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5sb2NrZWQpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgKGUucG9pbnRlclR5cGUgJiYgZS5wb2ludGVyVHlwZSAhPSAyICYmIGUucG9pbnRlclR5cGUgIT0gXCJ0b3VjaFwiKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChlLnBvaW50ZXJUeXBlICYmIChlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnIHx8IGUucG9pbnRlclR5cGUgPT09IGUuTVNQT0lOVEVSX1RZUEVfTU9VU0UpKSByZXR1cm4gZmFsc2U7ICAvLyBuZWVkIHRlc3Qgb24gc3VyZmFjZSEhXHJcblxyXG4gICAgICAgICAgICBzZWxmLmhhc21vdmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGYuc2Nyb2xsbW9tLnRpbWVyKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi50cmlnZ2VyU2Nyb2xsRW5kKCk7XHJcbiAgICAgICAgICAgICAgc2VsZi5zY3JvbGxtb20uc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNlbGYucmFpbHNsb2NrZWQpIHtcclxuICAgICAgICAgICAgICB2YXIgdGcgPSBzZWxmLmdldFRhcmdldChlKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHRnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2twID0gKC9JTlBVVC9pLnRlc3QodGcubm9kZU5hbWUpKSAmJiAoL3JhbmdlL2kudGVzdCh0Zy50eXBlKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2twKSByZXR1cm4gc2VsZi5zdG9wUHJvcGFnYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB2YXIgaXNtb3VzZSA9IChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoIShcImNsaWVudFhcIiBpbiBlKSAmJiAoXCJjaGFuZ2VkVG91Y2hlc1wiIGluIGUpKSB7XHJcbiAgICAgICAgICAgICAgICBlLmNsaWVudFggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgICAgICAgICAgICBlLmNsaWVudFkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAoc2VsZi5mb3JjZXNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlID0gZTtcclxuICAgICAgICAgICAgICAgIGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxcIjogKGUub3JpZ2luYWwpID8gZS5vcmlnaW5hbCA6IGVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBlLmNsaWVudFggPSBsZS5zY3JlZW5YO1xyXG4gICAgICAgICAgICAgICAgZS5jbGllbnRZID0gbGUuc2NyZWVuWTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHNlbGYucmFpbC5kcmFnID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZS5jbGllbnRYLFxyXG4gICAgICAgICAgICAgICAgeTogZS5jbGllbnRZLFxyXG4gICAgICAgICAgICAgICAgc3g6IHNlbGYuc2Nyb2xsLngsXHJcbiAgICAgICAgICAgICAgICBzeTogc2VsZi5zY3JvbGwueSxcclxuICAgICAgICAgICAgICAgIHN0OiBzZWxmLmdldFNjcm9sbFRvcCgpLFxyXG4gICAgICAgICAgICAgICAgc2w6IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgcHQ6IDIsXHJcbiAgICAgICAgICAgICAgICBkbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB0ZzogdGdcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICBpZiAoc2VsZi5pc3BhZ2UgfHwgIW9wdC5kaXJlY3Rpb25sb2NrZGVhZHpvbmUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJhaWwuZHJhZy5kbCA9IFwiZlwiO1xyXG5cclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0ge1xyXG4gICAgICAgICAgICAgICAgICB3OiAkd2luZG93LndpZHRoKCksXHJcbiAgICAgICAgICAgICAgICAgIGg6ICR3aW5kb3cuaGVpZ2h0KClcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2UgPSBzZWxmLmdldENvbnRlbnRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1heGggPSBwYWdlLmggLSB2aWV3Lmg7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF4dyA9IHBhZ2UudyAtIHZpZXcudztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLnNjcm9sbGFibGUgJiYgIXNlbGYucmFpbGguc2Nyb2xsYWJsZSkgc2VsZi5yYWlsLmRyYWcuY2sgPSAobWF4aCA+IDApID8gXCJ2XCIgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzZWxmLnJhaWwuc2Nyb2xsYWJsZSAmJiBzZWxmLnJhaWxoLnNjcm9sbGFibGUpIHNlbGYucmFpbC5kcmFnLmNrID0gKG1heHcgPiAwKSA/IFwiaFwiIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHNlbGYucmFpbC5kcmFnLmNrID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaWYgKG9wdC5lbXVsYXRldG91Y2ggJiYgc2VsZi5pc2lmcmFtZSAmJiBjYXAuaXNpZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdwID0gc2VsZi53aW4ucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHNlbGYucmFpbC5kcmFnLnggKz0gd3AubGVmdDtcclxuICAgICAgICAgICAgICAgIHNlbGYucmFpbC5kcmFnLnkgKz0gd3AudG9wO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc2VsZi5oYXNtb3ZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBzZWxmLmxhc3Rtb3VzZXVwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgc2VsZi5zY3JvbGxtb20ucmVzZXQoZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAodGcmJmlzbW91c2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaXAgPSAvSU5QVVR8U0VMRUNUfEJVVFRPTnxURVhUQVJFQS9pLnRlc3QodGcubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpcCkge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoY2FwLmhhc21vdXNlY2FwdHVyZSkgdGcuc2V0Q2FwdHVyZSgpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAob3B0LmVtdWxhdGV0b3VjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Zy5vbmNsaWNrICYmICEodGcuX29uY2xpY2sgfHwgZmFsc2UpKSB7IC8vIGludGVyY2VwdCBET00wIG9uY2xpY2sgZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgIHRnLl9vbmNsaWNrID0gdGcub25jbGljaztcclxuICAgICAgICAgICAgICAgICAgICAgIHRnLm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5oYXNtb3ZpbmcpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGcuX29uY2xpY2suY2FsbCh0aGlzLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnN0b3BQcm9wYWdhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoL1NVQk1JVHxDQU5DRUx8QlVUVE9OL2kudGVzdCgkKHRnKS5hdHRyKCd0eXBlJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNlbGYucHJldmVudGNsaWNrID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwidGdcIjogdGcsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHNlbGYub250b3VjaGVuZCA9IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNlbGYucmFpbC5kcmFnKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZy5wdCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgLy9pZiAoZS5wb2ludGVyVHlwZSAmJiBlLnBvaW50ZXJUeXBlICE9IDIgJiYgZS5wb2ludGVyVHlwZSAhPSBcInRvdWNoXCIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICBpZiAoZS5wb2ludGVyVHlwZSAmJiAoZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyB8fCBlLnBvaW50ZXJUeXBlID09PSBlLk1TUE9JTlRFUl9UWVBFX01PVVNFKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICBzZWxmLnJhaWwuZHJhZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgaXNtb3VzZSA9IChlLnR5cGUgPT09IFwibW91c2V1cFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYuaGFzbW92aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNjcm9sbG1vbS5kb01vbWVudHVtKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxhc3Rtb3VzZXVwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuaGlkZUN1cnNvcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcC5oYXNtb3VzZWNhcHR1cmUpIF9kb2MucmVsZWFzZUNhcHR1cmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc21vdXNlKSByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYucmFpbC5kcmFnLnB0ID09IDEpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5vbm1vdXNldXAoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHZhciBtb3ZlbmVlZG9mZnNldCA9IChvcHQuZW11bGF0ZXRvdWNoICYmIHNlbGYuaXNpZnJhbWUgJiYgIWNhcC5oYXNtb3VzZWNhcHR1cmUpO1xyXG5cclxuICAgICAgICAgIHZhciBsb2NrdG9sbGVyYW5jZSA9IG9wdC5kaXJlY3Rpb25sb2NrZGVhZHpvbmUgKiAwLjMgfCAwO1xyXG5cclxuICAgICAgICAgIHNlbGYub250b3VjaG1vdmUgPSBmdW5jdGlvbiAoZSwgYnlpZnJhbWUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBvcHQucHJldmVudG11bHRpdG91Y2hzY3JvbGxpbmcpIHtcclxuICAgICAgICAgICAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybiB0cnVlOyAvLyBtdWx0aXRvdWNoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vaWYgKGUucG9pbnRlclR5cGUgJiYgZS5wb2ludGVyVHlwZSAhPSAyICYmIGUucG9pbnRlclR5cGUgIT0gXCJ0b3VjaFwiKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChlLnBvaW50ZXJUeXBlICYmIChlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnIHx8IGUucG9pbnRlclR5cGUgPT09IGUuTVNQT0lOVEVSX1RZUEVfTU9VU0UpKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZy5wdCA9PSAyKSB7XHJcblxyXG4gICAgICAgICAgICAgIGlmICgoXCJjaGFuZ2VkVG91Y2hlc1wiIGluIGUpKSB7XHJcbiAgICAgICAgICAgICAgICBlLmNsaWVudFggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgICAgICAgICAgICBlLmNsaWVudFkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB2YXIgb2Z5LCBvZng7XHJcbiAgICAgICAgICAgICAgb2Z4ID0gb2Z5ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKG1vdmVuZWVkb2Zmc2V0ICYmICFieWlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdwID0gc2VsZi53aW4ucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIG9meCA9IC13cC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgb2Z5ID0gLXdwLnRvcDtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHZhciBmeSA9IGUuY2xpZW50WSArIG9meTtcclxuICAgICAgICAgICAgICB2YXIgbXkgPSAoZnkgLSBzZWxmLnJhaWwuZHJhZy55KTtcclxuICAgICAgICAgICAgICB2YXIgZnggPSBlLmNsaWVudFggKyBvZng7XHJcbiAgICAgICAgICAgICAgdmFyIG14ID0gKGZ4IC0gc2VsZi5yYWlsLmRyYWcueCk7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBueSA9IHNlbGYucmFpbC5kcmFnLnN0IC0gbXk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChzZWxmLmlzaHdzY3JvbGwgJiYgb3B0LmJvdW5jZXNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG55IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICBueSA9IE1hdGgucm91bmQobnkgLyAyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnkgPiBzZWxmLnBhZ2UubWF4aCkge1xyXG4gICAgICAgICAgICAgICAgICBueSA9IHNlbGYucGFnZS5tYXhoICsgTWF0aC5yb3VuZCgobnkgLSBzZWxmLnBhZ2UubWF4aCkgLyAyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG55IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICBueSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIGZ5ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG55ID4gc2VsZi5wYWdlLm1heGgpIHtcclxuICAgICAgICAgICAgICAgICAgbnkgPSBzZWxmLnBhZ2UubWF4aDtcclxuICAgICAgICAgICAgICAgICAgZnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZ5ID09PSAwICYmICFzZWxmLmhhc21vdmluZykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNwYWdlKSBzZWxmLnJhaWwuZHJhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHZhciBueCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsaCAmJiBzZWxmLnJhaWxoLnNjcm9sbGFibGUpIHtcclxuICAgICAgICAgICAgICAgIG54ID0gKHNlbGYuaXNydGxtb2RlKSA/IG14IC0gc2VsZi5yYWlsLmRyYWcuc2wgOiBzZWxmLnJhaWwuZHJhZy5zbCAtIG14O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzaHdzY3JvbGwgJiYgb3B0LmJvdW5jZXNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgICBpZiAobnggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnggPSBNYXRoLnJvdW5kKG54IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnggPiBzZWxmLnBhZ2UubWF4dykge1xyXG4gICAgICAgICAgICAgICAgICAgIG54ID0gc2VsZi5wYWdlLm1heHcgKyBNYXRoLnJvdW5kKChueCAtIHNlbGYucGFnZS5tYXh3KSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBpZiAobnggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAobnggPiBzZWxmLnBhZ2UubWF4dykge1xyXG4gICAgICAgICAgICAgICAgICAgIG54ID0gc2VsZi5wYWdlLm1heHc7XHJcbiAgICAgICAgICAgICAgICAgICAgZnggPSAwO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgIGlmICghc2VsZi5oYXNtb3ZpbmcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcueSA9PT0gZS5jbGllbnRZICYmIHNlbGYucmFpbC5kcmFnLnggPT09IGUuY2xpZW50WCkgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7ICAvLyBwcmV2ZW50IGZpcnN0IHVzZWxlc3MgbW92ZSBldmVudCBcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXkgPSBNYXRoLmFicyhteSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXggPSBNYXRoLmFicyhteCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHogPSBvcHQuZGlyZWN0aW9ubG9ja2RlYWR6b25lO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcuY2spIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGF5ID4gZHogJiYgYXggPiBkeikgc2VsZi5yYWlsLmRyYWcuZGwgPSBcImZcIjtcclxuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXkgPiBkeikgc2VsZi5yYWlsLmRyYWcuZGwgPSAoYXggPiBsb2NrdG9sbGVyYW5jZSkgPyBcImZcIiA6IFwidlwiO1xyXG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChheCA+IGR6KSBzZWxmLnJhaWwuZHJhZy5kbCA9IChheSA+IGxvY2t0b2xsZXJhbmNlKSA/IFwiZlwiIDogXCJoXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLnJhaWwuZHJhZy5jayA9PSBcInZcIikge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoYXggPiBkeiAmJiBheSA8PSBsb2NrdG9sbGVyYW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmFpbC5kcmFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXkgPiBkeikgc2VsZi5yYWlsLmRyYWcuZGwgPSBcInZcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLnJhaWwuZHJhZy5jayA9PSBcImhcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKGF5ID4gZHogJiYgYXggPD0gbG9ja3RvbGxlcmFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJhaWwuZHJhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF4ID4gZHopIHNlbGYucmFpbC5kcmFnLmRsID0gXCJoXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcuZGwpIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYudHJpZ2dlclNjcm9sbFN0YXJ0KGUuY2xpZW50WCwgZS5jbGllbnRZLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuaGFzbW92aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChzZWxmLnByZXZlbnRjbGljayAmJiAhc2VsZi5wcmV2ZW50Y2xpY2suY2xpY2spIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJldmVudGNsaWNrLmNsaWNrID0gc2VsZi5wcmV2ZW50Y2xpY2sudGcub25jbGljayB8fCBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJldmVudGNsaWNrLnRnLm9uY2xpY2sgPSBzZWxmLm9ucHJldmVudGNsaWNrO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnLmRsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcuZGwgPT0gXCJ2XCIpIG54ID0gc2VsZi5yYWlsLmRyYWcuc2w7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLnJhaWwuZHJhZy5kbCA9PSBcImhcIikgbnkgPSBzZWxmLnJhaWwuZHJhZy5zdDtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHNlbGYuc3luY2hlZChcInRvdWNobW92ZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcgJiYgKHNlbGYucmFpbC5kcmFnLnB0ID09IDIpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnByZXBhcmVUcmFuc2l0aW9uKSBzZWxmLnJlc2V0VHJhbnNpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLnNjcm9sbGFibGUpIHNlbGYuc2V0U2Nyb2xsVG9wKG55KTtcclxuICAgICAgICAgICAgICAgICAgc2VsZi5zY3JvbGxtb20udXBkYXRlKGZ4LCBmeSk7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnJhaWxoICYmIHNlbGYucmFpbGguc2Nyb2xsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0U2Nyb2xsTGVmdChueCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93Q3Vyc29yKG55LCBueCk7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93Q3Vyc29yKG55KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAoY2FwLmlzaWUxMCkgX2RvYy5zZWxlY3Rpb24uY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYucmFpbC5kcmFnLnB0ID09IDEpIHsgLy8gZHJhZyBvbiBjdXJzb3JcclxuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5vbm1vdXNlbW92ZShlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgc2VsZi5vbnRvdWNoc3RhcnRDdXJzb3IgPSBmdW5jdGlvbiAoZSwgaHJvbmx5KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZyAmJiBzZWxmLnJhaWwuZHJhZy5wdCAhPSAzKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmxvY2tlZCkgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICAgIHNlbGYuY2FuY2VsU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgIHNlbGYucmFpbC5kcmFnID0ge1xyXG4gICAgICAgICAgICAgIHg6IGUudG91Y2hlc1swXS5jbGllbnRYLFxyXG4gICAgICAgICAgICAgIHk6IGUudG91Y2hlc1swXS5jbGllbnRZLFxyXG4gICAgICAgICAgICAgIHN4OiBzZWxmLnNjcm9sbC54LFxyXG4gICAgICAgICAgICAgIHN5OiBzZWxmLnNjcm9sbC55LFxyXG4gICAgICAgICAgICAgIHB0OiAzLFxyXG4gICAgICAgICAgICAgIGhyOiAoISFocm9ubHkpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciB0ZyA9IHNlbGYuZ2V0VGFyZ2V0KGUpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNwYWdlICYmIGNhcC5oYXNtb3VzZWNhcHR1cmUpIHRnLnNldENhcHR1cmUoKTtcclxuICAgICAgICAgICAgaWYgKHNlbGYuaXNpZnJhbWUgJiYgIWNhcC5oYXNtb3VzZWNhcHR1cmUpIHtcclxuICAgICAgICAgICAgICBzZWxmLnNhdmVkLmNzc3BvaW50ZXJldmVudHMgPSBzZWxmLmRvYy5jc3MoXCJwb2ludGVyLWV2ZW50c1wiKTtcclxuICAgICAgICAgICAgICBzZWxmLmNzcyhzZWxmLmRvYywgeyBcInBvaW50ZXItZXZlbnRzXCI6IFwibm9uZVwiIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBzZWxmLm9udG91Y2hlbmRDdXJzb3IgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcpIHtcclxuICAgICAgICAgICAgICBpZiAoY2FwLmhhc21vdXNlY2FwdHVyZSkgX2RvYy5yZWxlYXNlQ2FwdHVyZSgpO1xyXG4gICAgICAgICAgICAgIGlmIChzZWxmLmlzaWZyYW1lICYmICFjYXAuaGFzbW91c2VjYXB0dXJlKSBzZWxmLmRvYy5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBzZWxmLnNhdmVkLmNzc3BvaW50ZXJldmVudHMpO1xyXG4gICAgICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZy5wdCAhPSAzKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgc2VsZi5yYWlsLmRyYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBzZWxmLm9udG91Y2htb3ZlQ3Vyc29yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnLnB0ICE9IDMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgc2VsZi5jdXJzb3JmcmVlemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnLmhyKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNjcm9sbC54ID0gc2VsZi5yYWlsLmRyYWcuc3ggKyAoZS50b3VjaGVzWzBdLmNsaWVudFggLSBzZWxmLnJhaWwuZHJhZy54KTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNjcm9sbC54IDwgMCkgc2VsZi5zY3JvbGwueCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbXcgPSBzZWxmLnNjcm9sbHZhbHVlbWF4dztcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNjcm9sbC54ID4gbXcpIHNlbGYuc2Nyb2xsLnggPSBtdztcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zY3JvbGwueSA9IHNlbGYucmFpbC5kcmFnLnN5ICsgKGUudG91Y2hlc1swXS5jbGllbnRZIC0gc2VsZi5yYWlsLmRyYWcueSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zY3JvbGwueSA8IDApIHNlbGYuc2Nyb2xsLnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG15ID0gc2VsZi5zY3JvbGx2YWx1ZW1heDtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNjcm9sbC55ID4gbXkpIHNlbGYuc2Nyb2xsLnkgPSBteTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHNlbGYuc3luY2hlZCgndG91Y2htb3ZlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnICYmIChzZWxmLnJhaWwuZHJhZy5wdCA9PSAzKSkge1xyXG4gICAgICAgICAgICAgICAgICBzZWxmLnNob3dDdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnLmhyKSBzZWxmLmRvU2Nyb2xsTGVmdChNYXRoLnJvdW5kKHNlbGYuc2Nyb2xsLnggKiBzZWxmLnNjcm9sbHJhdGlvLngpLCBvcHQuY3Vyc29yZHJhZ3NwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgZWxzZSBzZWxmLmRvU2Nyb2xsVG9wKE1hdGgucm91bmQoc2VsZi5zY3JvbGwueSAqIHNlbGYuc2Nyb2xscmF0aW8ueSksIG9wdC5jdXJzb3JkcmFnc3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChlLCBocm9ubHkpIHtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZyAmJiBzZWxmLnJhaWwuZHJhZy5wdCAhPSAxKSByZXR1cm47XHJcbiAgICAgICAgICBpZiAoc2VsZi5yYWlsc2xvY2tlZCkgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICBzZWxmLmNhbmNlbFNjcm9sbCgpO1xyXG4gICAgICAgICAgc2VsZi5yYWlsLmRyYWcgPSB7XHJcbiAgICAgICAgICAgIHg6IGUuY2xpZW50WCxcclxuICAgICAgICAgICAgeTogZS5jbGllbnRZLFxyXG4gICAgICAgICAgICBzeDogc2VsZi5zY3JvbGwueCxcclxuICAgICAgICAgICAgc3k6IHNlbGYuc2Nyb2xsLnksXHJcbiAgICAgICAgICAgIHB0OiAxLFxyXG4gICAgICAgICAgICBocjogaHJvbmx5IHx8IGZhbHNlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdmFyIHRnID0gc2VsZi5nZXRUYXJnZXQoZSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNhcC5oYXNtb3VzZWNhcHR1cmUpIHRnLnNldENhcHR1cmUoKTtcclxuICAgICAgICAgIGlmIChzZWxmLmlzaWZyYW1lICYmICFjYXAuaGFzbW91c2VjYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2F2ZWQuY3NzcG9pbnRlcmV2ZW50cyA9IHNlbGYuZG9jLmNzcyhcInBvaW50ZXItZXZlbnRzXCIpO1xyXG4gICAgICAgICAgICBzZWxmLmNzcyhzZWxmLmRvYywge1xyXG4gICAgICAgICAgICAgIFwicG9pbnRlci1ldmVudHNcIjogXCJub25lXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzZWxmLmhhc21vdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5vbm1vdXNldXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJhaWwuZHJhZy5wdCAhPSAxKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXAuaGFzbW91c2VjYXB0dXJlKSBfZG9jLnJlbGVhc2VDYXB0dXJlKCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmlzaWZyYW1lICYmICFjYXAuaGFzbW91c2VjYXB0dXJlKSBzZWxmLmRvYy5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBzZWxmLnNhdmVkLmNzc3BvaW50ZXJldmVudHMpO1xyXG4gICAgICAgICAgICBzZWxmLnJhaWwuZHJhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmN1cnNvcmZyZWV6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNlbGYuaGFzbW92aW5nKSBzZWxmLnRyaWdnZXJTY3JvbGxFbmQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYucmFpbC5kcmFnLnB0ICE9PSAxKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FwLmlzY2hyb21lICYmIGUud2hpY2ggPT09IDApIHJldHVybiBzZWxmLm9ubW91c2V1cChlKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuY3Vyc29yZnJlZXplZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNlbGYuaGFzbW92aW5nKSBzZWxmLnRyaWdnZXJTY3JvbGxTdGFydChlLmNsaWVudFgsIGUuY2xpZW50WSwgMCwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhhc21vdmluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcuaHIpIHtcclxuICAgICAgICAgICAgICBzZWxmLnNjcm9sbC54ID0gc2VsZi5yYWlsLmRyYWcuc3ggKyAoZS5jbGllbnRYIC0gc2VsZi5yYWlsLmRyYWcueCk7XHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYuc2Nyb2xsLnggPCAwKSBzZWxmLnNjcm9sbC54ID0gMDtcclxuICAgICAgICAgICAgICB2YXIgbXcgPSBzZWxmLnNjcm9sbHZhbHVlbWF4dztcclxuICAgICAgICAgICAgICBpZiAoc2VsZi5zY3JvbGwueCA+IG13KSBzZWxmLnNjcm9sbC54ID0gbXc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5zY3JvbGwueSA9IHNlbGYucmFpbC5kcmFnLnN5ICsgKGUuY2xpZW50WSAtIHNlbGYucmFpbC5kcmFnLnkpO1xyXG4gICAgICAgICAgICAgIGlmIChzZWxmLnNjcm9sbC55IDwgMCkgc2VsZi5zY3JvbGwueSA9IDA7XHJcbiAgICAgICAgICAgICAgdmFyIG15ID0gc2VsZi5zY3JvbGx2YWx1ZW1heDtcclxuICAgICAgICAgICAgICBpZiAoc2VsZi5zY3JvbGwueSA+IG15KSBzZWxmLnNjcm9sbC55ID0gbXk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuc3luY2hlZCgnbW91c2Vtb3ZlJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICBpZiAoc2VsZi5jdXJzb3JmcmVlemVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNob3dDdXJzb3IoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsLmRyYWcuaHIpIHtcclxuICAgICAgICAgICAgICAgICAgc2VsZi5zY3JvbGxMZWZ0KE1hdGgucm91bmQoc2VsZi5zY3JvbGwueCAqIHNlbGYuc2Nyb2xscmF0aW8ueCkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgc2VsZi5zY3JvbGxUb3AoTWF0aC5yb3VuZChzZWxmLnNjcm9sbC55ICogc2VsZi5zY3JvbGxyYXRpby55KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLmNoZWNrYXJlYSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGNhcC5jYW50b3VjaCB8fCBvcHQuZW11bGF0ZXRvdWNoKSB7XHJcblxyXG4gICAgICAgICAgc2VsZi5vbnByZXZlbnRjbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnByZXZlbnRjbGljaykge1xyXG4gICAgICAgICAgICAgIHNlbGYucHJldmVudGNsaWNrLnRnLm9uY2xpY2sgPSBzZWxmLnByZXZlbnRjbGljay5jbGljaztcclxuICAgICAgICAgICAgICBzZWxmLnByZXZlbnRjbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHNlbGYub25jbGljayA9IChjYXAuaXNpb3MpID8gZmFsc2UgOiBmdW5jdGlvbiAoZSkgeyAgLy8gaXQgbmVlZHMgdG8gY2hlY2sgSUUxMSA/Pz9cclxuICAgICAgICAgICAgaWYgKHNlbGYubGFzdG1vdXNldXApIHtcclxuICAgICAgICAgICAgICBzZWxmLmxhc3Rtb3VzZXVwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgaWYgKG9wdC5ncmFiY3Vyc29yZW5hYmxlZCAmJiBjYXAuY3Vyc29yZ3JhYnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY3NzKChzZWxmLmlzcGFnZSkgPyBzZWxmLmRvYyA6IHNlbGYud2luLCB7XHJcbiAgICAgICAgICAgICAgJ2N1cnNvcic6IGNhcC5jdXJzb3JncmFidmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNlbGYuY3NzKHNlbGYucmFpbCwge1xyXG4gICAgICAgICAgICAgICdjdXJzb3InOiBjYXAuY3Vyc29yZ3JhYnZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIHZhciBjaGVja1NlbGVjdGlvblNjcm9sbCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3Rpb25kcmFnKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgIHZhciB3dyA9IHNlbGYud2luLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgdmFyIGRmID0gKGUucGFnZVkgLSBzZWxmLnNlbGVjdGlvbmRyYWcudG9wKTtcclxuICAgICAgICAgICAgICBpZiAoZGYgPiAwICYmIGRmIDwgd3cpIGRmID0gMDtcclxuICAgICAgICAgICAgICBpZiAoZGYgPj0gd3cpIGRmIC09IHd3O1xyXG4gICAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9uZHJhZy5kZiA9IGRmO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGlvbmRyYWcuZGYgPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBydCA9IC0oc2VsZi5zZWxlY3Rpb25kcmFnLmRmKjIvNil8MDtcclxuICAgICAgICAgICAgc2VsZi5kb1Njcm9sbEJ5KHJ0KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuZGVib3VuY2VkKFwiZG9zZWxlY3Rpb25zY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIGNoZWNrU2VsZWN0aW9uU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgaWYgKFwiZ2V0U2VsZWN0aW9uXCIgaW4gX2RvYykgeyAvLyBBIGdyYWRlIC0gTWFqb3IgYnJvd3NlcnNcclxuICAgICAgICAgICAgc2VsZi5oYXNUZXh0U2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChfZG9jLmdldFNlbGVjdGlvbigpLnJhbmdlQ291bnQgPiAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoXCJzZWxlY3Rpb25cIiBpbiBfZG9jKSB7IC8vSUU5LVxyXG4gICAgICAgICAgICBzZWxmLmhhc1RleHRTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKF9kb2Muc2VsZWN0aW9uLnR5cGUgIT0gXCJOb25lXCIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5oYXNUZXh0U2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7IC8vIG5vIHN1cHBvcnRcclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi5vbnNlbGVjdGlvbnN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy8gIE1vcmUgdGVzdGluZyAtIHNldmVyZSBjaHJvbWUgaXNzdWVzICAgICAgICAgICBcclxuICAgICAgICAgICAgLyogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmhhc3dyYXBwZXImJihlLndoaWNoJiZlLndoaWNoPT0yKSkgeyAgLy8gZm9vbCBicm93c2VyIHRvIG1hbmFnZSBtaWRkbGUgYnV0dG9uIHNjcm9sbGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi53aW4uY3NzKHsnb3ZlcmZsb3cnOidhdXRvJ30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLndpbi5jc3MoeydvdmVyZmxvdyc6J2hpZGRlbid9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sMTApOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHNlbGYuaXNwYWdlKSByZXR1cm47XHJcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9uZHJhZyA9IHNlbGYud2luLm9mZnNldCgpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBzZWxmLm9uc2VsZWN0aW9uZW5kID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3Rpb25kcmFnID0gZmFsc2U7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgc2VsZi5vbnNlbGVjdGlvbmRyYWcgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0aW9uZHJhZykgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5oYXNUZXh0U2VsZWN0ZWQoKSkgc2VsZi5kZWJvdW5jZWQoXCJzZWxlY3Rpb25zY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIGNoZWNrU2VsZWN0aW9uU2Nyb2xsKGUpO1xyXG4gICAgICAgICAgICB9LCAyNTApO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjYXAuaGFzdzNjdG91Y2gpIHsgLy9JRTExK1xyXG4gICAgICAgICAgc2VsZi5jc3MoKHNlbGYuaXNwYWdlKSA/ICQoXCJodG1sXCIpIDogc2VsZi53aW4sIHsgJ3RvdWNoLWFjdGlvbic6ICdub25lJyB9KTtcclxuICAgICAgICAgIHNlbGYuY3NzKHNlbGYucmFpbCwge1xyXG4gICAgICAgICAgICAndG91Y2gtYWN0aW9uJzogJ25vbmUnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHNlbGYuY3NzKHNlbGYuY3Vyc29yLCB7XHJcbiAgICAgICAgICAgICd0b3VjaC1hY3Rpb24nOiAnbm9uZSdcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYud2luLCBcInBvaW50ZXJkb3duXCIsIHNlbGYub250b3VjaHN0YXJ0KTtcclxuICAgICAgICAgIHNlbGYuYmluZChfZG9jLCBcInBvaW50ZXJ1cFwiLCBzZWxmLm9udG91Y2hlbmQpO1xyXG4gICAgICAgICAgc2VsZi5kZWxlZ2F0ZShfZG9jLCBcInBvaW50ZXJtb3ZlXCIsIHNlbGYub250b3VjaG1vdmUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2FwLmhhc21zdG91Y2gpIHsgLy9JRTEwXHJcbiAgICAgICAgICBzZWxmLmNzcygoc2VsZi5pc3BhZ2UpID8gJChcImh0bWxcIikgOiBzZWxmLndpbiwgeyAnLW1zLXRvdWNoLWFjdGlvbic6ICdub25lJyB9KTtcclxuICAgICAgICAgIHNlbGYuY3NzKHNlbGYucmFpbCwge1xyXG4gICAgICAgICAgICAnLW1zLXRvdWNoLWFjdGlvbic6ICdub25lJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzZWxmLmNzcyhzZWxmLmN1cnNvciwge1xyXG4gICAgICAgICAgICAnLW1zLXRvdWNoLWFjdGlvbic6ICdub25lJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoc2VsZi53aW4sIFwiTVNQb2ludGVyRG93blwiLCBzZWxmLm9udG91Y2hzdGFydCk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoX2RvYywgXCJNU1BvaW50ZXJVcFwiLCBzZWxmLm9udG91Y2hlbmQpO1xyXG4gICAgICAgICAgc2VsZi5kZWxlZ2F0ZShfZG9jLCBcIk1TUG9pbnRlck1vdmVcIiwgc2VsZi5vbnRvdWNobW92ZSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3IsIFwiTVNHZXN0dXJlSG9sZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLmN1cnNvciwgXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNhcC5jYW50b3VjaCkgeyAvLyBzbWFydHBob25lcy90b3VjaCBkZXZpY2VzXHJcbiAgICAgICAgICBzZWxmLmJpbmQoc2VsZi53aW4sIFwidG91Y2hzdGFydFwiLCBzZWxmLm9udG91Y2hzdGFydCwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgc2VsZi5iaW5kKF9kb2MsIFwidG91Y2hlbmRcIiwgc2VsZi5vbnRvdWNoZW5kLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBzZWxmLm9udG91Y2hlbmQsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgIHNlbGYuZGVsZWdhdGUoX2RvYywgXCJ0b3VjaG1vdmVcIiwgc2VsZi5vbnRvdWNobW92ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdC5lbXVsYXRldG91Y2gpIHtcclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLndpbiwgXCJtb3VzZWRvd25cIiwgc2VsZi5vbnRvdWNoc3RhcnQsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgIHNlbGYuYmluZChfZG9jLCBcIm1vdXNldXBcIiwgc2VsZi5vbnRvdWNoZW5kLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoX2RvYywgXCJtb3VzZW1vdmVcIiwgc2VsZi5vbnRvdWNobW92ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdC5jdXJzb3JkcmFnb250b3VjaCB8fCAoIWNhcC5jYW50b3VjaCAmJiAhb3B0LmVtdWxhdGV0b3VjaCkpIHtcclxuXHJcbiAgICAgICAgICBzZWxmLnJhaWwuY3NzKHtcclxuICAgICAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIlxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzZWxmLnJhaWxoICYmIHNlbGYucmFpbGguY3NzKHtcclxuICAgICAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIlxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgc2VsZi5qcWJpbmQoc2VsZi5yYWlsLCBcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNwYWdlICYmICFzZWxmLndpbi5pcyhcIjp2aXNpYmxlXCIpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmNhbnNob3dvbm1vdXNlZXZlbnQpIHNlbGYuc2hvd0N1cnNvcigpO1xyXG4gICAgICAgICAgICBzZWxmLnJhaWwuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2VsZi5qcWJpbmQoc2VsZi5yYWlsLCBcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnJhaWwuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcpIHNlbGYuaGlkZUN1cnNvcigpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKG9wdC5zZW5zaXRpdmVyYWlsKSB7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChzZWxmLnJhaWwsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICBzZWxmLmRvUmFpbENsaWNrKGUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5yYWlsLCBcImRibGNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5kb1JhaWxDbGljayhlLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3IsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yLCBcImRibGNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbGgpIHtcclxuICAgICAgICAgICAgc2VsZi5qcWJpbmQoc2VsZi5yYWlsaCwgXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNwYWdlICYmICFzZWxmLndpbi5pcyhcIjp2aXNpYmxlXCIpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYuY2Fuc2hvd29ubW91c2VldmVudCkgc2VsZi5zaG93Q3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgc2VsZi5yYWlsLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmpxYmluZChzZWxmLnJhaWxoLCBcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHNlbGYucmFpbC5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBpZiAoIXNlbGYucmFpbC5kcmFnKSBzZWxmLmhpZGVDdXJzb3IoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0LnNlbnNpdGl2ZXJhaWwpIHtcclxuICAgICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5yYWlsaCwgXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5kb1JhaWxDbGljayhlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgc2VsZi5iaW5kKHNlbGYucmFpbGgsIFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZG9SYWlsQ2xpY2soZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yaCwgXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3JoLCBcImRibGNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHQuY3Vyc29yZHJhZ29udG91Y2ggJiYgKHRoaXMuaXN0b3VjaGNhcGFibGUgfHwgY2FwLmNhbnRvdWNoKSkge1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yLCBcInRvdWNoc3RhcnRcIiwgc2VsZi5vbnRvdWNoc3RhcnRDdXJzb3IpO1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yLCBcInRvdWNobW92ZVwiLCBzZWxmLm9udG91Y2htb3ZlQ3Vyc29yKTtcclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLmN1cnNvciwgXCJ0b3VjaGVuZFwiLCBzZWxmLm9udG91Y2hlbmRDdXJzb3IpO1xyXG4gICAgICAgICAgc2VsZi5jdXJzb3JoICYmIHNlbGYuYmluZChzZWxmLmN1cnNvcmgsIFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBzZWxmLm9udG91Y2hzdGFydEN1cnNvcihlLCB0cnVlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2VsZi5jdXJzb3JoICYmIHNlbGYuYmluZChzZWxmLmN1cnNvcmgsIFwidG91Y2htb3ZlXCIsIHNlbGYub250b3VjaG1vdmVDdXJzb3IpO1xyXG4gICAgICAgICAgc2VsZi5jdXJzb3JoICYmIHNlbGYuYmluZChzZWxmLmN1cnNvcmgsIFwidG91Y2hlbmRcIiwgc2VsZi5vbnRvdWNoZW5kQ3Vyc29yKTtcclxuICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgaWYgKCFjYXAuY2FudG91Y2ggJiYgIW9wdC5lbXVsYXRldG91Y2gpIHtcclxuICAgICAgICBpZiAoIW9wdC5lbXVsYXRldG91Y2ggJiYgIWNhcC5pc2FuZHJvaWQgJiYgIWNhcC5pc2lvcykge1xyXG5cclxuICAgICAgICAgIHNlbGYuYmluZCgoY2FwLmhhc21vdXNlY2FwdHVyZSkgPyBzZWxmLndpbiA6IF9kb2MsIFwibW91c2V1cFwiLCBzZWxmLm9ubW91c2V1cCk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoX2RvYywgXCJtb3VzZW1vdmVcIiwgc2VsZi5vbm1vdXNlbW92ZSk7XHJcbiAgICAgICAgICBpZiAoc2VsZi5vbmNsaWNrKSBzZWxmLmJpbmQoX2RvYywgXCJjbGlja1wiLCBzZWxmLm9uY2xpY2spO1xyXG5cclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLmN1cnNvciwgXCJtb3VzZWRvd25cIiwgc2VsZi5vbm1vdXNlZG93bik7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3IsIFwibW91c2V1cFwiLCBzZWxmLm9ubW91c2V1cCk7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbGgpIHtcclxuICAgICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yaCwgXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICBzZWxmLm9ubW91c2Vkb3duKGUsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2VsZi5iaW5kKHNlbGYuY3Vyc29yaCwgXCJtb3VzZXVwXCIsIHNlbGYub25tb3VzZXVwKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIXNlbGYuaXNwYWdlICYmIG9wdC5lbmFibGVzY3JvbGxvbnNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi53aW5bMF0sIFwibW91c2Vkb3duXCIsIHNlbGYub25zZWxlY3Rpb25zdGFydCk7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChfZG9jLCBcIm1vdXNldXBcIiwgc2VsZi5vbnNlbGVjdGlvbmVuZCk7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChzZWxmLmN1cnNvciwgXCJtb3VzZXVwXCIsIHNlbGYub25zZWxlY3Rpb25lbmQpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5jdXJzb3JoKSBzZWxmLmJpbmQoc2VsZi5jdXJzb3JoLCBcIm1vdXNldXBcIiwgc2VsZi5vbnNlbGVjdGlvbmVuZCk7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChfZG9jLCBcIm1vdXNlbW92ZVwiLCBzZWxmLm9uc2VsZWN0aW9uZHJhZyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYuem9vbSkge1xyXG4gICAgICAgICAgICBzZWxmLmpxYmluZChzZWxmLnpvb20sIFwibW91c2VlbnRlclwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYuY2Fuc2hvd29ubW91c2VldmVudCkgc2VsZi5zaG93Q3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgc2VsZi5yYWlsLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmpxYmluZChzZWxmLnpvb20sIFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5yYWlsLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcpIHNlbGYuaGlkZUN1cnNvcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICBzZWxmLmJpbmQoKGNhcC5oYXNtb3VzZWNhcHR1cmUpID8gc2VsZi53aW4gOiBfZG9jLCBcIm1vdXNldXBcIiwgc2VsZi5vbnRvdWNoZW5kKTtcclxuICAgICAgICAgIGlmIChzZWxmLm9uY2xpY2spIHNlbGYuYmluZChfZG9jLCBcImNsaWNrXCIsIHNlbGYub25jbGljayk7XHJcblxyXG4gICAgICAgICAgaWYgKG9wdC5jdXJzb3JkcmFnb250b3VjaCkge1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3IsIFwibW91c2Vkb3duXCIsIHNlbGYub25tb3VzZWRvd24pO1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoc2VsZi5jdXJzb3IsIFwibW91c2V1cFwiLCBzZWxmLm9ubW91c2V1cCk7XHJcbiAgICAgICAgICAgIHNlbGYuY3Vyc29yaCAmJiBzZWxmLmJpbmQoc2VsZi5jdXJzb3JoLCBcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgIHNlbGYub25tb3VzZWRvd24oZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZWxmLmN1cnNvcmggJiYgc2VsZi5iaW5kKHNlbGYuY3Vyc29yaCwgXCJtb3VzZXVwXCIsIHNlbGYub25tb3VzZXVwKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChzZWxmLnJhaWwsIFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uIChlKSB7IGUucHJldmVudERlZmF1bHQoKTsgfSk7ICAvLyBwcmV2ZW50IHRleHQgc2VsZWN0aW9uICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzZWxmLnJhaWxoICYmIHNlbGYuYmluZChzZWxmLnJhaWxoLCBcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAob3B0LmVuYWJsZW1vdXNld2hlZWwpIHtcclxuICAgICAgICAgIGlmICghc2VsZi5pc2lmcmFtZSkgc2VsZi5tb3VzZXdoZWVsKChjYXAuaXNpZSAmJiBzZWxmLmlzcGFnZSkgPyBfZG9jIDogc2VsZi53aW4sIHNlbGYub25tb3VzZXdoZWVsKTtcclxuICAgICAgICAgIHNlbGYubW91c2V3aGVlbChzZWxmLnJhaWwsIHNlbGYub25tb3VzZXdoZWVsKTtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWxoKSBzZWxmLm1vdXNld2hlZWwoc2VsZi5yYWlsaCwgc2VsZi5vbm1vdXNld2hlZWxocik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNlbGYuaXNwYWdlICYmICFjYXAuY2FudG91Y2ggJiYgISgvSFRNTHxeQk9EWS8udGVzdChzZWxmLndpblswXS5ub2RlTmFtZSkpKSB7XHJcbiAgICAgICAgICBpZiAoIXNlbGYud2luLmF0dHIoXCJ0YWJpbmRleFwiKSkgc2VsZi53aW4uYXR0cih7XHJcbiAgICAgICAgICAgIFwidGFiaW5kZXhcIjogKyt0YWJpbmRleGNvdW50ZXJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLndpbiwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoZSkgeyAgLy8gYmV0dGVyIHVzaW5nIG5hdGl2ZSBldmVudHNcclxuICAgICAgICAgICAgZG9tZm9jdXMgPSAoc2VsZi5nZXRUYXJnZXQoZSkpLmlkIHx8IHNlbGYuZ2V0VGFyZ2V0KGUpIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmhhc2ZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHNlbGYuY2Fuc2hvd29ubW91c2VldmVudCkgc2VsZi5ub3RpY2VDdXJzb3IoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYud2luLCBcImJsdXJcIiwgZnVuY3Rpb24gKGUpIHsgIC8vICpcclxuICAgICAgICAgICAgZG9tZm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5oYXNmb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYud2luLCBcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24gKGUpIHsgICAvLyAqXHJcbiAgICAgICAgICAgIG1vdXNlZm9jdXMgPSAoc2VsZi5nZXRUYXJnZXQoZSkpLmlkIHx8IHNlbGYuZ2V0VGFyZ2V0KGUpIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmhhc21vdXNlZm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5jYW5zaG93b25tb3VzZWV2ZW50KSBzZWxmLm5vdGljZUN1cnNvcigpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzZWxmLmJpbmQoc2VsZi53aW4sIFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoZSkgeyAgIC8vICogICAgICAgXHJcbiAgICAgICAgICAgIG1vdXNlZm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5oYXNtb3VzZWZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcpIHNlbGYuaGlkZUN1cnNvcigpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vVGhhbmtzIHRvIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcgISFcclxuICAgICAgICBzZWxmLm9ua2V5cHJlc3MgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgaWYgKHNlbGYucmFpbHNsb2NrZWQgJiYgc2VsZi5wYWdlLm1heGggPT09IDApIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgIGUgPSBlIHx8IF93aW4uZXZlbnQ7XHJcbiAgICAgICAgICB2YXIgdGcgPSBzZWxmLmdldFRhcmdldChlKTtcclxuICAgICAgICAgIGlmICh0ZyAmJiAvSU5QVVR8VEVYVEFSRUF8U0VMRUNUfE9QVElPTi8udGVzdCh0Zy5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgdmFyIHRwID0gdGcuZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgdGcudHlwZSB8fCBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCghdHApIHx8ICEoL3N1Ym1pdHxidXR0b258Y2FuY2VsL2kudHApKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoJCh0ZykuYXR0cignY29udGVudGVkaXRhYmxlJykpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgIGlmIChzZWxmLmhhc2ZvY3VzIHx8IChzZWxmLmhhc21vdXNlZm9jdXMgJiYgIWRvbWZvY3VzKSB8fCAoc2VsZi5pc3BhZ2UgJiYgIWRvbWZvY3VzICYmICFtb3VzZWZvY3VzKSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gZS5rZXlDb2RlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGYucmFpbHNsb2NrZWQgJiYga2V5ICE9IDI3KSByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdHJsID0gZS5jdHJsS2V5IHx8IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgc2hpZnQgPSBlLnNoaWZ0S2V5IHx8IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgY2FzZSA2MzIzMzogLy9zYWZhcmlcclxuICAgICAgICAgICAgICAgIHNlbGYuZG9TY3JvbGxCeSgyNCAqIDMpO1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgY2FzZSA2MzIzNTogLy9zYWZhcmlcclxuICAgICAgICAgICAgICAgIHNlbGYuZG9TY3JvbGxCeSgtMjQgKiAzKTtcclxuICAgICAgICAgICAgICAgIHJldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDM3OlxyXG4gICAgICAgICAgICAgIGNhc2UgNjMyMzI6IC8vc2FmYXJpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yYWlsaCkge1xyXG4gICAgICAgICAgICAgICAgICAoY3RybCkgPyBzZWxmLmRvU2Nyb2xsTGVmdCgwKSA6IHNlbGYuZG9TY3JvbGxMZWZ0QnkoMjQgKiAzKTtcclxuICAgICAgICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgMzk6XHJcbiAgICAgICAgICAgICAgY2FzZSA2MzIzNDogLy9zYWZhcmlcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnJhaWxoKSB7XHJcbiAgICAgICAgICAgICAgICAgIChjdHJsKSA/IHNlbGYuZG9TY3JvbGxMZWZ0KHNlbGYucGFnZS5tYXh3KSA6IHNlbGYuZG9TY3JvbGxMZWZ0QnkoLTI0ICogMyk7XHJcbiAgICAgICAgICAgICAgICAgIHJldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgIGNhc2UgNjMyNzY6IC8vIHNhZmFyaVxyXG4gICAgICAgICAgICAgICAgc2VsZi5kb1Njcm9sbEJ5KHNlbGYudmlldy5oKTtcclxuICAgICAgICAgICAgICAgIHJldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDM0OlxyXG4gICAgICAgICAgICAgIGNhc2UgNjMyNzc6IC8vIHNhZmFyaVxyXG4gICAgICAgICAgICAgICAgc2VsZi5kb1Njcm9sbEJ5KC1zZWxmLnZpZXcuaCk7XHJcbiAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAzNjpcclxuICAgICAgICAgICAgICBjYXNlIDYzMjczOiAvLyBzYWZhcmkgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAoc2VsZi5yYWlsaCAmJiBjdHJsKSA/IHNlbGYuZG9TY3JvbGxQb3MoMCwgMCkgOiBzZWxmLmRvU2Nyb2xsVG8oMCk7XHJcbiAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAzNTpcclxuICAgICAgICAgICAgICBjYXNlIDYzMjc1OiAvLyBzYWZhcmlcclxuICAgICAgICAgICAgICAgIChzZWxmLnJhaWxoICYmIGN0cmwpID8gc2VsZi5kb1Njcm9sbFBvcyhzZWxmLnBhZ2UubWF4dywgc2VsZi5wYWdlLm1heGgpIDogc2VsZi5kb1Njcm9sbFRvKHNlbGYucGFnZS5tYXhoKTtcclxuICAgICAgICAgICAgICAgIHJldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zcGFjZWJhcmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgKHNoaWZ0KSA/IHNlbGYuZG9TY3JvbGxCeShzZWxmLnZpZXcuaCkgOiBzZWxmLmRvU2Nyb2xsQnkoLXNlbGYudmlldy5oKTtcclxuICAgICAgICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgMjc6IC8vIEVTQ1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuem9vbWFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICBzZWxmLmRvWm9vbSgpO1xyXG4gICAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJldCkgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdC5lbmFibGVrZXlib2FyZCkgc2VsZi5iaW5kKF9kb2MsIChjYXAuaXNvcGVyYSAmJiAhY2FwLmlzb3BlcmExMikgPyBcImtleXByZXNzXCIgOiBcImtleWRvd25cIiwgc2VsZi5vbmtleXByZXNzKTtcclxuXHJcbiAgICAgICAgc2VsZi5iaW5kKF9kb2MsIFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgdmFyIGN0cmwgPSBlLmN0cmxLZXkgfHwgZmFsc2U7XHJcbiAgICAgICAgICBpZiAoY3RybCkgc2VsZi53aGVlbHByZXZlbnRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5iaW5kKF9kb2MsIFwia2V5dXBcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIHZhciBjdHJsID0gZS5jdHJsS2V5IHx8IGZhbHNlO1xyXG4gICAgICAgICAgaWYgKCFjdHJsKSBzZWxmLndoZWVscHJldmVudGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5iaW5kKF93aW4sIFwiYmx1clwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgc2VsZi53aGVlbHByZXZlbnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLmJpbmQoX3dpbiwgJ3Jlc2l6ZScsIHNlbGYub25zY3JlZW5yZXNpemUpO1xyXG4gICAgICAgIHNlbGYuYmluZChfd2luLCAnb3JpZW50YXRpb25jaGFuZ2UnLCBzZWxmLm9uc2NyZWVucmVzaXplKTtcclxuXHJcbiAgICAgICAgc2VsZi5iaW5kKF93aW4sIFwibG9hZFwiLCBzZWxmLmxhenlSZXNpemUpO1xyXG5cclxuICAgICAgICBpZiAoY2FwLmlzY2hyb21lICYmICFzZWxmLmlzcGFnZSAmJiAhc2VsZi5oYXN3cmFwcGVyKSB7IC8vY2hyb21lIHZvaWQgc2Nyb2xsYmFyIGJ1ZyAtIGl0IHBlcnNpc3RzIGluIHZlcnNpb24gMjZcclxuICAgICAgICAgIHZhciB0bXAgPSBzZWxmLndpbi5hdHRyKFwic3R5bGVcIik7XHJcbiAgICAgICAgICB2YXIgd3cgPSBwYXJzZUZsb2F0KHNlbGYud2luLmNzcyhcIndpZHRoXCIpKSArIDE7XHJcbiAgICAgICAgICBzZWxmLndpbi5jc3MoJ3dpZHRoJywgd3cpO1xyXG4gICAgICAgICAgc2VsZi5zeW5jaGVkKFwiY2hyb21lZml4XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi53aW4uYXR0cihcInN0eWxlXCIsIHRtcCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBUcnlpbmcgYSBjcm9zcy1icm93c2VyIGltcGxlbWVudGF0aW9uIC0gZ29vZCBsdWNrIVxyXG5cclxuICAgICAgICBzZWxmLm9uQXR0cmlidXRlQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIHNlbGYubGF6eVJlc2l6ZShzZWxmLmlzaWVvbGQgPyAyNTAgOiAzMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdC5lbmFibGVvYnNlcnZlcikge1xyXG5cclxuICAgICAgICAgIGlmICgoIXNlbGYuaXNpZTExKSAmJiAoQ2xzTXV0YXRpb25PYnNlcnZlciAhPT0gZmFsc2UpKSB7ICAvLyBJRTExIGNyYXNoZXMgICM1NjhcclxuICAgICAgICAgICAgc2VsZi5vYnNlcnZlcmJvZHkgPSBuZXcgQ2xzTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG11dC50eXBlID09IFwiYXR0cmlidXRlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoJGJvZHkuaGFzQ2xhc3MoXCJtb2RhbC1vcGVuXCIpICYmICRib2R5Lmhhc0NsYXNzKFwibW9kYWwtZGlhbG9nXCIpICYmICEkLmNvbnRhaW5zKCQoJy5tb2RhbC1kaWFsb2cnKVswXSwgc2VsZi5kb2NbMF0pKSA/IHNlbGYuaGlkZSgpIDogc2VsZi5zaG93KCk7ICAvLyBTdXBwb3J0IGZvciBCb290c3RyYXAgbW9kYWw7IEFkZGVkIGNoZWNrIGlmIHRoZSBuaWNlIHNjcm9sbCBlbGVtZW50IGlzIGluc2lkZSBhIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgaWYgKHNlbGYubWUuY2xpZW50V2lkdGggIT0gc2VsZi5wYWdlLndpZHRoIHx8IHNlbGYubWUuY2xpZW50SGVpZ2h0ICE9IHNlbGYucGFnZS5oZWlnaHQpIHJldHVybiBzZWxmLmxhenlSZXNpemUoMzApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2VsZi5vYnNlcnZlcmJvZHkub2JzZXJ2ZShfZG9jLmJvZHksIHtcclxuICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiBmYWxzZSxcclxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydjbGFzcyddXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICghc2VsZi5pc3BhZ2UgJiYgIXNlbGYuaGFzd3JhcHBlcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIF9kb20gPSBzZWxmLndpblswXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlZGVzaWduZWQgTXV0YXRpb25PYnNlcnZlciBmb3IgQ2hyb21lMTgrL0ZpcmVmb3gxNCsvaU9TNisgd2l0aCBzdXBwb3J0IGZvcjogcmVtb3ZlIGRpdiwgYWRkL3JlbW92ZSBjb250ZW50XHJcbiAgICAgICAgICAgIGlmIChDbHNNdXRhdGlvbk9ic2VydmVyICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgIHNlbGYub2JzZXJ2ZXIgPSBuZXcgQ2xzTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChzZWxmLm9uQXR0cmlidXRlQ2hhbmdlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBzZWxmLm9ic2VydmVyLm9ic2VydmUoX2RvbSwge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogZmFsc2VcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBzZWxmLm9ic2VydmVycmVtb3ZlciA9IG5ldyBDbHNNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtbykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAobW8ucmVtb3ZlZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkZCBpbiBtby5yZW1vdmVkTm9kZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmICghIXNlbGYgJiYgKG1vLnJlbW92ZWROb2Rlc1tkZF0gPT09IF9kb20pKSByZXR1cm4gc2VsZi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHNlbGYub2JzZXJ2ZXJyZW1vdmVyLm9ic2VydmUoX2RvbS5wYXJlbnROb2RlLCB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogZmFsc2VcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzZWxmLmJpbmQoX2RvbSwgKGNhcC5pc2llICYmICFjYXAuaXNpZTkpID8gXCJwcm9wZXJ0eWNoYW5nZVwiIDogXCJET01BdHRyTW9kaWZpZWRcIiwgc2VsZi5vbkF0dHJpYnV0ZUNoYW5nZSk7XHJcbiAgICAgICAgICAgICAgaWYgKGNhcC5pc2llOSkgX2RvbS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgc2VsZi5vbkF0dHJpYnV0ZUNoYW5nZSk7IC8vSUU5IERPTUF0dHJNb2RpZmllZCBidWdcclxuICAgICAgICAgICAgICBzZWxmLmJpbmQoX2RvbSwgXCJET01Ob2RlUmVtb3ZlZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfZG9tKSBzZWxmLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuXHJcbiAgICAgICAgaWYgKCFzZWxmLmlzcGFnZSAmJiBvcHQuYm94em9vbSkgc2VsZi5iaW5kKF93aW4sIFwicmVzaXplXCIsIHNlbGYucmVzaXplWm9vbSk7XHJcbiAgICAgICAgaWYgKHNlbGYuaXN0ZXh0YXJlYSkge1xyXG4gICAgICAgICAgc2VsZi5iaW5kKHNlbGYud2luLCBcImtleWRvd25cIiwgc2VsZi5sYXp5UmVzaXplKTtcclxuICAgICAgICAgIHNlbGYuYmluZChzZWxmLndpbiwgXCJtb3VzZXVwXCIsIHNlbGYubGF6eVJlc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmxhenlSZXNpemUoMzApO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuZG9jWzBdLm5vZGVOYW1lID09ICdJRlJBTUUnKSB7XHJcbiAgICAgICAgdmFyIG9uaWZyYW1lbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYuaWZyYW1leGQgPSBmYWxzZTtcclxuICAgICAgICAgIHZhciBkb2M7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBkb2MgPSAnY29udGVudERvY3VtZW50JyBpbiB0aGlzID8gdGhpcy5jb250ZW50RG9jdW1lbnQgOiB0aGlzLmNvbnRlbnRXaW5kb3cuX2RvYztcclxuICAgICAgICAgICAgdmFyIGEgPSBkb2MuZG9tYWluO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBzZWxmLmlmcmFtZXhkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZG9jID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYuaWZyYW1leGQpIHtcclxuICAgICAgICAgICAgaWYgKFwiY29uc29sZVwiIGluIF93aW4pIGNvbnNvbGUubG9nKCdOaWNlU2Nyb2xsIGVycm9yOiBwb2xpY3kgcmVzdHJpY2VkIGlmcmFtZScpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy9jcm9zcy1kb21haW4gLSBJIGNhbid0IG1hbmFnZSB0aGlzICAgICAgICBcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZWxmLmZvcmNlc2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5pc2lmcmFtZSkge1xyXG4gICAgICAgICAgICBzZWxmLmlmcmFtZSA9IHtcclxuICAgICAgICAgICAgICBcImRvY1wiOiAkKGRvYyksXHJcbiAgICAgICAgICAgICAgXCJodG1sXCI6IHNlbGYuZG9jLmNvbnRlbnRzKCkuZmluZCgnaHRtbCcpWzBdLFxyXG4gICAgICAgICAgICAgIFwiYm9keVwiOiBzZWxmLmRvYy5jb250ZW50cygpLmZpbmQoJ2JvZHknKVswXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLmdldENvbnRlbnRTaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB3OiBNYXRoLm1heChzZWxmLmlmcmFtZS5odG1sLnNjcm9sbFdpZHRoLCBzZWxmLmlmcmFtZS5ib2R5LnNjcm9sbFdpZHRoKSxcclxuICAgICAgICAgICAgICAgIGg6IE1hdGgubWF4KHNlbGYuaWZyYW1lLmh0bWwuc2Nyb2xsSGVpZ2h0LCBzZWxmLmlmcmFtZS5ib2R5LnNjcm9sbEhlaWdodClcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLmRvY3Njcm9sbCA9ICQoc2VsZi5pZnJhbWUuYm9keSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCFjYXAuaXNpb3MgJiYgb3B0LmlmcmFtZWF1dG9yZXNpemUgJiYgIXNlbGYuaXNpZnJhbWUpIHtcclxuICAgICAgICAgICAgc2VsZi53aW4uc2Nyb2xsVG9wKDApOyAvLyByZXNldCBwb3NpdGlvblxyXG4gICAgICAgICAgICBzZWxmLmRvYy5oZWlnaHQoXCJcIik7IC8vcmVzZXQgaGVpZ2h0IHRvIGZpeCBicm93c2VyIGJ1Z1xyXG4gICAgICAgICAgICB2YXIgaGggPSBNYXRoLm1heChkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5zY3JvbGxIZWlnaHQsIGRvYy5ib2R5LnNjcm9sbEhlaWdodCk7XHJcbiAgICAgICAgICAgIHNlbGYuZG9jLmhlaWdodChoaCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzZWxmLmxhenlSZXNpemUoMzApO1xyXG5cclxuICAgICAgICAgIHNlbGYuY3NzKCQoc2VsZi5pZnJhbWUuYm9keSksIF9zY3JvbGx5aGlkZGVuKTtcclxuXHJcbiAgICAgICAgICBpZiAoY2FwLmlzaW9zICYmIHNlbGYuaGFzd3JhcHBlcikge1xyXG4gICAgICAgICAgICBzZWxmLmNzcygkKGRvYy5ib2R5KSwge1xyXG4gICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGUzZCgwLDAsMCknXHJcbiAgICAgICAgICAgIH0pOyAvLyBhdm9pZCBpRnJhbWUgY29udGVudCBjbGlwcGluZyAtIHRoYW5rcyB0byBodHRwOi8vYmxvZy5kZXJyYWFiLmNvbS8yMDEyLzA0LzAyL2F2b2lkLWlmcmFtZS1jb250ZW50LWNsaXBwaW5nLXdpdGgtY3NzLXRyYW5zZm9ybS1vbi1pb3MvXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCdjb250ZW50V2luZG93JyBpbiB0aGlzKSB7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZCh0aGlzLmNvbnRlbnRXaW5kb3csIFwic2Nyb2xsXCIsIHNlbGYub25zY3JvbGwpOyAvL0lFOCAmIG1pbm9yXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoZG9jLCBcInNjcm9sbFwiLCBzZWxmLm9uc2Nyb2xsKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAob3B0LmVuYWJsZW1vdXNld2hlZWwpIHtcclxuICAgICAgICAgICAgc2VsZi5tb3VzZXdoZWVsKGRvYywgc2VsZi5vbm1vdXNld2hlZWwpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChvcHQuZW5hYmxla2V5Ym9hcmQpIHNlbGYuYmluZChkb2MsIChjYXAuaXNvcGVyYSkgPyBcImtleXByZXNzXCIgOiBcImtleWRvd25cIiwgc2VsZi5vbmtleXByZXNzKTtcclxuXHJcbiAgICAgICAgICBpZiAoY2FwLmNhbnRvdWNoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChkb2MsIFwidG91Y2hzdGFydFwiLCBzZWxmLm9udG91Y2hzdGFydCk7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChkb2MsIFwidG91Y2htb3ZlXCIsIHNlbGYub250b3VjaG1vdmUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZiAob3B0LmVtdWxhdGV0b3VjaCkge1xyXG4gICAgICAgICAgICBzZWxmLmJpbmQoZG9jLCBcIm1vdXNlZG93blwiLCBzZWxmLm9udG91Y2hzdGFydCk7XHJcbiAgICAgICAgICAgIHNlbGYuYmluZChkb2MsIFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYub250b3VjaG1vdmUoZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAob3B0LmdyYWJjdXJzb3JlbmFibGVkICYmIGNhcC5jdXJzb3JncmFidmFsdWUpIHNlbGYuY3NzKCQoZG9jLmJvZHkpLCB7XHJcbiAgICAgICAgICAgICAgJ2N1cnNvcic6IGNhcC5jdXJzb3JncmFidmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi5iaW5kKGRvYywgXCJtb3VzZXVwXCIsIHNlbGYub250b3VjaGVuZCk7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYuem9vbSkge1xyXG4gICAgICAgICAgICBpZiAob3B0LmRibGNsaWNrem9vbSkgc2VsZi5iaW5kKGRvYywgJ2RibGNsaWNrJywgc2VsZi5kb1pvb20pO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5vbmdlc3R1cmV6b29tKSBzZWxmLmJpbmQoZG9jLCBcImdlc3R1cmVlbmRcIiwgc2VsZi5vbmdlc3R1cmV6b29tKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kb2NbMF0ucmVhZHlTdGF0ZSAmJiB0aGlzLmRvY1swXS5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcclxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvbmlmcmFtZWxvYWQuY2FsbChzZWxmLmRvY1swXSwgZmFsc2UpO1xyXG4gICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5iaW5kKHRoaXMuZG9jLCBcImxvYWRcIiwgb25pZnJhbWVsb2FkKTtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2hvd0N1cnNvciA9IGZ1bmN0aW9uIChweSwgcHgpIHtcclxuICAgICAgaWYgKHNlbGYuY3Vyc29ydGltZW91dCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChzZWxmLmN1cnNvcnRpbWVvdXQpO1xyXG4gICAgICAgIHNlbGYuY3Vyc29ydGltZW91dCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFzZWxmLnJhaWwpIHJldHVybjtcclxuICAgICAgaWYgKHNlbGYuYXV0b2hpZGVkb20pIHtcclxuICAgICAgICBzZWxmLmF1dG9oaWRlZG9tLnN0b3AoKS5jc3Moe1xyXG4gICAgICAgICAgb3BhY2l0eTogb3B0LmN1cnNvcm9wYWNpdHltYXhcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZWxmLmN1cnNvcmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghc2VsZi5yYWlsLmRyYWcgfHwgc2VsZi5yYWlsLmRyYWcucHQgIT0gMSkge1xyXG4gICAgICAgIGlmIChweSAhPT0gdW5kZWZpbmVkICYmIHB5ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgc2VsZi5zY3JvbGwueSA9IChweSAvIHNlbGYuc2Nyb2xscmF0aW8ueSkgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgc2VsZi5zY3JvbGwueCA9IChweCAvIHNlbGYuc2Nyb2xscmF0aW8ueCkgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5jdXJzb3IuY3NzKHtcclxuICAgICAgICBoZWlnaHQ6IHNlbGYuY3Vyc29yaGVpZ2h0LFxyXG4gICAgICAgIHRvcDogc2VsZi5zY3JvbGwueVxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHNlbGYuY3Vyc29yaCkge1xyXG4gICAgICAgIHZhciBseCA9IChzZWxmLmhhc3JldmVyc2VocikgPyBzZWxmLnNjcm9sbHZhbHVlbWF4dyAtIHNlbGYuc2Nyb2xsLnggOiBzZWxmLnNjcm9sbC54O1xyXG4gICAgICAgIHNlbGYuY3Vyc29yaC5jc3Moe1xyXG4gICAgICAgICAgd2lkdGg6IHNlbGYuY3Vyc29yd2lkdGgsXHJcbiAgICAgICAgICBsZWZ0OiAoIXNlbGYucmFpbC5hbGlnbiAmJiBzZWxmLnJhaWwudmlzaWJpbGl0eSkgPyBseCArIHNlbGYucmFpbC53aWR0aCA6IGx4XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5jdXJzb3JhY3RpdmUgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2VsZi56b29tKSBzZWxmLnpvb20uc3RvcCgpLmNzcyh7XHJcbiAgICAgICAgb3BhY2l0eTogb3B0LmN1cnNvcm9wYWNpdHltYXhcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGlkZUN1cnNvciA9IGZ1bmN0aW9uICh0bSkge1xyXG4gICAgICBpZiAoc2VsZi5jdXJzb3J0aW1lb3V0KSByZXR1cm47XHJcbiAgICAgIGlmICghc2VsZi5yYWlsKSByZXR1cm47XHJcbiAgICAgIGlmICghc2VsZi5hdXRvaGlkZWRvbSkgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaGFzbW91c2Vmb2N1cyAmJiBvcHQuYXV0b2hpZGVtb2RlID09PSBcImxlYXZlXCIpIHJldHVybjtcclxuICAgICAgc2VsZi5jdXJzb3J0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCFzZWxmLnJhaWwuYWN0aXZlIHx8ICFzZWxmLnNob3dvbm1vdXNlZXZlbnQpIHtcclxuICAgICAgICAgIHNlbGYuYXV0b2hpZGVkb20uc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHQuY3Vyc29yb3BhY2l0eW1pblxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZiAoc2VsZi56b29tKSBzZWxmLnpvb20uc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHQuY3Vyc29yb3BhY2l0eW1pblxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzZWxmLmN1cnNvcmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLmN1cnNvcnRpbWVvdXQgPSAwO1xyXG4gICAgICB9LCB0bSB8fCBvcHQuaGlkZWN1cnNvcmRlbGF5KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5ub3RpY2VDdXJzb3IgPSBmdW5jdGlvbiAodG0sIHB5LCBweCkge1xyXG4gICAgICBzZWxmLnNob3dDdXJzb3IocHksIHB4KTtcclxuICAgICAgaWYgKCFzZWxmLnJhaWwuYWN0aXZlKSBzZWxmLmhpZGVDdXJzb3IodG0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldENvbnRlbnRTaXplID1cclxuICAgICAgKHNlbGYuaXNwYWdlKSA/XHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdzogTWF0aC5tYXgoX2RvYy5ib2R5LnNjcm9sbFdpZHRoLCBfZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCksXHJcbiAgICAgICAgICAgIGg6IE1hdGgubWF4KF9kb2MuYm9keS5zY3JvbGxIZWlnaHQsIF9kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSA6IChzZWxmLmhhc3dyYXBwZXIpID9cclxuICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICB3OiBzZWxmLmRvY1swXS5vZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgICBoOiBzZWxmLmRvY1swXS5vZmZzZXRIZWlnaHRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgdzogc2VsZi5kb2NzY3JvbGxbMF0uc2Nyb2xsV2lkdGgsXHJcbiAgICAgICAgICAgICAgaDogc2VsZi5kb2NzY3JvbGxbMF0uc2Nyb2xsSGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgIHRoaXMub25SZXNpemUgPSBmdW5jdGlvbiAoZSwgcGFnZSkge1xyXG5cclxuICAgICAgaWYgKCFzZWxmIHx8ICFzZWxmLndpbikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgdmFyIHByZW1heGggPSBzZWxmLnBhZ2UubWF4aCxcclxuICAgICAgICAgIHByZW1heHcgPSBzZWxmLnBhZ2UubWF4dyxcclxuICAgICAgICAgIHByZXZpZXdoID0gc2VsZi52aWV3LmgsXHJcbiAgICAgICAgICBwcmV2aWV3dyA9IHNlbGYudmlldy53O1xyXG5cclxuICAgICAgc2VsZi52aWV3ID0ge1xyXG4gICAgICAgIHc6IChzZWxmLmlzcGFnZSkgPyBzZWxmLndpbi53aWR0aCgpIDogc2VsZi53aW5bMF0uY2xpZW50V2lkdGgsXHJcbiAgICAgICAgaDogKHNlbGYuaXNwYWdlKSA/IHNlbGYud2luLmhlaWdodCgpIDogc2VsZi53aW5bMF0uY2xpZW50SGVpZ2h0XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzZWxmLnBhZ2UgPSAocGFnZSkgPyBwYWdlIDogc2VsZi5nZXRDb250ZW50U2l6ZSgpO1xyXG5cclxuICAgICAgc2VsZi5wYWdlLm1heGggPSBNYXRoLm1heCgwLCBzZWxmLnBhZ2UuaCAtIHNlbGYudmlldy5oKTtcclxuICAgICAgc2VsZi5wYWdlLm1heHcgPSBNYXRoLm1heCgwLCBzZWxmLnBhZ2UudyAtIHNlbGYudmlldy53KTtcclxuXHJcbiAgICAgIGlmICgoc2VsZi5wYWdlLm1heGggPT0gcHJlbWF4aCkgJiYgKHNlbGYucGFnZS5tYXh3ID09IHByZW1heHcpICYmIChzZWxmLnZpZXcudyA9PSBwcmV2aWV3dykgJiYgKHNlbGYudmlldy5oID09IHByZXZpZXdoKSkge1xyXG4gICAgICAgIC8vIHRlc3QgcG9zaXRpb24gICAgICAgIFxyXG4gICAgICAgIGlmICghc2VsZi5pc3BhZ2UpIHtcclxuICAgICAgICAgIHZhciBwb3MgPSBzZWxmLndpbi5vZmZzZXQoKTtcclxuICAgICAgICAgIGlmIChzZWxmLmxhc3Rwb3NpdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbHN0ID0gc2VsZi5sYXN0cG9zaXRpb247XHJcbiAgICAgICAgICAgIGlmICgobHN0LnRvcCA9PSBwb3MudG9wKSAmJiAobHN0LmxlZnQgPT0gcG9zLmxlZnQpKSByZXR1cm4gc2VsZjsgLy9ub3RoaW5nIHRvIGRvICAgICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzZWxmLmxhc3Rwb3NpdGlvbiA9IHBvcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHNlbGY7IC8vbm90aGluZyB0byBkb1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNlbGYucGFnZS5tYXhoID09PSAwKSB7XHJcbiAgICAgICAgc2VsZi5oaWRlUmFpbCgpO1xyXG4gICAgICAgIHNlbGYuc2Nyb2xsdmFsdWVtYXggPSAwO1xyXG4gICAgICAgIHNlbGYuc2Nyb2xsLnkgPSAwO1xyXG4gICAgICAgIHNlbGYuc2Nyb2xscmF0aW8ueSA9IDA7XHJcbiAgICAgICAgc2VsZi5jdXJzb3JoZWlnaHQgPSAwO1xyXG4gICAgICAgIHNlbGYuc2V0U2Nyb2xsVG9wKDApO1xyXG4gICAgICAgIGlmIChzZWxmLnJhaWwpIHNlbGYucmFpbC5zY3JvbGxhYmxlID0gZmFsc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi5wYWdlLm1heGggLT0gKG9wdC5yYWlscGFkZGluZy50b3AgKyBvcHQucmFpbHBhZGRpbmcuYm90dG9tKTtcclxuICAgICAgICBzZWxmLnJhaWwuc2Nyb2xsYWJsZSA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzZWxmLnBhZ2UubWF4dyA9PT0gMCkge1xyXG4gICAgICAgIHNlbGYuaGlkZVJhaWxIcigpO1xyXG4gICAgICAgIHNlbGYuc2Nyb2xsdmFsdWVtYXh3ID0gMDtcclxuICAgICAgICBzZWxmLnNjcm9sbC54ID0gMDtcclxuICAgICAgICBzZWxmLnNjcm9sbHJhdGlvLnggPSAwO1xyXG4gICAgICAgIHNlbGYuY3Vyc29yd2lkdGggPSAwO1xyXG4gICAgICAgIHNlbGYuc2V0U2Nyb2xsTGVmdCgwKTtcclxuICAgICAgICBpZiAoc2VsZi5yYWlsaCkge1xyXG4gICAgICAgICAgc2VsZi5yYWlsaC5zY3JvbGxhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYucGFnZS5tYXh3IC09IChvcHQucmFpbHBhZGRpbmcubGVmdCArIG9wdC5yYWlscGFkZGluZy5yaWdodCk7XHJcbiAgICAgICAgaWYgKHNlbGYucmFpbGgpIHNlbGYucmFpbGguc2Nyb2xsYWJsZSA9IChvcHQuaG9yaXpyYWlsZW5hYmxlZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYucmFpbHNsb2NrZWQgPSAoc2VsZi5sb2NrZWQpIHx8ICgoc2VsZi5wYWdlLm1heGggPT09IDApICYmIChzZWxmLnBhZ2UubWF4dyA9PT0gMCkpO1xyXG4gICAgICBpZiAoc2VsZi5yYWlsc2xvY2tlZCkge1xyXG4gICAgICAgIGlmICghc2VsZi5pc3BhZ2UpIHNlbGYudXBkYXRlU2Nyb2xsQmFyKHNlbGYudmlldyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXNlbGYuaGlkZGVuKSB7XHJcbiAgICAgICAgaWYgKCFzZWxmLnJhaWwudmlzaWJpbGl0eSkgc2VsZi5zaG93UmFpbCgpO1xyXG4gICAgICAgIGlmIChzZWxmLnJhaWxoICYmICFzZWxmLnJhaWxoLnZpc2liaWxpdHkpIHNlbGYuc2hvd1JhaWxIcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc3RleHRhcmVhICYmIHNlbGYud2luLmNzcygncmVzaXplJykgJiYgc2VsZi53aW4uY3NzKCdyZXNpemUnKSAhPSAnbm9uZScpIHNlbGYudmlldy5oIC09IDIwO1xyXG5cclxuICAgICAgc2VsZi5jdXJzb3JoZWlnaHQgPSBNYXRoLm1pbihzZWxmLnZpZXcuaCwgTWF0aC5yb3VuZChzZWxmLnZpZXcuaCAqIChzZWxmLnZpZXcuaCAvIHNlbGYucGFnZS5oKSkpO1xyXG4gICAgICBzZWxmLmN1cnNvcmhlaWdodCA9IChvcHQuY3Vyc29yZml4ZWRoZWlnaHQpID8gb3B0LmN1cnNvcmZpeGVkaGVpZ2h0IDogTWF0aC5tYXgob3B0LmN1cnNvcm1pbmhlaWdodCwgc2VsZi5jdXJzb3JoZWlnaHQpO1xyXG5cclxuICAgICAgc2VsZi5jdXJzb3J3aWR0aCA9IE1hdGgubWluKHNlbGYudmlldy53LCBNYXRoLnJvdW5kKHNlbGYudmlldy53ICogKHNlbGYudmlldy53IC8gc2VsZi5wYWdlLncpKSk7XHJcbiAgICAgIHNlbGYuY3Vyc29yd2lkdGggPSAob3B0LmN1cnNvcmZpeGVkaGVpZ2h0KSA/IG9wdC5jdXJzb3JmaXhlZGhlaWdodCA6IE1hdGgubWF4KG9wdC5jdXJzb3JtaW5oZWlnaHQsIHNlbGYuY3Vyc29yd2lkdGgpO1xyXG5cclxuICAgICAgc2VsZi5zY3JvbGx2YWx1ZW1heCA9IHNlbGYudmlldy5oIC0gc2VsZi5jdXJzb3JoZWlnaHQgLSAob3B0LnJhaWxwYWRkaW5nLnRvcCArIG9wdC5yYWlscGFkZGluZy5ib3R0b20pO1xyXG4gICAgICBpZiAoIXNlbGYuaGFzYm9yZGVyYm94KSBzZWxmLnNjcm9sbHZhbHVlbWF4IC09IHNlbGYuY3Vyc29yWzBdLm9mZnNldEhlaWdodCAtIHNlbGYuY3Vyc29yWzBdLmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAgIGlmIChzZWxmLnJhaWxoKSB7XHJcbiAgICAgICAgc2VsZi5yYWlsaC53aWR0aCA9IChzZWxmLnBhZ2UubWF4aCA+IDApID8gKHNlbGYudmlldy53IC0gc2VsZi5yYWlsLndpZHRoKSA6IHNlbGYudmlldy53O1xyXG4gICAgICAgIHNlbGYuc2Nyb2xsdmFsdWVtYXh3ID0gc2VsZi5yYWlsaC53aWR0aCAtIHNlbGYuY3Vyc29yd2lkdGggLSAob3B0LnJhaWxwYWRkaW5nLmxlZnQgKyBvcHQucmFpbHBhZGRpbmcucmlnaHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXNlbGYuaXNwYWdlKSBzZWxmLnVwZGF0ZVNjcm9sbEJhcihzZWxmLnZpZXcpO1xyXG5cclxuICAgICAgc2VsZi5zY3JvbGxyYXRpbyA9IHtcclxuICAgICAgICB4OiAoc2VsZi5wYWdlLm1heHcgLyBzZWxmLnNjcm9sbHZhbHVlbWF4dyksXHJcbiAgICAgICAgeTogKHNlbGYucGFnZS5tYXhoIC8gc2VsZi5zY3JvbGx2YWx1ZW1heClcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBzeSA9IHNlbGYuZ2V0U2Nyb2xsVG9wKCk7XHJcbiAgICAgIGlmIChzeSA+IHNlbGYucGFnZS5tYXhoKSB7XHJcbiAgICAgICAgc2VsZi5kb1Njcm9sbFRvcChzZWxmLnBhZ2UubWF4aCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi5zY3JvbGwueSA9IChzZWxmLmdldFNjcm9sbFRvcCgpIC8gc2VsZi5zY3JvbGxyYXRpby55KSB8IDA7XHJcbiAgICAgICAgc2VsZi5zY3JvbGwueCA9IChzZWxmLmdldFNjcm9sbExlZnQoKSAvIHNlbGYuc2Nyb2xscmF0aW8ueCkgfCAwO1xyXG4gICAgICAgIGlmIChzZWxmLmN1cnNvcmFjdGl2ZSkgc2VsZi5ub3RpY2VDdXJzb3IoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNlbGYuc2Nyb2xsLnkgJiYgKHNlbGYuZ2V0U2Nyb2xsVG9wKCkgPT09IDApKSBzZWxmLmRvU2Nyb2xsVG8oKHNlbGYuc2Nyb2xsLnkgKiBzZWxmLnNjcm9sbHJhdGlvLnkpfDApO1xyXG5cclxuICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVzaXplID0gc2VsZi5vblJlc2l6ZTtcclxuXHJcbiAgICB2YXIgaGxhenlyZXNpemUgPSAwO1xyXG5cclxuICAgIHRoaXMub25zY3JlZW5yZXNpemUgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChobGF6eXJlc2l6ZSk7XHJcblxyXG4gICAgICB2YXIgaGlkZXJhaWxzID0gKCFzZWxmLmlzcGFnZSAmJiAhc2VsZi5oYXN3cmFwcGVyKTtcclxuICAgICAgaWYgKGhpZGVyYWlscykgc2VsZi5oaWRlUmFpbHMoKTtcclxuXHJcbiAgICAgIGhsYXp5cmVzaXplID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHNlbGYpIHtcclxuICAgICAgICAgIGlmIChoaWRlcmFpbHMpIHNlbGYuc2hvd1JhaWxzKCk7XHJcbiAgICAgICAgICBzZWxmLnJlc2l6ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBobGF6eXJlc2l6ZT0wO1xyXG4gICAgICB9LCAxMjApO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmxhenlSZXNpemUgPSBmdW5jdGlvbiAodG0pIHsgLy8gZXZlbnQgZGVib3VuY2VcclxuXHJcbiAgICAgIGNsZWFyVGltZW91dChobGF6eXJlc2l6ZSk7XHJcblxyXG4gICAgICB0bSA9IGlzTmFOKHRtKSA/IDI0MCA6IHRtO1xyXG5cclxuICAgICAgaGxhenlyZXNpemUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmICYmIHNlbGYucmVzaXplKCk7XHJcbiAgICAgICAgaGxhenlyZXNpemU9MDtcclxuICAgICAgfSwgdG0pO1xyXG5cclxuICAgICAgcmV0dXJuIHNlbGY7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBkZXJpdmVkIGJ5IE1ETiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9Nb3ppbGxhX2V2ZW50X3JlZmVyZW5jZS93aGVlbFxyXG4gICAgZnVuY3Rpb24gX21vZGVybldoZWVsRXZlbnQoZG9tLCBuYW1lLCBmbiwgYnViYmxlKSB7XHJcbiAgICAgIHNlbGYuX2JpbmQoZG9tLCBuYW1lLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IF93aW4uZXZlbnQ7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xyXG4gICAgICAgICAgb3JpZ2luYWw6IGUsXHJcbiAgICAgICAgICB0YXJnZXQ6IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcclxuICAgICAgICAgIHR5cGU6IFwid2hlZWxcIixcclxuICAgICAgICAgIGRlbHRhTW9kZTogZS50eXBlID09IFwiTW96TW91c2VQaXhlbFNjcm9sbFwiID8gMCA6IDEsXHJcbiAgICAgICAgICBkZWx0YVg6IDAsXHJcbiAgICAgICAgICBkZWx0YVo6IDAsXHJcbiAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0ID8gZS5wcmV2ZW50RGVmYXVsdCgpIDogZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIChlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikgPyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIDogZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChuYW1lID09IFwibW91c2V3aGVlbFwiKSB7XHJcbiAgICAgICAgICBlLndoZWVsRGVsdGFYICYmIChldmVudC5kZWx0YVggPSAtMSAvIDQwICogZS53aGVlbERlbHRhWCk7XHJcbiAgICAgICAgICBlLndoZWVsRGVsdGFZICYmIChldmVudC5kZWx0YVkgPSAtMSAvIDQwICogZS53aGVlbERlbHRhWSk7XHJcbiAgICAgICAgICAhZXZlbnQuZGVsdGFZICYmICFldmVudC5kZWx0YVggJiYgKGV2ZW50LmRlbHRhWSA9IC0xIC8gNDAgKiBlLndoZWVsRGVsdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBldmVudC5kZWx0YVkgPSBlLmRldGFpbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmbi5jYWxsKGRvbSwgZXZlbnQpO1xyXG4gICAgICB9LCBidWJibGUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgdGhpcy5qcWJpbmQgPSBmdW5jdGlvbiAoZG9tLCBuYW1lLCBmbikgeyAvLyB1c2UganF1ZXJ5IGJpbmQgZm9yIG5vbi1uYXRpdmUgZXZlbnRzIChtb3VzZWVudGVyL21vdXNlbGVhdmUpXHJcbiAgICAgIHNlbGYuZXZlbnRzLnB1c2goe1xyXG4gICAgICAgIGU6IGRvbSxcclxuICAgICAgICBuOiBuYW1lLFxyXG4gICAgICAgIGY6IGZuLFxyXG4gICAgICAgIHE6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICAgICQoZG9tKS5vbihuYW1lLCBmbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW91c2V3aGVlbCA9IGZ1bmN0aW9uIChkb20sIGZuLCBidWJibGUpIHsgLy8gYmluZCBtb3VzZXdoZWVsXHJcbiAgICAgIHZhciBlbCA9IChcImpxdWVyeVwiIGluIGRvbSkgPyBkb21bMF0gOiBkb207XHJcbiAgICAgIGlmIChcIm9ud2hlZWxcIiBpbiBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpIHsgLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXHJcbiAgICAgICAgc2VsZi5fYmluZChlbCwgXCJ3aGVlbFwiLCBmbiwgYnViYmxlIHx8IGZhbHNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgd25hbWUgPSAoX2RvYy5vbm1vdXNld2hlZWwgIT09IHVuZGVmaW5lZCkgPyBcIm1vdXNld2hlZWxcIiA6IFwiRE9NTW91c2VTY3JvbGxcIjsgLy8gb2xkZXIgV2Via2l0K0lFIHN1cHBvcnQgb3Igb2xkZXIgRmlyZWZveCAgICAgICAgICBcclxuICAgICAgICBfbW9kZXJuV2hlZWxFdmVudChlbCwgd25hbWUsIGZuLCBidWJibGUgfHwgZmFsc2UpO1xyXG4gICAgICAgIGlmICh3bmFtZSA9PSBcIkRPTU1vdXNlU2Nyb2xsXCIpIF9tb2Rlcm5XaGVlbEV2ZW50KGVsLCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIiwgZm4sIGJ1YmJsZSB8fCBmYWxzZSk7IC8vIEZpcmVmb3ggbGVnYWN5XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoY2FwLmhhc2V2ZW50bGlzdGVuZXIpIHsgIC8vIFczQyBzdGFuZGFyZCBldmVudCBtb2RlbFxyXG5cclxuICAgICAgLy8gdGhhbmtzIHRvIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXHJcbiAgICAgIHRyeSB7IHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcGFzc2l2ZVN1cHBvcnRlZCA9ICEwOyB9IH0pOyBfd2luLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIG9wdGlvbnMpOyB9IGNhdGNoIChlcnIpIHsgfVxyXG5cclxuICAgICAgdGhpcy5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGUgPSAoZS5vcmlnaW5hbCkgPyBlLm9yaWdpbmFsIDogZTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuY2FuY2VsRXZlbnQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUuY2FuY2VsYWJsZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgaWYgKGUucHJldmVudE1hbmlwdWxhdGlvbikgZS5wcmV2ZW50TWFuaXB1bGF0aW9uKCk7ICAvLyBJRTEwK1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfTsgICAgICBcclxuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gaW5zcGlyZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qb25hdGhhbnRuZWFsLzI0MTUxMzcgICAgICBcclxuXHJcbiAgICAgIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF93aW4uY29uc3RydWN0b3IucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBfZG9jLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gRWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xyXG4gICAgICAgIHRoaXMuYXR0YWNoRXZlbnQoXCJvblwiICsgdHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICB9O1xyXG4gICAgICBfd2luLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gX2RvYy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuICAgICAgICB0aGlzLmRldGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIFRoYW5rcyB0byBodHRwOi8vd3d3LnN3aXRjaG9udGhlY29kZS5jb20gISFcclxuICAgICAgdGhpcy5jYW5jZWxFdmVudCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZSA9IGUgfHwgX3dpbi5ldmVudDtcclxuICAgICAgICBpZiAoZSkgeyAgICAgICAgICBcclxuICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgIGUuY2FuY2VsID0gdHJ1ZTtcclxuICAgICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICB9ICBcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZSA9IGUgfHwgX3dpbi5ldmVudDtcclxuICAgICAgICBpZiAoZSkgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kZWxlZ2F0ZSA9IGZ1bmN0aW9uIChkb20sIG5hbWUsIGZuLCBidWJibGUsIGFjdGl2ZSkge1xyXG5cclxuICAgICAgdmFyIGRlID0gZGVsZWdhdGV2ZW50c1tuYW1lXSB8fCBmYWxzZTtcclxuXHJcbiAgICAgIGlmICghZGUpIHtcclxuXHJcbiAgICAgICAgZGUgPSB7XHJcbiAgICAgICAgICBhOiBbXSxcclxuICAgICAgICAgIGw6IFtdLFxyXG4gICAgICAgICAgZjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIGxzdCA9IGRlLmwsIGwgPSBsc3QubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgdmFyIHIgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IGw7IGEgPj0gMDsgYS0tKSB7XHJcbiAgICAgICAgICAgICAgciA9IGxzdFthXS5jYWxsKGUudGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICBpZiAociA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmJpbmQoZG9tLCBuYW1lLCBkZS5mLCBidWJibGUsIGFjdGl2ZSk7XHJcblxyXG4gICAgICAgIGRlbGVnYXRldmVudHNbbmFtZV0gPSBkZTtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzZWxmLmlzcGFnZSkge1xyXG4gICAgICAgIGRlLmEgPSBbc2VsZi5pZF0uY29uY2F0KGRlLmEpO1xyXG4gICAgICAgIGRlLmwgPSBbZm5dLmNvbmNhdChkZS5sKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZS5hLnB1c2goc2VsZi5pZCk7XHJcbiAgICAgICAgZGUubC5wdXNoKGZuKTsgICAgICAgIFxyXG4gICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVuZGVsZWdhdGUgPSBmdW5jdGlvbiAoZG9tLCBuYW1lLCBmbiwgYnViYmxlLCBhY3RpdmUpIHtcclxuICAgICAgdmFyIGRlID0gZGVsZWdhdGV2ZW50c1tuYW1lXXx8ZmFsc2U7XHJcbiAgICAgIGlmIChkZSYmZGUubCkgeyAgLy8gcXVpY2sgZml4ICM2ODNcclxuICAgICAgICBmb3IgKHZhciBhPTAsbD1kZS5sLmxlbmd0aDthPGw7YSsrKSB7XHJcbiAgICAgICAgICBpZiAoZGUuYVthXSA9PT0gc2VsZi5pZCkge1xyXG4gICAgICAgICAgICBkZS5hLnNwbGljZShhKTtcclxuICAgICAgICAgICAgZGUubC5zcGxpY2UoYSk7XHJcbiAgICAgICAgICAgIGlmIChkZS5hLmxlbmd0aD09PTApIHtcclxuICAgICAgICAgICAgICBzZWxmLl91bmJpbmQoZG9tLG5hbWUsZGUubC5mKTtcclxuICAgICAgICAgICAgICBkZWxlZ2F0ZXZlbnRzW25hbWVdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmJpbmQgPSBmdW5jdGlvbiAoZG9tLCBuYW1lLCBmbiwgYnViYmxlLCBhY3RpdmUpIHtcclxuICAgICAgdmFyIGVsID0gKFwianF1ZXJ5XCIgaW4gZG9tKSA/IGRvbVswXSA6IGRvbTtcclxuICAgICAgc2VsZi5fYmluZChlbCwgbmFtZSwgZm4sIGJ1YmJsZSB8fCBmYWxzZSwgYWN0aXZlIHx8IGZhbHNlKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fYmluZCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgZm4sIGJ1YmJsZSwgYWN0aXZlKSB7IC8vIHByaW1pdGl2ZSBiaW5kXHJcblxyXG4gICAgICBzZWxmLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICBlOiBlbCxcclxuICAgICAgICBuOiBuYW1lLFxyXG4gICAgICAgIGY6IGZuLFxyXG4gICAgICAgIGI6IGJ1YmJsZSxcclxuICAgICAgICBxOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIChwYXNzaXZlU3VwcG9ydGVkICYmIGFjdGl2ZSkgPyBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZuLCB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBidWJibGUgfSkgOiBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZuLCBidWJibGUgfHwgZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl91bmJpbmQgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIGZuLCBidWIpIHsgLy8gcHJpbWl0aXZlIHVuYmluZFxyXG4gICAgICBpZiAoZGVsZWdhdGV2ZW50c1tuYW1lXSkgc2VsZi51bmRlbGVnYXRlKGVsLCBuYW1lLCBmbiwgYnViKTtcclxuICAgICAgZWxzZSBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGZuLCBidWIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVuYmluZEFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBzZWxmLmV2ZW50cy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgIHZhciByID0gc2VsZi5ldmVudHNbYV07XHJcbiAgICAgICAgKHIucSkgPyByLmUudW5iaW5kKHIubiwgci5mKSA6IHNlbGYuX3VuYmluZChyLmUsIHIubiwgci5mLCByLmIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2hvd1JhaWxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gc2VsZi5zaG93UmFpbCgpLnNob3dSYWlsSHIoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zaG93UmFpbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKChzZWxmLnBhZ2UubWF4aCAhPT0gMCkgJiYgKHNlbGYuaXNwYWdlIHx8IHNlbGYud2luLmNzcygnZGlzcGxheScpICE9ICdub25lJykpIHtcclxuICAgICAgICAvL3NlbGYudmlzaWJpbGl0eSA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5yYWlsLnZpc2liaWxpdHkgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYucmFpbC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc2VsZjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zaG93UmFpbEhyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoc2VsZi5yYWlsaCkge1xyXG4gICAgICAgIGlmICgoc2VsZi5wYWdlLm1heHcgIT09IDApICYmIChzZWxmLmlzcGFnZSB8fCBzZWxmLndpbi5jc3MoJ2Rpc3BsYXknKSAhPSAnbm9uZScpKSB7XHJcbiAgICAgICAgICBzZWxmLnJhaWxoLnZpc2liaWxpdHkgPSB0cnVlO1xyXG4gICAgICAgICAgc2VsZi5yYWlsaC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGlkZVJhaWxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gc2VsZi5oaWRlUmFpbCgpLmhpZGVSYWlsSHIoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oaWRlUmFpbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy9zZWxmLnZpc2liaWxpdHkgPSBmYWxzZTtcclxuICAgICAgc2VsZi5yYWlsLnZpc2liaWxpdHkgPSBmYWxzZTtcclxuICAgICAgc2VsZi5yYWlsLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhpZGVSYWlsSHIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmIChzZWxmLnJhaWxoKSB7XHJcbiAgICAgICAgc2VsZi5yYWlsaC52aXNpYmlsaXR5ID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5yYWlsaC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuaGlkZGVuID0gZmFsc2U7XHJcbiAgICAgIHNlbGYucmFpbHNsb2NrZWQgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuIHNlbGYuc2hvd1JhaWxzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5oaWRkZW4gPSB0cnVlO1xyXG4gICAgICBzZWxmLnJhaWxzbG9ja2VkID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIHNlbGYuaGlkZVJhaWxzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gKHNlbGYuaGlkZGVuKSA/IHNlbGYuc2hvdygpIDogc2VsZi5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLnN0b3AoKTtcclxuICAgICAgaWYgKHNlbGYuY3Vyc29ydGltZW91dCkgY2xlYXJUaW1lb3V0KHNlbGYuY3Vyc29ydGltZW91dCk7XHJcbiAgICAgIGZvciAodmFyIG4gaW4gc2VsZi5kZWxheWxpc3QpIGlmIChzZWxmLmRlbGF5bGlzdFtuXSkgY2xlYXJBbmltYXRpb25GcmFtZShzZWxmLmRlbGF5bGlzdFtuXS5oKTtcclxuICAgICAgc2VsZi5kb1pvb21PdXQoKTtcclxuICAgICAgc2VsZi51bmJpbmRBbGwoKTtcclxuXHJcbiAgICAgIGlmIChjYXAuaXNpZTkpIHNlbGYud2luWzBdLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLCBzZWxmLm9uQXR0cmlidXRlQ2hhbmdlKTsgLy9JRTkgRE9NQXR0ck1vZGlmaWVkIGJ1Z1xyXG5cclxuICAgICAgaWYgKHNlbGYub2JzZXJ2ZXIgIT09IGZhbHNlKSBzZWxmLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgaWYgKHNlbGYub2JzZXJ2ZXJyZW1vdmVyICE9PSBmYWxzZSkgc2VsZi5vYnNlcnZlcnJlbW92ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICBpZiAoc2VsZi5vYnNlcnZlcmJvZHkgIT09IGZhbHNlKSBzZWxmLm9ic2VydmVyYm9keS5kaXNjb25uZWN0KCk7XHJcblxyXG4gICAgICBzZWxmLmV2ZW50cyA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoc2VsZi5jdXJzb3IpIHtcclxuICAgICAgICBzZWxmLmN1cnNvci5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoc2VsZi5jdXJzb3JoKSB7XHJcbiAgICAgICAgc2VsZi5jdXJzb3JoLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzZWxmLnJhaWwpIHtcclxuICAgICAgICBzZWxmLnJhaWwucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHNlbGYucmFpbGgpIHtcclxuICAgICAgICBzZWxmLnJhaWxoLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzZWxmLnpvb20pIHtcclxuICAgICAgICBzZWxmLnpvb20ucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBzZWxmLnNhdmVkLmNzcy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgIHZhciBkID0gc2VsZi5zYXZlZC5jc3NbYV07XHJcbiAgICAgICAgZFswXS5jc3MoZFsxXSwgKGRbMl0gPT09IHVuZGVmaW5lZCkgPyAnJyA6IGRbMl0pO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuc2F2ZWQgPSBmYWxzZTtcclxuICAgICAgc2VsZi5tZS5kYXRhKCdfX25pY2VzY3JvbGwnLCAnJyk7IC8vZXJhc2UgYWxsIHRyYWNlc1xyXG5cclxuICAgICAgLy8gbWVtb3J5IGxlYWsgZml4ZWQgYnkgR2lhbmx1Y2FHdWFyaW5pIC0gdGhhbmtzIGEgbG90IVxyXG4gICAgICAvLyByZW1vdmUgdGhlIGN1cnJlbnQgbmljZXNjcm9sbCBmcm9tIHRoZSAkLm5pY2VzY3JvbGwgYXJyYXkgJiBub3JtYWxpemUgYXJyYXlcclxuICAgICAgdmFyIGxzdCA9ICQubmljZXNjcm9sbDtcclxuICAgICAgbHN0LmVhY2goZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICBpZiAoIXRoaXMpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5pZCA9PT0gc2VsZi5pZCkge1xyXG4gICAgICAgICAgZGVsZXRlIGxzdFtpXTtcclxuICAgICAgICAgIGZvciAodmFyIGIgPSArK2k7IGIgPCBsc3QubGVuZ3RoOyBiKysgLCBpKyspIGxzdFtpXSA9IGxzdFtiXTtcclxuICAgICAgICAgIGxzdC5sZW5ndGgtLTtcclxuICAgICAgICAgIGlmIChsc3QubGVuZ3RoKSBkZWxldGUgbHN0W2xzdC5sZW5ndGhdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpIGluIHNlbGYpIHtcclxuICAgICAgICBzZWxmW2ldID0gbnVsbDtcclxuICAgICAgICBkZWxldGUgc2VsZltpXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZiA9IG51bGw7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNjcm9sbHN0YXJ0ID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgIHRoaXMub25zY3JvbGxzdGFydCA9IGZuO1xyXG4gICAgICByZXR1cm4gc2VsZjtcclxuICAgIH07XHJcbiAgICB0aGlzLnNjcm9sbGVuZCA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICB0aGlzLm9uc2Nyb2xsZW5kID0gZm47XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2Nyb2xsY2FuY2VsID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgIHRoaXMub25zY3JvbGxjYW5jZWwgPSBmbjtcclxuICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuem9vbWluID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgIHRoaXMub256b29taW4gPSBmbjtcclxuICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9O1xyXG4gICAgdGhpcy56b29tb3V0ID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgIHRoaXMub256b29tb3V0ID0gZm47XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlzU2Nyb2xsYWJsZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHZhciBkb20gPSAoZS50YXJnZXQpID8gZS50YXJnZXQgOiBlO1xyXG4gICAgICBpZiAoZG9tLm5vZGVOYW1lID09ICdPUFRJT04nKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgd2hpbGUgKGRvbSAmJiAoZG9tLm5vZGVUeXBlID09IDEpICYmIChkb20gIT09IHRoaXMubWVbMF0pICYmICEoL15CT0RZfEhUTUwvLnRlc3QoZG9tLm5vZGVOYW1lKSkpIHtcclxuICAgICAgICB2YXIgZGQgPSAkKGRvbSk7XHJcbiAgICAgICAgdmFyIG92ID0gZGQuY3NzKCdvdmVyZmxvd1knKSB8fCBkZC5jc3MoJ292ZXJmbG93WCcpIHx8IGRkLmNzcygnb3ZlcmZsb3cnKSB8fCAnJztcclxuICAgICAgICBpZiAoL3Njcm9sbHxhdXRvLy50ZXN0KG92KSkgcmV0dXJuIChkb20uY2xpZW50SGVpZ2h0ICE9IGRvbS5zY3JvbGxIZWlnaHQpO1xyXG4gICAgICAgIGRvbSA9IChkb20ucGFyZW50Tm9kZSkgPyBkb20ucGFyZW50Tm9kZSA6IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXRWaWV3cG9ydCA9IGZ1bmN0aW9uIChtZSkge1xyXG4gICAgICB2YXIgZG9tID0gKG1lICYmIG1lLnBhcmVudE5vZGUpID8gbWUucGFyZW50Tm9kZSA6IGZhbHNlO1xyXG4gICAgICB3aGlsZSAoZG9tICYmIChkb20ubm9kZVR5cGUgPT0gMSkgJiYgISgvXkJPRFl8SFRNTC8udGVzdChkb20ubm9kZU5hbWUpKSkge1xyXG4gICAgICAgIHZhciBkZCA9ICQoZG9tKTtcclxuICAgICAgICBpZiAoL2ZpeGVkfGFic29sdXRlLy50ZXN0KGRkLmNzcyhcInBvc2l0aW9uXCIpKSkgcmV0dXJuIGRkO1xyXG4gICAgICAgIHZhciBvdiA9IGRkLmNzcygnb3ZlcmZsb3dZJykgfHwgZGQuY3NzKCdvdmVyZmxvd1gnKSB8fCBkZC5jc3MoJ292ZXJmbG93JykgfHwgJyc7XHJcbiAgICAgICAgaWYgKCgvc2Nyb2xsfGF1dG8vLnRlc3Qob3YpKSAmJiAoZG9tLmNsaWVudEhlaWdodCAhPSBkb20uc2Nyb2xsSGVpZ2h0KSkgcmV0dXJuIGRkO1xyXG4gICAgICAgIGlmIChkZC5nZXROaWNlU2Nyb2xsKCkubGVuZ3RoID4gMCkgcmV0dXJuIGRkO1xyXG4gICAgICAgIGRvbSA9IChkb20ucGFyZW50Tm9kZSkgPyBkb20ucGFyZW50Tm9kZSA6IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyU2Nyb2xsU3RhcnQgPSBmdW5jdGlvbiAoY3gsIGN5LCByeCwgcnksIG1zKSB7XHJcblxyXG4gICAgICBpZiAoc2VsZi5vbnNjcm9sbHN0YXJ0KSB7XHJcbiAgICAgICAgdmFyIGluZm8gPSB7XHJcbiAgICAgICAgICB0eXBlOiBcInNjcm9sbHN0YXJ0XCIsXHJcbiAgICAgICAgICBjdXJyZW50OiB7XHJcbiAgICAgICAgICAgIHg6IGN4LFxyXG4gICAgICAgICAgICB5OiBjeVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHJlcXVlc3Q6IHtcclxuICAgICAgICAgICAgeDogcngsXHJcbiAgICAgICAgICAgIHk6IHJ5XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZW5kOiB7XHJcbiAgICAgICAgICAgIHg6IHNlbGYubmV3c2Nyb2xseCxcclxuICAgICAgICAgICAgeTogc2VsZi5uZXdzY3JvbGx5XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3BlZWQ6IG1zXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLm9uc2Nyb2xsc3RhcnQuY2FsbChzZWxmLCBpbmZvKTtcclxuICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyU2Nyb2xsRW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoc2VsZi5vbnNjcm9sbGVuZCkge1xyXG5cclxuICAgICAgICB2YXIgcHggPSBzZWxmLmdldFNjcm9sbExlZnQoKTtcclxuICAgICAgICB2YXIgcHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgICB2YXIgaW5mbyA9IHtcclxuICAgICAgICAgIHR5cGU6IFwic2Nyb2xsZW5kXCIsXHJcbiAgICAgICAgICBjdXJyZW50OiB7XHJcbiAgICAgICAgICAgIHg6IHB4LFxyXG4gICAgICAgICAgICB5OiBweVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGVuZDoge1xyXG4gICAgICAgICAgICB4OiBweCxcclxuICAgICAgICAgICAgeTogcHlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLm9uc2Nyb2xsZW5kLmNhbGwoc2VsZiwgaW5mbyk7XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2Nyb2xsZGlyeSA9IDAsIHNjcm9sbGRpcnggPSAwLCBzY3JvbGx0bXIgPSAwLCBzY3JvbGxzcGQgPSAxO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRvU2Nyb2xsUmVsYXRpdmUocHgsIHB5LCBjaGtzY3JvbGwsIGlzd2hlZWwpIHtcclxuXHJcbiAgICAgIGlmICghc2VsZi5zY3JvbGxydW5uaW5nKSB7XHJcbiAgICAgICAgc2VsZi5uZXdzY3JvbGx5ID0gc2VsZi5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICBzZWxmLm5ld3Njcm9sbHggPSBzZWxmLmdldFNjcm9sbExlZnQoKTtcclxuICAgICAgICBzY3JvbGx0bXIgPSBub3coKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGdhcCA9IChub3coKSAtIHNjcm9sbHRtcik7XHJcbiAgICAgIHNjcm9sbHRtciA9IG5vdygpO1xyXG5cclxuICAgICAgaWYgKGdhcCA+IDM1MCkge1xyXG4gICAgICAgIHNjcm9sbHNwZCA9IDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2Nyb2xsc3BkICs9ICgyIC0gc2Nyb2xsc3BkKSAvIDEwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBweCA9IHB4ICogc2Nyb2xsc3BkIHwgMDtcclxuICAgICAgcHkgPSBweSAqIHNjcm9sbHNwZCB8IDA7XHJcblxyXG4gICAgICBpZiAocHgpIHtcclxuXHJcbiAgICAgICAgaWYgKGlzd2hlZWwpIHsgLy8gbW91c2Utb25seVxyXG4gICAgICAgICAgaWYgKHB4IDwgMCkgeyAgLy8gZml4IGFwcGxlIG1hZ2ljIG1vdXNlIHN3aXBlIGJhY2svZm9yd2FyZFxyXG4gICAgICAgICAgICBpZiAoc2VsZi5nZXRTY3JvbGxMZWZ0KCkgPj0gc2VsZi5wYWdlLm1heHcpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuZ2V0U2Nyb2xsTGVmdCgpIDw9IDApIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGR4ID0gcHggPiAwID8gMSA6IC0xO1xyXG5cclxuICAgICAgICBpZiAoc2Nyb2xsZGlyeCAhPT0gZHgpIHtcclxuICAgICAgICAgIGlmIChzZWxmLnNjcm9sbG1vbSkgc2VsZi5zY3JvbGxtb20uc3RvcCgpO1xyXG4gICAgICAgICAgc2VsZi5uZXdzY3JvbGx4ID0gc2VsZi5nZXRTY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgICBzY3JvbGxkaXJ4ID0gZHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmxhc3RkZWx0YXggLT0gcHg7XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHkpIHtcclxuXHJcbiAgICAgICAgdmFyIGNoayA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgdG9wID0gc2VsZi5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICAgIGlmIChweSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKHRvcCA+PSBzZWxmLnBhZ2UubWF4aCkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodG9wIDw9IDApIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgIGlmIChjaGspIHtcclxuICAgICAgICAgIGlmIChvcHQubmF0aXZlcGFyZW50c2Nyb2xsaW5nICYmIGNoa3Njcm9sbCAmJiAhc2VsZi5pc3BhZ2UgJiYgIXNlbGYuem9vbWFjdGl2ZSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB2YXIgbnkgPSBzZWxmLnZpZXcuaCA+PiAxO1xyXG4gICAgICAgICAgaWYgKHNlbGYubmV3c2Nyb2xseSA8IC1ueSkgeyBzZWxmLm5ld3Njcm9sbHkgPSAtbnk7IHB5ID0gLTE7IH1cclxuICAgICAgICAgIGVsc2UgaWYgKHNlbGYubmV3c2Nyb2xseSA+IHNlbGYucGFnZS5tYXhoICsgbnkpIHsgc2VsZi5uZXdzY3JvbGx5ID0gc2VsZi5wYWdlLm1heGggKyBueTsgcHkgPSAxOyB9XHJcbiAgICAgICAgICBlbHNlIHB5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkeSA9IHB5ID4gMCA/IDEgOiAtMTtcclxuXHJcbiAgICAgICAgaWYgKHNjcm9sbGRpcnkgIT09IGR5KSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi5zY3JvbGxtb20pIHNlbGYuc2Nyb2xsbW9tLnN0b3AoKTtcclxuICAgICAgICAgIHNlbGYubmV3c2Nyb2xseSA9IHNlbGYuZ2V0U2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICBzY3JvbGxkaXJ5ID0gZHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmxhc3RkZWx0YXkgLT0gcHk7XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHkgfHwgcHgpIHtcclxuICAgICAgICBzZWxmLnN5bmNoZWQoXCJyZWxhdGl2ZXh5XCIsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICB2YXIgZHR5ID0gc2VsZi5sYXN0ZGVsdGF5ICsgc2VsZi5uZXdzY3JvbGx5O1xyXG4gICAgICAgICAgc2VsZi5sYXN0ZGVsdGF5ID0gMDtcclxuXHJcbiAgICAgICAgICB2YXIgZHR4ID0gc2VsZi5sYXN0ZGVsdGF4ICsgc2VsZi5uZXdzY3JvbGx4O1xyXG4gICAgICAgICAgc2VsZi5sYXN0ZGVsdGF4ID0gMDtcclxuXHJcbiAgICAgICAgICBpZiAoIXNlbGYucmFpbC5kcmFnKSBzZWxmLmRvU2Nyb2xsUG9zKGR0eCwgZHR5KTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGhhc3BhcmVudHNjcm9sbGluZ3BoYXNlID0gZmFsc2U7XHJcblxyXG4gICAgZnVuY3Rpb24gZXhlY1Njcm9sbFdoZWVsKGUsIGhyLCBjaGtzY3JvbGwpIHtcclxuICAgICAgdmFyIHB4LCBweTtcclxuXHJcbiAgICAgIGlmICghY2hrc2Nyb2xsICYmIGhhc3BhcmVudHNjcm9sbGluZ3BoYXNlKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMCkgeyAvLyBQSVhFTFxyXG4gICAgICAgIHB4ID0gLShlLmRlbHRhWCAqIChvcHQubW91c2VzY3JvbGxzdGVwIC8gKDE4ICogMykpKSB8IDA7XHJcbiAgICAgICAgcHkgPSAtKGUuZGVsdGFZICogKG9wdC5tb3VzZXNjcm9sbHN0ZXAgLyAoMTggKiAzKSkpIHwgMDtcclxuICAgICAgfSBlbHNlIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkgeyAvLyBMSU5FXHJcbiAgICAgICAgcHggPSAtKGUuZGVsdGFYICogb3B0Lm1vdXNlc2Nyb2xsc3RlcCAqIDUwIC8gODApIHwgMDtcclxuICAgICAgICBweSA9IC0oZS5kZWx0YVkgKiBvcHQubW91c2VzY3JvbGxzdGVwICogNTAgLyA4MCkgfCAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaHIgJiYgb3B0Lm9uZWF4aXNtb3VzZW1vZGUgJiYgKHB4ID09PSAwKSAmJiBweSkgeyAvLyBjbGFzc2ljIHZlcnRpY2FsLW9ubHkgbW91c2V3aGVlbCArIGJyb3dzZXIgd2l0aCB4L3kgc3VwcG9ydCBcclxuICAgICAgICBweCA9IHB5O1xyXG4gICAgICAgIHB5ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKGNoa3Njcm9sbCkge1xyXG4gICAgICAgICAgdmFyIGhyZW5kID0gKHB4IDwgMCkgPyAoc2VsZi5nZXRTY3JvbGxMZWZ0KCkgPj0gc2VsZi5wYWdlLm1heHcpIDogKHNlbGYuZ2V0U2Nyb2xsTGVmdCgpIDw9IDApO1xyXG4gICAgICAgICAgaWYgKGhyZW5kKSB7ICAvLyBwcmVzZXJ2ZSB2ZXJ0aWNhbCBzY3JvbGxpbmdcclxuICAgICAgICAgICAgcHkgPSBweDtcclxuICAgICAgICAgICAgcHggPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGludmVydCBob3Jpem9udGFsIGRpcmVjdGlvbiBmb3IgcnRsIG1vZGVcclxuICAgICAgaWYgKHNlbGYuaXNydGxtb2RlKSBweCA9IC1weDtcclxuXHJcbiAgICAgIHZhciBjaGsgPSBkb1Njcm9sbFJlbGF0aXZlKHB4LCBweSwgY2hrc2Nyb2xsLCB0cnVlKTtcclxuXHJcbiAgICAgIGlmIChjaGspIHtcclxuICAgICAgICBpZiAoY2hrc2Nyb2xsKSBoYXNwYXJlbnRzY3JvbGxpbmdwaGFzZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGFzcGFyZW50c2Nyb2xsaW5ncGhhc2UgPSBmYWxzZTtcclxuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vbm1vdXNld2hlZWwgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAoc2VsZi53aGVlbHByZXZlbnRlZHx8c2VsZi5sb2NrZWQpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKHNlbGYucmFpbHNsb2NrZWQpIHtcclxuICAgICAgICBzZWxmLmRlYm91bmNlZChcImNoZWNrdW5sb2NrXCIsIHNlbGYucmVzaXplLCAyNTApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoc2VsZi5yYWlsLmRyYWcpIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG5cclxuICAgICAgaWYgKG9wdC5vbmVheGlzbW91c2Vtb2RlID09PSBcImF1dG9cIiAmJiBlLmRlbHRhWCAhPT0gMCkgb3B0Lm9uZWF4aXNtb3VzZW1vZGUgPSBmYWxzZTsgLy8gY2hlY2sgdHdvLWF4aXMgbW91c2Ugc3VwcG9ydCAobm90IHZlcnkgZWxlZ2FudClcclxuXHJcbiAgICAgIGlmIChvcHQub25lYXhpc21vdXNlbW9kZSAmJiBlLmRlbHRhWCA9PT0gMCkge1xyXG4gICAgICAgIGlmICghc2VsZi5yYWlsLnNjcm9sbGFibGUpIHtcclxuICAgICAgICAgIGlmIChzZWxmLnJhaWxoICYmIHNlbGYucmFpbGguc2Nyb2xsYWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5vbm1vdXNld2hlZWxocihlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG53ID0gbm93KCk7XHJcbiAgICAgIHZhciBjaGsgPSBmYWxzZTtcclxuICAgICAgaWYgKG9wdC5wcmVzZXJ2ZW5hdGl2ZXNjcm9sbGluZyAmJiAoKHNlbGYuY2hlY2thcmVhICsgNjAwKSA8IG53KSkge1xyXG4gICAgICAgIHNlbGYubmF0aXZlc2Nyb2xsaW5nYXJlYSA9IHNlbGYuaXNTY3JvbGxhYmxlKGUpO1xyXG4gICAgICAgIGNoayA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgc2VsZi5jaGVja2FyZWEgPSBudztcclxuICAgICAgaWYgKHNlbGYubmF0aXZlc2Nyb2xsaW5nYXJlYSkgcmV0dXJuIHRydWU7IC8vIHRoaXMgaXNuJ3QgbXkgYnVzaW5lc3NcclxuICAgICAgdmFyIHJldCA9IGV4ZWNTY3JvbGxXaGVlbChlLCBmYWxzZSwgY2hrKTtcclxuICAgICAgaWYgKHJldCkgc2VsZi5jaGVja2FyZWEgPSAwO1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9ubW91c2V3aGVlbGhyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgaWYgKHNlbGYud2hlZWxwcmV2ZW50ZWQpIHJldHVybjtcclxuICAgICAgaWYgKHNlbGYucmFpbHNsb2NrZWQgfHwgIXNlbGYucmFpbGguc2Nyb2xsYWJsZSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmIChzZWxmLnJhaWwuZHJhZykgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcblxyXG4gICAgICB2YXIgbncgPSBub3coKTtcclxuICAgICAgdmFyIGNoayA9IGZhbHNlO1xyXG4gICAgICBpZiAob3B0LnByZXNlcnZlbmF0aXZlc2Nyb2xsaW5nICYmICgoc2VsZi5jaGVja2FyZWEgKyA2MDApIDwgbncpKSB7XHJcbiAgICAgICAgc2VsZi5uYXRpdmVzY3JvbGxpbmdhcmVhID0gc2VsZi5pc1Njcm9sbGFibGUoZSk7XHJcbiAgICAgICAgY2hrID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBzZWxmLmNoZWNrYXJlYSA9IG53O1xyXG4gICAgICBpZiAoc2VsZi5uYXRpdmVzY3JvbGxpbmdhcmVhKSByZXR1cm4gdHJ1ZTsgLy8gdGhpcyBpcyBub3QgbXkgYnVzaW5lc3NcclxuICAgICAgaWYgKHNlbGYucmFpbHNsb2NrZWQpIHJldHVybiBzZWxmLmNhbmNlbEV2ZW50KGUpO1xyXG5cclxuICAgICAgcmV0dXJuIGV4ZWNTY3JvbGxXaGVlbChlLCB0cnVlLCBjaGspO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuY2FuY2VsU2Nyb2xsKCk7XHJcbiAgICAgIGlmIChzZWxmLnNjcm9sbG1vbikgc2VsZi5zY3JvbGxtb24uc3RvcCgpO1xyXG4gICAgICBzZWxmLmN1cnNvcmZyZWV6ZWQgPSBmYWxzZTtcclxuICAgICAgc2VsZi5zY3JvbGwueSA9IE1hdGgucm91bmQoc2VsZi5nZXRTY3JvbGxUb3AoKSAqICgxIC8gc2VsZi5zY3JvbGxyYXRpby55KSk7XHJcbiAgICAgIHNlbGYubm90aWNlQ3Vyc29yKCk7XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldFRyYW5zaXRpb25TcGVlZCA9IGZ1bmN0aW9uIChkaWYpIHtcclxuXHJcbiAgICAgIHJldHVybiA4MCArIChkaWYgLyA3MikgKiBvcHQuc2Nyb2xsc3BlZWQgfDA7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIW9wdC5zbW9vdGhzY3JvbGwpIHtcclxuICAgICAgdGhpcy5kb1Njcm9sbExlZnQgPSBmdW5jdGlvbiAoeCwgc3BkKSB7IC8vZGlyZWN0XHJcbiAgICAgICAgdmFyIHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHNlbGYuZG9TY3JvbGxQb3MoeCwgeSwgc3BkKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5kb1Njcm9sbFRvcCA9IGZ1bmN0aW9uICh5LCBzcGQpIHsgLy9kaXJlY3RcclxuICAgICAgICB2YXIgeCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG4gICAgICAgIHNlbGYuZG9TY3JvbGxQb3MoeCwgeSwgc3BkKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5kb1Njcm9sbFBvcyA9IGZ1bmN0aW9uICh4LCB5LCBzcGQpIHsgLy9kaXJlY3RcclxuICAgICAgICB2YXIgbnggPSAoeCA+IHNlbGYucGFnZS5tYXh3KSA/IHNlbGYucGFnZS5tYXh3IDogeDtcclxuICAgICAgICBpZiAobnggPCAwKSBueCA9IDA7XHJcbiAgICAgICAgdmFyIG55ID0gKHkgPiBzZWxmLnBhZ2UubWF4aCkgPyBzZWxmLnBhZ2UubWF4aCA6IHk7XHJcbiAgICAgICAgaWYgKG55IDwgMCkgbnkgPSAwO1xyXG4gICAgICAgIHNlbGYuc3luY2hlZCgnc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5zZXRTY3JvbGxUb3AobnkpO1xyXG4gICAgICAgICAgc2VsZi5zZXRTY3JvbGxMZWZ0KG54KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5jYW5jZWxTY3JvbGwgPSBmdW5jdGlvbiAoKSB7IH07IC8vIGRpcmVjdFxyXG5cclxuICAgIH0gZWxzZSBpZiAoc2VsZi5pc2h3c2Nyb2xsICYmIGNhcC5oYXN0cmFuc2l0aW9uICYmIG9wdC51c2V0cmFuc2l0aW9uICYmICEhb3B0LnNtb290aHNjcm9sbCkge1xyXG5cclxuICAgICAgdmFyIGxhc3R0cmFuc2l0aW9uc3R5bGUgPSAnJztcclxuXHJcbiAgICAgIHRoaXMucmVzZXRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxhc3R0cmFuc2l0aW9uc3R5bGUgPSAnJztcclxuICAgICAgICBzZWxmLmRvYy5jc3MoY2FwLnByZWZpeHN0eWxlICsgJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnMG1zJyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnByZXBhcmVUcmFuc2l0aW9uID0gZnVuY3Rpb24gKGRpZiwgaXN0aW1lKSB7XHJcbiAgICAgICAgdmFyIGV4ID0gKGlzdGltZSkgPyBkaWYgOiBzZWxmLmdldFRyYW5zaXRpb25TcGVlZChkaWYpO1xyXG4gICAgICAgIHZhciB0cmFucyA9IGV4ICsgJ21zJztcclxuICAgICAgICBpZiAobGFzdHRyYW5zaXRpb25zdHlsZSAhPT0gdHJhbnMpIHtcclxuICAgICAgICAgIGxhc3R0cmFuc2l0aW9uc3R5bGUgPSB0cmFucztcclxuICAgICAgICAgIHNlbGYuZG9jLmNzcyhjYXAucHJlZml4c3R5bGUgKyAndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRyYW5zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5kb1Njcm9sbExlZnQgPSBmdW5jdGlvbiAoeCwgc3BkKSB7IC8vdHJhbnNcclxuICAgICAgICB2YXIgeSA9IChzZWxmLnNjcm9sbHJ1bm5pbmcpID8gc2VsZi5uZXdzY3JvbGx5IDogc2VsZi5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICBzZWxmLmRvU2Nyb2xsUG9zKHgsIHksIHNwZCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmRvU2Nyb2xsVG9wID0gZnVuY3Rpb24gKHksIHNwZCkgeyAvL3RyYW5zXHJcbiAgICAgICAgdmFyIHggPSAoc2VsZi5zY3JvbGxydW5uaW5nKSA/IHNlbGYubmV3c2Nyb2xseCA6IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG4gICAgICAgIHNlbGYuZG9TY3JvbGxQb3MoeCwgeSwgc3BkKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuY3Vyc29ydXBkYXRlID0ge1xyXG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgbSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgaWYgKG0ucnVubmluZykgcmV0dXJuO1xyXG4gICAgICAgICAgbS5ydW5uaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG0ucnVubmluZykgc2V0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbiAgICAgICAgICAgIHNlbGYuc2hvd0N1cnNvcihzZWxmLmdldFNjcm9sbFRvcCgpLCBzZWxmLmdldFNjcm9sbExlZnQoKSk7XHJcbiAgICAgICAgICAgIHNlbGYubm90aWZ5U2Nyb2xsRXZlbnQoc2VsZi53aW5bMF0pO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBzZXRBbmltYXRpb25GcmFtZShsb29wKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZG9TY3JvbGxQb3MgPSBmdW5jdGlvbiAoeCwgeSwgc3BkKSB7IC8vdHJhbnNcclxuXHJcbiAgICAgICAgdmFyIHB5ID0gc2VsZi5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICB2YXIgcHggPSBzZWxmLmdldFNjcm9sbExlZnQoKTtcclxuXHJcbiAgICAgICAgaWYgKCgoc2VsZi5uZXdzY3JvbGx5IC0gcHkpICogKHkgLSBweSkgPCAwKSB8fCAoKHNlbGYubmV3c2Nyb2xseCAtIHB4KSAqICh4IC0gcHgpIDwgMCkpIHNlbGYuY2FuY2VsU2Nyb2xsKCk7IC8vaW52ZXJ0ZWQgbW92ZW1lbnQgZGV0ZWN0aW9uICAgICAgXHJcblxyXG4gICAgICAgIGlmICghb3B0LmJvdW5jZXNjcm9sbCkge1xyXG4gICAgICAgICAgaWYgKHkgPCAwKSB5ID0gMDtcclxuICAgICAgICAgIGVsc2UgaWYgKHkgPiBzZWxmLnBhZ2UubWF4aCkgeSA9IHNlbGYucGFnZS5tYXhoO1xyXG4gICAgICAgICAgaWYgKHggPCAwKSB4ID0gMDtcclxuICAgICAgICAgIGVsc2UgaWYgKHggPiBzZWxmLnBhZ2UubWF4dykgeCA9IHNlbGYucGFnZS5tYXh3O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoeSA8IDApIHkgPSB5IC8gMiB8IDA7XHJcbiAgICAgICAgICBlbHNlIGlmICh5ID4gc2VsZi5wYWdlLm1heGgpIHkgPSBzZWxmLnBhZ2UubWF4aCArICh5IC0gc2VsZi5wYWdlLm1heGgpIC8gMiB8IDA7XHJcbiAgICAgICAgICBpZiAoeCA8IDApIHggPSB4IC8gMiB8IDA7XHJcbiAgICAgICAgICBlbHNlIGlmICh4ID4gc2VsZi5wYWdlLm1heHcpIHggPSBzZWxmLnBhZ2UubWF4dyArICh4IC0gc2VsZi5wYWdlLm1heHcpIC8gMiB8IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VsZi5zY3JvbGxydW5uaW5nICYmIHggPT0gc2VsZi5uZXdzY3JvbGx4ICYmIHkgPT0gc2VsZi5uZXdzY3JvbGx5KSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHNlbGYubmV3c2Nyb2xseSA9IHk7XHJcbiAgICAgICAgc2VsZi5uZXdzY3JvbGx4ID0geDtcclxuXHJcbiAgICAgICAgdmFyIHRvcCA9IHNlbGYuZ2V0U2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgdmFyIGxmdCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG5cclxuICAgICAgICB2YXIgZHN0ID0ge307XHJcbiAgICAgICAgZHN0LnggPSB4IC0gbGZ0O1xyXG4gICAgICAgIGRzdC55ID0geSAtIHRvcDtcclxuXHJcbiAgICAgICAgdmFyIGRkID0gTWF0aC5zcXJ0KChkc3QueCAqIGRzdC54KSArIChkc3QueSAqIGRzdC55KSkgfCAwO1xyXG5cclxuICAgICAgICB2YXIgbXMgPSBzZWxmLnByZXBhcmVUcmFuc2l0aW9uKGRkKTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxmLnNjcm9sbHJ1bm5pbmcpIHtcclxuICAgICAgICAgIHNlbGYuc2Nyb2xscnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXJTY3JvbGxTdGFydChsZnQsIHRvcCwgeCwgeSwgbXMpO1xyXG4gICAgICAgICAgc2VsZi5jdXJzb3J1cGRhdGUuc3RhcnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuc2Nyb2xsZW5kdHJhcHBlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICghY2FwLnRyYW5zaXRpb25lbmQpIHtcclxuICAgICAgICAgIGlmIChzZWxmLnNjcm9sbGVuZHRyYXBwZWQpIGNsZWFyVGltZW91dChzZWxmLnNjcm9sbGVuZHRyYXBwZWQpO1xyXG4gICAgICAgICAgc2VsZi5zY3JvbGxlbmR0cmFwcGVkID0gc2V0VGltZW91dChzZWxmLm9uU2Nyb2xsVHJhbnNpdGlvbkVuZCwgbXMpOyAvLyBzaW11bGF0ZSB0cmFuc2l0aW9uZW5kIGV2ZW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLnNldFNjcm9sbFRvcChzZWxmLm5ld3Njcm9sbHkpO1xyXG4gICAgICAgIHNlbGYuc2V0U2Nyb2xsTGVmdChzZWxmLm5ld3Njcm9sbHgpO1xyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuY2FuY2VsU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghc2VsZi5zY3JvbGxlbmR0cmFwcGVkKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB2YXIgcHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciBweCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG4gICAgICAgIHNlbGYuc2Nyb2xscnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICghY2FwLnRyYW5zaXRpb25lbmQpIGNsZWFyVGltZW91dChjYXAudHJhbnNpdGlvbmVuZCk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxlbmR0cmFwcGVkID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5yZXNldFRyYW5zaXRpb24oKTtcclxuICAgICAgICBzZWxmLnNldFNjcm9sbFRvcChweSk7IC8vIGZpcmUgZXZlbnQgb25zY3JvbGxcclxuICAgICAgICBpZiAoc2VsZi5yYWlsaCkgc2VsZi5zZXRTY3JvbGxMZWZ0KHB4KTtcclxuICAgICAgICBpZiAoc2VsZi50aW1lcnNjcm9sbCAmJiBzZWxmLnRpbWVyc2Nyb2xsLnRtKSBjbGVhckludGVydmFsKHNlbGYudGltZXJzY3JvbGwudG0pO1xyXG4gICAgICAgIHNlbGYudGltZXJzY3JvbGwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgc2VsZi5jdXJzb3JmcmVlemVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHNlbGYuY3Vyc29ydXBkYXRlLnN0b3AoKTtcclxuICAgICAgICBzZWxmLnNob3dDdXJzb3IocHksIHB4KTtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMub25TY3JvbGxUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBpZiAoIXNlbGYuc2Nyb2xsZW5kdHJhcHBlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgcHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciBweCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG5cclxuICAgICAgICBpZiAocHkgPCAwKSBweSA9IDA7XHJcbiAgICAgICAgZWxzZSBpZiAocHkgPiBzZWxmLnBhZ2UubWF4aCkgcHkgPSBzZWxmLnBhZ2UubWF4aDtcclxuICAgICAgICBpZiAocHggPCAwKSBweCA9IDA7XHJcbiAgICAgICAgZWxzZSBpZiAocHggPiBzZWxmLnBhZ2UubWF4dykgcHggPSBzZWxmLnBhZ2UubWF4dztcclxuICAgICAgICBpZiAoKHB5ICE9IHNlbGYubmV3c2Nyb2xseSkgfHwgKHB4ICE9IHNlbGYubmV3c2Nyb2xseCkpIHJldHVybiBzZWxmLmRvU2Nyb2xsUG9zKHB4LCBweSwgb3B0LnNuYXBiYWNrc3BlZWQpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5zY3JvbGxydW5uaW5nKSBzZWxmLnRyaWdnZXJTY3JvbGxFbmQoKTtcclxuICAgICAgICBzZWxmLnNjcm9sbHJ1bm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgc2VsZi5zY3JvbGxlbmR0cmFwcGVkID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5yZXNldFRyYW5zaXRpb24oKTtcclxuICAgICAgICBzZWxmLnRpbWVyc2Nyb2xsID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5zZXRTY3JvbGxUb3AocHkpOyAvLyBmaXJlIGV2ZW50IG9uc2Nyb2xsICAgICAgICBcclxuICAgICAgICBpZiAoc2VsZi5yYWlsaCkgc2VsZi5zZXRTY3JvbGxMZWZ0KHB4KTsgLy8gZmlyZSBldmVudCBvbnNjcm9sbCBsZWZ0XHJcblxyXG4gICAgICAgIHNlbGYuY3Vyc29ydXBkYXRlLnN0b3AoKTtcclxuICAgICAgICBzZWxmLm5vdGljZUN1cnNvcihmYWxzZSwgcHksIHB4KTtcclxuXHJcbiAgICAgICAgc2VsZi5jdXJzb3JmcmVlemVkID0gZmFsc2U7XHJcblxyXG4gICAgICB9O1xyXG5cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICB0aGlzLmRvU2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh4LCBzcGQpIHsgLy9uby10cmFuc1xyXG4gICAgICAgIHZhciB5ID0gKHNlbGYuc2Nyb2xscnVubmluZykgPyBzZWxmLm5ld3Njcm9sbHkgOiBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHNlbGYuZG9TY3JvbGxQb3MoeCwgeSwgc3BkKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZG9TY3JvbGxUb3AgPSBmdW5jdGlvbiAoeSwgc3BkKSB7IC8vbm8tdHJhbnNcclxuICAgICAgICB2YXIgeCA9IChzZWxmLnNjcm9sbHJ1bm5pbmcpID8gc2VsZi5uZXdzY3JvbGx4IDogc2VsZi5nZXRTY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgc2VsZi5kb1Njcm9sbFBvcyh4LCB5LCBzcGQpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5kb1Njcm9sbFBvcyA9IGZ1bmN0aW9uICh4LCB5LCBzcGQpIHsgLy9uby10cmFuc1xyXG5cclxuICAgICAgICB2YXIgcHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciBweCA9IHNlbGYuZ2V0U2Nyb2xsTGVmdCgpO1xyXG5cclxuICAgICAgICBpZiAoKChzZWxmLm5ld3Njcm9sbHkgLSBweSkgKiAoeSAtIHB5KSA8IDApIHx8ICgoc2VsZi5uZXdzY3JvbGx4IC0gcHgpICogKHggLSBweCkgPCAwKSkgc2VsZi5jYW5jZWxTY3JvbGwoKTsgLy9pbnZlcnRlZCBtb3ZlbWVudCBkZXRlY3Rpb25cclxuXHJcbiAgICAgICAgdmFyIGNsaXBwZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxmLmJvdW5jZXNjcm9sbCB8fCAhc2VsZi5yYWlsLnZpc2liaWxpdHkpIHtcclxuICAgICAgICAgIGlmICh5IDwgMCkge1xyXG4gICAgICAgICAgICB5ID0gMDtcclxuICAgICAgICAgICAgY2xpcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBzZWxmLnBhZ2UubWF4aCkge1xyXG4gICAgICAgICAgICB5ID0gc2VsZi5wYWdlLm1heGg7XHJcbiAgICAgICAgICAgIGNsaXBwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXNlbGYuYm91bmNlc2Nyb2xsIHx8ICFzZWxmLnJhaWxoLnZpc2liaWxpdHkpIHtcclxuICAgICAgICAgIGlmICh4IDwgMCkge1xyXG4gICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICAgICAgY2xpcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHggPiBzZWxmLnBhZ2UubWF4dykge1xyXG4gICAgICAgICAgICB4ID0gc2VsZi5wYWdlLm1heHc7XHJcbiAgICAgICAgICAgIGNsaXBwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlbGYuc2Nyb2xscnVubmluZyAmJiAoc2VsZi5uZXdzY3JvbGx5ID09PSB5KSAmJiAoc2VsZi5uZXdzY3JvbGx4ID09PSB4KSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHNlbGYubmV3c2Nyb2xseSA9IHk7XHJcbiAgICAgICAgc2VsZi5uZXdzY3JvbGx4ID0geDtcclxuXHJcbiAgICAgICAgc2VsZi5kc3QgPSB7fTtcclxuICAgICAgICBzZWxmLmRzdC54ID0geCAtIHB4O1xyXG4gICAgICAgIHNlbGYuZHN0LnkgPSB5IC0gcHk7XHJcbiAgICAgICAgc2VsZi5kc3QucHggPSBweDtcclxuICAgICAgICBzZWxmLmRzdC5weSA9IHB5O1xyXG5cclxuICAgICAgICB2YXIgZGQgPSBNYXRoLnNxcnQoKHNlbGYuZHN0LnggKiBzZWxmLmRzdC54KSArIChzZWxmLmRzdC55ICogc2VsZi5kc3QueSkpIHwgMDtcclxuICAgICAgICB2YXIgbXMgPSBzZWxmLmdldFRyYW5zaXRpb25TcGVlZChkZCk7XHJcblxyXG4gICAgICAgIHNlbGYuYnpzY3JvbGwgPSB7fTtcclxuXHJcbiAgICAgICAgdmFyIHAzID0gKGNsaXBwZWQpID8gMSA6IDAuNTg7XHJcbiAgICAgICAgc2VsZi5ienNjcm9sbC54ID0gbmV3IEJlemllckNsYXNzKHB4LCBzZWxmLm5ld3Njcm9sbHgsIG1zLCAwLCAwLCBwMywgMSk7XHJcbiAgICAgICAgc2VsZi5ienNjcm9sbC55ID0gbmV3IEJlemllckNsYXNzKHB5LCBzZWxmLm5ld3Njcm9sbHksIG1zLCAwLCAwLCBwMywgMSk7XHJcblxyXG4gICAgICAgIHZhciBsb29waWQgPSBub3coKTtcclxuXHJcbiAgICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgaWYgKCFzZWxmLnNjcm9sbHJ1bm5pbmcpIHJldHVybjtcclxuICAgICAgICAgIHZhciB4ID0gc2VsZi5ienNjcm9sbC55LmdldFBvcygpO1xyXG5cclxuICAgICAgICAgIHNlbGYuc2V0U2Nyb2xsTGVmdChzZWxmLmJ6c2Nyb2xsLnguZ2V0Tm93KCkpO1xyXG4gICAgICAgICAgc2VsZi5zZXRTY3JvbGxUb3Aoc2VsZi5ienNjcm9sbC55LmdldE5vdygpKTtcclxuXHJcbiAgICAgICAgICBpZiAoeCA8PSAxKSB7XHJcbiAgICAgICAgICAgIHNlbGYudGltZXIgPSBzZXRBbmltYXRpb25GcmFtZShsb29wKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xscnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnRpbWVyID0gMDtcclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyU2Nyb2xsRW5kKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICghc2VsZi5zY3JvbGxydW5uaW5nKSB7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXJTY3JvbGxTdGFydChweCwgcHksIHgsIHksIG1zKTtcclxuICAgICAgICAgIHNlbGYuc2Nyb2xscnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgICBzZWxmLnRpbWVyID0gc2V0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuY2FuY2VsU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChzZWxmLnRpbWVyKSBjbGVhckFuaW1hdGlvbkZyYW1lKHNlbGYudGltZXIpO1xyXG4gICAgICAgIHNlbGYudGltZXIgPSAwO1xyXG4gICAgICAgIHNlbGYuYnpzY3JvbGwgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLnNjcm9sbHJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kb1Njcm9sbEJ5ID0gZnVuY3Rpb24gKHN0cCwgcmVsYXRpdmUpIHtcclxuICAgICAgZG9TY3JvbGxSZWxhdGl2ZSgwLCBzdHApO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmRvU2Nyb2xsTGVmdEJ5ID0gZnVuY3Rpb24gKHN0cCwgcmVsYXRpdmUpIHtcclxuICAgICAgZG9TY3JvbGxSZWxhdGl2ZShzdHAsIDApO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmRvU2Nyb2xsVG8gPSBmdW5jdGlvbiAocG9zLCByZWxhdGl2ZSkge1xyXG4gICAgICB2YXIgbnkgPSAocmVsYXRpdmUpID8gTWF0aC5yb3VuZChwb3MgKiBzZWxmLnNjcm9sbHJhdGlvLnkpIDogcG9zO1xyXG4gICAgICBpZiAobnkgPCAwKSBueSA9IDA7XHJcbiAgICAgIGVsc2UgaWYgKG55ID4gc2VsZi5wYWdlLm1heGgpIG55ID0gc2VsZi5wYWdlLm1heGg7XHJcbiAgICAgIHNlbGYuY3Vyc29yZnJlZXplZCA9IGZhbHNlO1xyXG4gICAgICBzZWxmLmRvU2Nyb2xsVG9wKHBvcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY2hlY2tDb250ZW50U2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHBnID0gc2VsZi5nZXRDb250ZW50U2l6ZSgpO1xyXG4gICAgICBpZiAoKHBnLmggIT0gc2VsZi5wYWdlLmgpIHx8IChwZy53ICE9IHNlbGYucGFnZS53KSkgc2VsZi5yZXNpemUoZmFsc2UsIHBnKTtcclxuICAgIH07XHJcblxyXG4gICAgc2VsZi5vbnNjcm9sbCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGlmIChzZWxmLnJhaWwuZHJhZykgcmV0dXJuO1xyXG4gICAgICBpZiAoIXNlbGYuY3Vyc29yZnJlZXplZCkge1xyXG4gICAgICAgIHNlbGYuc3luY2hlZCgnc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5zY3JvbGwueSA9IE1hdGgucm91bmQoc2VsZi5nZXRTY3JvbGxUb3AoKSAvIHNlbGYuc2Nyb2xscmF0aW8ueSk7XHJcbiAgICAgICAgICBpZiAoc2VsZi5yYWlsaCkgc2VsZi5zY3JvbGwueCA9IE1hdGgucm91bmQoc2VsZi5nZXRTY3JvbGxMZWZ0KCkgLyBzZWxmLnNjcm9sbHJhdGlvLngpO1xyXG4gICAgICAgICAgc2VsZi5ub3RpY2VDdXJzb3IoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHNlbGYuYmluZChzZWxmLmRvY3Njcm9sbCwgXCJzY3JvbGxcIiwgc2VsZi5vbnNjcm9sbCk7XHJcblxyXG4gICAgdGhpcy5kb1pvb21JbiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGlmIChzZWxmLnpvb21hY3RpdmUpIHJldHVybjtcclxuICAgICAgc2VsZi56b29tYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgIHNlbGYuem9vbXJlc3RvcmUgPSB7XHJcbiAgICAgICAgc3R5bGU6IHt9XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBsc3QgPSBbJ3Bvc2l0aW9uJywgJ3RvcCcsICdsZWZ0JywgJ3pJbmRleCcsICdiYWNrZ3JvdW5kQ29sb3InLCAnbWFyZ2luVG9wJywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0J107XHJcbiAgICAgIHZhciB3aW4gPSBzZWxmLndpblswXS5zdHlsZTtcclxuICAgICAgZm9yICh2YXIgYSBpbiBsc3QpIHtcclxuICAgICAgICB2YXIgcHAgPSBsc3RbYV07XHJcbiAgICAgICAgc2VsZi56b29tcmVzdG9yZS5zdHlsZVtwcF0gPSAod2luW3BwXSAhPT0gdW5kZWZpbmVkKSA/IHdpbltwcF0gOiAnJztcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi56b29tcmVzdG9yZS5zdHlsZS53aWR0aCA9IHNlbGYud2luLmNzcygnd2lkdGgnKTtcclxuICAgICAgc2VsZi56b29tcmVzdG9yZS5zdHlsZS5oZWlnaHQgPSBzZWxmLndpbi5jc3MoJ2hlaWdodCcpO1xyXG5cclxuICAgICAgc2VsZi56b29tcmVzdG9yZS5wYWRkaW5nID0ge1xyXG4gICAgICAgIHc6IHNlbGYud2luLm91dGVyV2lkdGgoKSAtIHNlbGYud2luLndpZHRoKCksXHJcbiAgICAgICAgaDogc2VsZi53aW4ub3V0ZXJIZWlnaHQoKSAtIHNlbGYud2luLmhlaWdodCgpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoY2FwLmlzaW9zNCkge1xyXG4gICAgICAgIHNlbGYuem9vbXJlc3RvcmUuc2Nyb2xsVG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcclxuICAgICAgICAkd2luZG93LnNjcm9sbFRvcCgwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi53aW4uY3NzKHtcclxuICAgICAgICBwb3NpdGlvbjogKGNhcC5pc2lvczQpID8gXCJhYnNvbHV0ZVwiIDogXCJmaXhlZFwiLFxyXG4gICAgICAgIHRvcDogMCxcclxuICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgIHpJbmRleDogZ2xvYmFsbWF4emluZGV4ICsgMTAwLFxyXG4gICAgICAgIG1hcmdpbjogMFxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIGJrZyA9IHNlbGYud2luLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgaWYgKFwiXCIgPT09IGJrZyB8fCAvdHJhbnNwYXJlbnR8cmdiYVxcKDAsIDAsIDAsIDBcXCl8cmdiYVxcKDAsMCwwLDBcXCkvLnRlc3QoYmtnKSkgc2VsZi53aW4uY3NzKFwiYmFja2dyb3VuZENvbG9yXCIsIFwiI2ZmZlwiKTtcclxuICAgICAgc2VsZi5yYWlsLmNzcyh7XHJcbiAgICAgICAgekluZGV4OiBnbG9iYWxtYXh6aW5kZXggKyAxMDFcclxuICAgICAgfSk7XHJcbiAgICAgIHNlbGYuem9vbS5jc3Moe1xyXG4gICAgICAgIHpJbmRleDogZ2xvYmFsbWF4emluZGV4ICsgMTAyXHJcbiAgICAgIH0pO1xyXG4gICAgICBzZWxmLnpvb20uY3NzKCdiYWNrZ3JvdW5kUG9zaXRpb24nLCAnMCAtMThweCcpO1xyXG4gICAgICBzZWxmLnJlc2l6ZVpvb20oKTtcclxuXHJcbiAgICAgIGlmIChzZWxmLm9uem9vbWluKSBzZWxmLm9uem9vbWluLmNhbGwoc2VsZik7XHJcblxyXG4gICAgICByZXR1cm4gc2VsZi5jYW5jZWxFdmVudChlKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5kb1pvb21PdXQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAoIXNlbGYuem9vbWFjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICBzZWxmLnpvb21hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgIHNlbGYud2luLmNzcyhcIm1hcmdpblwiLCBcIlwiKTtcclxuICAgICAgc2VsZi53aW4uY3NzKHNlbGYuem9vbXJlc3RvcmUuc3R5bGUpO1xyXG5cclxuICAgICAgaWYgKGNhcC5pc2lvczQpIHtcclxuICAgICAgICAkd2luZG93LnNjcm9sbFRvcChzZWxmLnpvb21yZXN0b3JlLnNjcm9sbFRvcCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYucmFpbC5jc3Moe1xyXG4gICAgICAgIFwiei1pbmRleFwiOiBzZWxmLnppbmRleFxyXG4gICAgICB9KTtcclxuICAgICAgc2VsZi56b29tLmNzcyh7XHJcbiAgICAgICAgXCJ6LWluZGV4XCI6IHNlbGYuemluZGV4XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZWxmLnpvb21yZXN0b3JlID0gZmFsc2U7XHJcbiAgICAgIHNlbGYuem9vbS5jc3MoJ2JhY2tncm91bmRQb3NpdGlvbicsICcwIDAnKTtcclxuICAgICAgc2VsZi5vblJlc2l6ZSgpO1xyXG5cclxuICAgICAgaWYgKHNlbGYub256b29tb3V0KSBzZWxmLm9uem9vbW91dC5jYWxsKHNlbGYpO1xyXG5cclxuICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsRXZlbnQoZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZG9ab29tID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgcmV0dXJuIChzZWxmLnpvb21hY3RpdmUpID8gc2VsZi5kb1pvb21PdXQoZSkgOiBzZWxmLmRvWm9vbUluKGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlc2l6ZVpvb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghc2VsZi56b29tYWN0aXZlKSByZXR1cm47XHJcblxyXG4gICAgICB2YXIgcHkgPSBzZWxmLmdldFNjcm9sbFRvcCgpOyAvL3ByZXNlcnZlIHNjcm9sbGluZyBwb3NpdGlvblxyXG4gICAgICBzZWxmLndpbi5jc3Moe1xyXG4gICAgICAgIHdpZHRoOiAkd2luZG93LndpZHRoKCkgLSBzZWxmLnpvb21yZXN0b3JlLnBhZGRpbmcudyArIFwicHhcIixcclxuICAgICAgICBoZWlnaHQ6ICR3aW5kb3cuaGVpZ2h0KCkgLSBzZWxmLnpvb21yZXN0b3JlLnBhZGRpbmcuaCArIFwicHhcIlxyXG4gICAgICB9KTtcclxuICAgICAgc2VsZi5vblJlc2l6ZSgpO1xyXG5cclxuICAgICAgc2VsZi5zZXRTY3JvbGxUb3AoTWF0aC5taW4oc2VsZi5wYWdlLm1heGgsIHB5KSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICQubmljZXNjcm9sbC5wdXNoKHRoaXMpO1xyXG5cclxuICB9O1xyXG5cclxuICAvLyBJbnNwaXJlZCBieSB0aGUgd29yayBvZiBLaW4gQmxhc1xyXG4gIC8vIGh0dHA6Ly93ZWJwcm8uaG9zdC5hZG9iZS5jb20vcGVvcGxlL2pibGFzL21vbWVudHVtL2luY2x1ZGVzL2pxdWVyeS5tb21lbnR1bS4wLjcuanMgIFxyXG4gIHZhciBTY3JvbGxNb21lbnR1bUNsYXNzMkQgPSBmdW5jdGlvbiAobmMpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMubmMgPSBuYztcclxuXHJcbiAgICB0aGlzLmxhc3R4ID0gMDtcclxuICAgIHRoaXMubGFzdHkgPSAwO1xyXG4gICAgdGhpcy5zcGVlZHggPSAwO1xyXG4gICAgdGhpcy5zcGVlZHkgPSAwO1xyXG4gICAgdGhpcy5sYXN0dGltZSA9IDA7XHJcbiAgICB0aGlzLnN0ZXB0aW1lID0gMDtcclxuICAgIHRoaXMuc25hcHggPSBmYWxzZTtcclxuICAgIHRoaXMuc25hcHkgPSBmYWxzZTtcclxuICAgIHRoaXMuZGVtdWx4ID0gMDtcclxuICAgIHRoaXMuZGVtdWx5ID0gMDtcclxuXHJcbiAgICB0aGlzLmxhc3RzY3JvbGx4ID0gLTE7XHJcbiAgICB0aGlzLmxhc3RzY3JvbGx5ID0gLTE7XHJcblxyXG4gICAgdGhpcy5jaGt4ID0gMDtcclxuICAgIHRoaXMuY2hreSA9IDA7XHJcblxyXG4gICAgdGhpcy50aW1lciA9IDA7XHJcblxyXG4gICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uIChweCwgcHkpIHtcclxuICAgICAgc2VsZi5zdG9wKCk7XHJcbiAgICAgIHNlbGYuc3RlcHRpbWUgPSAwO1xyXG4gICAgICBzZWxmLmxhc3R0aW1lID0gbm93KCk7XHJcbiAgICAgIHNlbGYuc3BlZWR4ID0gMDtcclxuICAgICAgc2VsZi5zcGVlZHkgPSAwO1xyXG4gICAgICBzZWxmLmxhc3R4ID0gcHg7XHJcbiAgICAgIHNlbGYubGFzdHkgPSBweTtcclxuICAgICAgc2VsZi5sYXN0c2Nyb2xseCA9IC0xO1xyXG4gICAgICBzZWxmLmxhc3RzY3JvbGx5ID0gLTE7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKHB4LCBweSkge1xyXG4gICAgICB2YXIgdG0gPSBub3coKTtcclxuICAgICAgc2VsZi5zdGVwdGltZSA9IHRtIC0gc2VsZi5sYXN0dGltZTtcclxuICAgICAgc2VsZi5sYXN0dGltZSA9IHRtO1xyXG4gICAgICB2YXIgZHkgPSBweSAtIHNlbGYubGFzdHk7XHJcbiAgICAgIHZhciBkeCA9IHB4IC0gc2VsZi5sYXN0eDtcclxuICAgICAgdmFyIHN5ID0gc2VsZi5uYy5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgdmFyIHN4ID0gc2VsZi5uYy5nZXRTY3JvbGxMZWZ0KCk7XHJcbiAgICAgIHZhciBuZXd5ID0gc3kgKyBkeTtcclxuICAgICAgdmFyIG5ld3ggPSBzeCArIGR4O1xyXG4gICAgICBzZWxmLnNuYXB4ID0gKG5ld3ggPCAwKSB8fCAobmV3eCA+IHNlbGYubmMucGFnZS5tYXh3KTtcclxuICAgICAgc2VsZi5zbmFweSA9IChuZXd5IDwgMCkgfHwgKG5ld3kgPiBzZWxmLm5jLnBhZ2UubWF4aCk7XHJcbiAgICAgIHNlbGYuc3BlZWR4ID0gZHg7XHJcbiAgICAgIHNlbGYuc3BlZWR5ID0gZHk7XHJcbiAgICAgIHNlbGYubGFzdHggPSBweDtcclxuICAgICAgc2VsZi5sYXN0eSA9IHB5O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYubmMudW5zeW5jaGVkKFwiZG9tb21lbnR1bTJkXCIpO1xyXG4gICAgICBpZiAoc2VsZi50aW1lcikgY2xlYXJUaW1lb3V0KHNlbGYudGltZXIpO1xyXG4gICAgICBzZWxmLnRpbWVyID0gMDtcclxuICAgICAgc2VsZi5sYXN0c2Nyb2xseCA9IC0xO1xyXG4gICAgICBzZWxmLmxhc3RzY3JvbGx5ID0gLTE7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZG9TbmFweSA9IGZ1bmN0aW9uIChueCwgbnkpIHtcclxuICAgICAgdmFyIHNuYXAgPSBmYWxzZTtcclxuXHJcbiAgICAgIGlmIChueSA8IDApIHtcclxuICAgICAgICBueSA9IDA7XHJcbiAgICAgICAgc25hcCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAobnkgPiBzZWxmLm5jLnBhZ2UubWF4aCkge1xyXG4gICAgICAgIG55ID0gc2VsZi5uYy5wYWdlLm1heGg7XHJcbiAgICAgICAgc25hcCA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChueCA8IDApIHtcclxuICAgICAgICBueCA9IDA7XHJcbiAgICAgICAgc25hcCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAobnggPiBzZWxmLm5jLnBhZ2UubWF4dykge1xyXG4gICAgICAgIG54ID0gc2VsZi5uYy5wYWdlLm1heHc7XHJcbiAgICAgICAgc25hcCA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIChzbmFwKSA/IHNlbGYubmMuZG9TY3JvbGxQb3MobngsIG55LCBzZWxmLm5jLm9wdC5zbmFwYmFja3NwZWVkKSA6IHNlbGYubmMudHJpZ2dlclNjcm9sbEVuZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmRvTW9tZW50dW0gPSBmdW5jdGlvbiAoZ3ApIHtcclxuICAgICAgdmFyIHQgPSBub3coKTtcclxuICAgICAgdmFyIGwgPSAoZ3ApID8gdCArIGdwIDogc2VsZi5sYXN0dGltZTtcclxuXHJcbiAgICAgIHZhciBzbCA9IHNlbGYubmMuZ2V0U2Nyb2xsTGVmdCgpO1xyXG4gICAgICB2YXIgc3QgPSBzZWxmLm5jLmdldFNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgdmFyIHBhZ2VoID0gc2VsZi5uYy5wYWdlLm1heGg7XHJcbiAgICAgIHZhciBwYWdldyA9IHNlbGYubmMucGFnZS5tYXh3O1xyXG5cclxuICAgICAgc2VsZi5zcGVlZHggPSAocGFnZXcgPiAwKSA/IE1hdGgubWluKDYwLCBzZWxmLnNwZWVkeCkgOiAwO1xyXG4gICAgICBzZWxmLnNwZWVkeSA9IChwYWdlaCA+IDApID8gTWF0aC5taW4oNjAsIHNlbGYuc3BlZWR5KSA6IDA7XHJcblxyXG4gICAgICB2YXIgY2hrID0gbCAmJiAodCAtIGwpIDw9IDYwO1xyXG5cclxuICAgICAgaWYgKChzdCA8IDApIHx8IChzdCA+IHBhZ2VoKSB8fCAoc2wgPCAwKSB8fCAoc2wgPiBwYWdldykpIGNoayA9IGZhbHNlO1xyXG5cclxuICAgICAgdmFyIHN5ID0gKHNlbGYuc3BlZWR5ICYmIGNoaykgPyBzZWxmLnNwZWVkeSA6IGZhbHNlO1xyXG4gICAgICB2YXIgc3ggPSAoc2VsZi5zcGVlZHggJiYgY2hrKSA/IHNlbGYuc3BlZWR4IDogZmFsc2U7XHJcblxyXG4gICAgICBpZiAoc3kgfHwgc3gpIHtcclxuICAgICAgICB2YXIgdG0gPSBNYXRoLm1heCgxNiwgc2VsZi5zdGVwdGltZSk7IC8vdGltZW91dCBncmFudWxhcml0eVxyXG5cclxuICAgICAgICBpZiAodG0gPiA1MCkgeyAvLyBkbyBzbW9vdGhcclxuICAgICAgICAgIHZhciB4bSA9IHRtIC8gNTA7XHJcbiAgICAgICAgICBzZWxmLnNwZWVkeCAqPSB4bTtcclxuICAgICAgICAgIHNlbGYuc3BlZWR5ICo9IHhtO1xyXG4gICAgICAgICAgdG0gPSA1MDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuZGVtdWx4eSA9IDA7XHJcblxyXG4gICAgICAgIHNlbGYubGFzdHNjcm9sbHggPSBzZWxmLm5jLmdldFNjcm9sbExlZnQoKTtcclxuICAgICAgICBzZWxmLmNoa3ggPSBzZWxmLmxhc3RzY3JvbGx4O1xyXG4gICAgICAgIHNlbGYubGFzdHNjcm9sbHkgPSBzZWxmLm5jLmdldFNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHNlbGYuY2hreSA9IHNlbGYubGFzdHNjcm9sbHk7XHJcblxyXG4gICAgICAgIHZhciBueCA9IHNlbGYubGFzdHNjcm9sbHg7XHJcbiAgICAgICAgdmFyIG55ID0gc2VsZi5sYXN0c2Nyb2xseTtcclxuXHJcbiAgICAgICAgdmFyIG9uc2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIGRmID0gKChub3coKSAtIHQpID4gNjAwKSA/IDAuMDQgOiAwLjAyO1xyXG5cclxuICAgICAgICAgIGlmIChzZWxmLnNwZWVkeCkge1xyXG4gICAgICAgICAgICBueCA9IE1hdGguZmxvb3Ioc2VsZi5sYXN0c2Nyb2xseCAtIChzZWxmLnNwZWVkeCAqICgxIC0gc2VsZi5kZW11bHh5KSkpO1xyXG4gICAgICAgICAgICBzZWxmLmxhc3RzY3JvbGx4ID0gbng7XHJcbiAgICAgICAgICAgIGlmICgobnggPCAwKSB8fCAobnggPiBwYWdldykpIGRmID0gMC4xMDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5zcGVlZHkpIHtcclxuICAgICAgICAgICAgbnkgPSBNYXRoLmZsb29yKHNlbGYubGFzdHNjcm9sbHkgLSAoc2VsZi5zcGVlZHkgKiAoMSAtIHNlbGYuZGVtdWx4eSkpKTtcclxuICAgICAgICAgICAgc2VsZi5sYXN0c2Nyb2xseSA9IG55O1xyXG4gICAgICAgICAgICBpZiAoKG55IDwgMCkgfHwgKG55ID4gcGFnZWgpKSBkZiA9IDAuMTA7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi5kZW11bHh5ID0gTWF0aC5taW4oMSwgc2VsZi5kZW11bHh5ICsgZGYpO1xyXG5cclxuICAgICAgICAgIHNlbGYubmMuc3luY2hlZChcImRvbW9tZW50dW0yZFwiLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5zcGVlZHgpIHtcclxuICAgICAgICAgICAgICB2YXIgc2N4ID0gc2VsZi5uYy5nZXRTY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGlmIChzY3ggIT0gc2VsZi5jaGt4KSBzZWxmLnN0b3AoKTtcclxuICAgICAgICAgICAgICBzZWxmLmNoa3ggPSBueDtcclxuICAgICAgICAgICAgICBzZWxmLm5jLnNldFNjcm9sbExlZnQobngpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5zcGVlZHkpIHtcclxuICAgICAgICAgICAgICB2YXIgc2N5ID0gc2VsZi5uYy5nZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgaWYgKHNjeSAhPSBzZWxmLmNoa3kpIHNlbGYuc3RvcCgpO1xyXG4gICAgICAgICAgICAgIHNlbGYuY2hreSA9IG55O1xyXG4gICAgICAgICAgICAgIHNlbGYubmMuc2V0U2Nyb2xsVG9wKG55KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzZWxmLnRpbWVyKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5uYy5oaWRlQ3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgc2VsZi5kb1NuYXB5KG54LCBueSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5kZW11bHh5IDwgMSkge1xyXG4gICAgICAgICAgICBzZWxmLnRpbWVyID0gc2V0VGltZW91dChvbnNjcm9sbCwgdG0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5zdG9wKCk7XHJcbiAgICAgICAgICAgIHNlbGYubmMuaGlkZUN1cnNvcigpO1xyXG4gICAgICAgICAgICBzZWxmLmRvU25hcHkobngsIG55KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBvbnNjcm9sbCgpO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLmRvU25hcHkoc2VsZi5uYy5nZXRTY3JvbGxMZWZ0KCksIHNlbGYubmMuZ2V0U2Nyb2xsVG9wKCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIG92ZXJyaWRlIGpRdWVyeSBzY3JvbGxUb3BcclxuICB2YXIgX3Njcm9sbFRvcCA9IGpRdWVyeS5mbi5zY3JvbGxUb3A7IC8vIHByZXNlcnZlIG9yaWdpbmFsIGZ1bmN0aW9uXHJcblxyXG4gIGpRdWVyeS5jc3NIb29rcy5wYWdlWU9mZnNldCA9IHtcclxuICAgIGdldDogZnVuY3Rpb24gKGVsZW0sIGNvbXB1dGVkLCBleHRyYSkge1xyXG4gICAgICB2YXIgbmljZSA9ICQuZGF0YShlbGVtLCAnX19uaWNlc2Nyb2xsJykgfHwgZmFsc2U7XHJcbiAgICAgIHJldHVybiAobmljZSAmJiBuaWNlLmlzaHdzY3JvbGwpID8gbmljZS5nZXRTY3JvbGxUb3AoKSA6IF9zY3JvbGxUb3AuY2FsbChlbGVtKTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChlbGVtLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgbmljZSA9ICQuZGF0YShlbGVtLCAnX19uaWNlc2Nyb2xsJykgfHwgZmFsc2U7XHJcbiAgICAgIChuaWNlICYmIG5pY2UuaXNod3Njcm9sbCkgPyBuaWNlLnNldFNjcm9sbFRvcChwYXJzZUludCh2YWx1ZSkpIDogX3Njcm9sbFRvcC5jYWxsKGVsZW0sIHZhbHVlKTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgalF1ZXJ5LmZuLnNjcm9sbFRvcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdmFyIG5pY2UgPSAodGhpc1swXSkgPyAkLmRhdGEodGhpc1swXSwgJ19fbmljZXNjcm9sbCcpIHx8IGZhbHNlIDogZmFsc2U7XHJcbiAgICAgIHJldHVybiAobmljZSAmJiBuaWNlLmlzaHdzY3JvbGwpID8gbmljZS5nZXRTY3JvbGxUb3AoKSA6IF9zY3JvbGxUb3AuY2FsbCh0aGlzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuaWNlID0gJC5kYXRhKHRoaXMsICdfX25pY2VzY3JvbGwnKSB8fCBmYWxzZTtcclxuICAgICAgICAobmljZSAmJiBuaWNlLmlzaHdzY3JvbGwpID8gbmljZS5zZXRTY3JvbGxUb3AocGFyc2VJbnQodmFsdWUpKSA6IF9zY3JvbGxUb3AuY2FsbCgkKHRoaXMpLCB2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIG92ZXJyaWRlIGpRdWVyeSBzY3JvbGxMZWZ0XHJcbiAgdmFyIF9zY3JvbGxMZWZ0ID0galF1ZXJ5LmZuLnNjcm9sbExlZnQ7IC8vIHByZXNlcnZlIG9yaWdpbmFsIGZ1bmN0aW9uXHJcblxyXG4gICQuY3NzSG9va3MucGFnZVhPZmZzZXQgPSB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChlbGVtLCBjb21wdXRlZCwgZXh0cmEpIHtcclxuICAgICAgdmFyIG5pY2UgPSAkLmRhdGEoZWxlbSwgJ19fbmljZXNjcm9sbCcpIHx8IGZhbHNlO1xyXG4gICAgICByZXR1cm4gKG5pY2UgJiYgbmljZS5pc2h3c2Nyb2xsKSA/IG5pY2UuZ2V0U2Nyb2xsTGVmdCgpIDogX3Njcm9sbExlZnQuY2FsbChlbGVtKTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChlbGVtLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgbmljZSA9ICQuZGF0YShlbGVtLCAnX19uaWNlc2Nyb2xsJykgfHwgZmFsc2U7XHJcbiAgICAgIChuaWNlICYmIG5pY2UuaXNod3Njcm9sbCkgPyBuaWNlLnNldFNjcm9sbExlZnQocGFyc2VJbnQodmFsdWUpKSA6IF9zY3JvbGxMZWZ0LmNhbGwoZWxlbSwgdmFsdWUpO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBqUXVlcnkuZm4uc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdmFyIG5pY2UgPSAodGhpc1swXSkgPyAkLmRhdGEodGhpc1swXSwgJ19fbmljZXNjcm9sbCcpIHx8IGZhbHNlIDogZmFsc2U7XHJcbiAgICAgIHJldHVybiAobmljZSAmJiBuaWNlLmlzaHdzY3JvbGwpID8gbmljZS5nZXRTY3JvbGxMZWZ0KCkgOiBfc2Nyb2xsTGVmdC5jYWxsKHRoaXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5pY2UgPSAkLmRhdGEodGhpcywgJ19fbmljZXNjcm9sbCcpIHx8IGZhbHNlO1xyXG4gICAgICAgIChuaWNlICYmIG5pY2UuaXNod3Njcm9sbCkgPyBuaWNlLnNldFNjcm9sbExlZnQocGFyc2VJbnQodmFsdWUpKSA6IF9zY3JvbGxMZWZ0LmNhbGwoJCh0aGlzKSwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgTmljZVNjcm9sbEFycmF5ID0gZnVuY3Rpb24gKGRvbXMpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMubGVuZ3RoID0gMDtcclxuICAgIHRoaXMubmFtZSA9IFwibmljZXNjcm9sbGFycmF5XCI7XHJcblxyXG4gICAgdGhpcy5lYWNoID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICQuZWFjaChzZWxmLCBmbik7XHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAobmljZSkge1xyXG4gICAgICBzZWxmW3NlbGYubGVuZ3RoXSA9IG5pY2U7XHJcbiAgICAgIHNlbGYubGVuZ3RoKys7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZXEgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgIHJldHVybiBzZWxmW2lkeF07XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChkb21zKSB7XHJcbiAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgZG9tcy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgIHZhciBuaWNlID0gJC5kYXRhKGRvbXNbYV0sICdfX25pY2VzY3JvbGwnKSB8fCBmYWxzZTtcclxuICAgICAgICBpZiAobmljZSkge1xyXG4gICAgICAgICAgdGhpc1t0aGlzLmxlbmd0aF0gPSBuaWNlO1xyXG4gICAgICAgICAgdGhpcy5sZW5ndGgrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBtcGxleChlbCwgbHN0LCBmbikge1xyXG4gICAgZm9yICh2YXIgYSA9IDAsIGwgPSBsc3QubGVuZ3RoOyBhIDwgbDsgYSsrKSBmbihlbCwgbHN0W2FdKTtcclxuICB9XHJcbiAgbXBsZXgoXHJcbiAgICBOaWNlU2Nyb2xsQXJyYXkucHJvdG90eXBlLCBbJ3Nob3cnLCAnaGlkZScsICd0b2dnbGUnLCAnb25SZXNpemUnLCAncmVzaXplJywgJ3JlbW92ZScsICdzdG9wJywgJ2RvU2Nyb2xsUG9zJ10sXHJcbiAgICBmdW5jdGlvbiAoZSwgbikge1xyXG4gICAgICBlW25dID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdGhpc1tuXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICApO1xyXG5cclxuICBqUXVlcnkuZm4uZ2V0TmljZVNjcm9sbCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIG5ldyBOaWNlU2Nyb2xsQXJyYXkodGhpcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpc1tpbmRleF0gJiYgJC5kYXRhKHRoaXNbaW5kZXhdLCAnX19uaWNlc2Nyb2xsJykgfHwgZmFsc2U7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHBzZXVkb3MgPSBqUXVlcnkuZXhwci5wc2V1ZG9zIHx8IGpRdWVyeS5leHByWyc6J107ICAvLyBqUXVlcnkgMyBtaWdyYXRpb25cclxuICBwc2V1ZG9zLm5pY2VzY3JvbGwgPSBmdW5jdGlvbiAoYSkge1xyXG4gICAgcmV0dXJuICQuZGF0YShhLCAnX19uaWNlc2Nyb2xsJykgIT09IHVuZGVmaW5lZDtcclxuICB9O1xyXG5cclxuICAkLmZuLm5pY2VTY3JvbGwgPSBmdW5jdGlvbiAod3JhcHBlciwgX29wdCkge1xyXG4gICAgaWYgKF9vcHQgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd3JhcHBlciA9PSBcIm9iamVjdFwiICYmICEoXCJqcXVlcnlcIiBpbiB3cmFwcGVyKSkge1xyXG4gICAgICBfb3B0ID0gd3JhcHBlcjtcclxuICAgICAgd3JhcHBlciA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZXQgPSBuZXcgTmljZVNjcm9sbEFycmF5KCk7XHJcblxyXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuXHJcbiAgICAgIHZhciBvcHQgPSAkLmV4dGVuZCh7fSwgX29wdCk7IC8vIGNsb25pbmdcclxuXHJcbiAgICAgIGlmICh3cmFwcGVyIHx8IGZhbHNlKSB7XHJcbiAgICAgICAgdmFyIHdycCA9ICQod3JhcHBlcik7XHJcbiAgICAgICAgb3B0LmRvYyA9ICh3cnAubGVuZ3RoID4gMSkgPyAkKHdyYXBwZXIsICR0aGlzKSA6IHdycDtcclxuICAgICAgICBvcHQud2luID0gJHRoaXM7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGRvY3VuZGVmID0gIShcImRvY1wiIGluIG9wdCk7XHJcbiAgICAgIGlmICghZG9jdW5kZWYgJiYgIShcIndpblwiIGluIG9wdCkpIG9wdC53aW4gPSAkdGhpcztcclxuXHJcbiAgICAgIHZhciBuaWNlID0gJHRoaXMuZGF0YSgnX19uaWNlc2Nyb2xsJykgfHwgZmFsc2U7XHJcbiAgICAgIGlmICghbmljZSkge1xyXG4gICAgICAgIG9wdC5kb2MgPSBvcHQuZG9jIHx8ICR0aGlzO1xyXG4gICAgICAgIG5pY2UgPSBuZXcgTmljZVNjcm9sbENsYXNzKG9wdCwgJHRoaXMpO1xyXG4gICAgICAgICR0aGlzLmRhdGEoJ19fbmljZXNjcm9sbCcsIG5pY2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldC5wdXNoKG5pY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIChyZXQubGVuZ3RoID09PSAxKSA/IHJldFswXSA6IHJldDtcclxuICB9O1xyXG5cclxuICBfd2luLk5pY2VTY3JvbGwgPSB7XHJcbiAgICBnZXRqUXVlcnk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGpRdWVyeTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBpZiAoISQubmljZXNjcm9sbCkge1xyXG4gICAgJC5uaWNlc2Nyb2xsID0gbmV3IE5pY2VTY3JvbGxBcnJheSgpO1xyXG4gICAgJC5uaWNlc2Nyb2xsLm9wdGlvbnMgPSBfZ2xvYmFsb3B0aW9ucztcclxuICB9XHJcblxyXG59KSk7IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0ICdqcXVlcnkubmljZXNjcm9sbCc7XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgXHJcbiAgICAkKFwiYm9keVwiKS5uaWNlU2Nyb2xsKHtcclxuICAgICAgY3Vyc29yY29sb3I6IFwiIzU1NVwiLFxyXG4gICAgICBjdXJzb3Jib3JkZXI6IFwiMXB4IHNvbGlkICM1NTVcIixcclxuICAgICAgY3Vyc29yd2lkdGg6IFwiMThcIixcclxuICAgICAgY3Vyc29ybWluaGVpZ2h0OiBcIjQwXCIsXHJcbiAgICAgIGN1cnNvcmJvcmRlcnJhZGl1czogXCIwXCIsXHJcbiAgICB9KTtcclxuICBcclxuICAgICQoXCIuaGVhZGVyXCIpLm5pY2VTY3JvbGwoe1xyXG4gICAgICAgIGN1cnNvcmNvbG9yOiBcIiM1NTVcIixcclxuICAgICAgICBjdXJzb3Jib3JkZXI6IFwiMXB4IHNvbGlkICM1NTVcIixcclxuICAgICAgICBjdXJzb3J3aWR0aDogXCIxOFwiLFxyXG4gICAgICAgIGN1cnNvcm1pbmhlaWdodDogXCI0MFwiLFxyXG4gICAgICAgIGN1cnNvcmJvcmRlcnJhZGl1czogXCIwXCIsXHJcbiAgICB9KTtcclxuICBcclxuICBcclxuICBcclxuICAgICQoJy5tZW51LWFjdGl2ZWEsIC5oZWFkZXItY29udGFpbmVyJykuaGVpZ2h0KCQod2luZG93KS5oZWlnaHQoKSk7XHJcbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcclxuICAgICAgJCgnLmhlYWRlci1jb250YWluZXInKS5oZWlnaHQoJCh3aW5kb3cpLmhlaWdodCgpKTtcclxuICAgIH0pO1xyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gICAgdmFyIG1lbnUgPSAkKCcubWVudS1hY3RpdmVhJyk7XHJcbiAgXHJcbiAgICAkKCcubWVudS1hY3RpdmVhIGg0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gIFxyXG4gICAgICBtZW51LnRvZ2dsZUNsYXNzKCdzaG93LW1lbnUnLCAnaGlkZS1tZW51Jyk7XHJcbiAgXHJcbiAgICAgIGlmIChtZW51Lmhhc0NsYXNzKCdzaG93LW1lbnUnKSkge1xyXG4gIFxyXG4gICAgICAgICQoJy5oZWFkZXInKS5hbmltYXRlKHtcclxuICBcclxuICAgICAgICAgIHBhZGRpbmdMZWZ0OiBtZW51LmlubmVyV2lkdGgoKVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgXHJcbiAgICAgICAgJCgnLmhlYWRlcicpLmFuaW1hdGUoe1xyXG4gIFxyXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDBcclxuICAgICAgICB9LCA1MDApO1xyXG4gIFxyXG4gICAgICB9XHJcbiAgXHJcbiAgICB9KTtcclxuICBcclxuICBcclxuICBcclxuICBcclxuICAgICQoJy5jb3B5cmlnaHQgaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICBcclxuICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcCA6ICcwJ30sIDEzMDApO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgICAkKCcuaGVhZGVyIC51c2VyLWksIC5oZWFkZXIgLmZpbmdlci1pLCAuaGVhZGVyIC5tZXNzYWdlLWksIC5oZWFkZXIgLnNjcmVlbi1pLCAuaGVhZGVyIC5jYW0taSAnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcCA6ICgkKCQodGhpcykuZGF0YSgnc2Nyb2xsJykpLm9mZnNldCgpLnRvcCkgKyAxfSwgMTUwMCk7XHJcbiAgICB9KTtcclxuICBcclxuICBcclxuICBcclxuICBcclxuICB9KTtcclxuICAiXSwibmFtZXMiOlsialF1ZXJ5IiwiZG9tZm9jdXMiLCJtb3VzZWZvY3VzIiwidGFiaW5kZXhjb3VudGVyIiwiYXNjcmFpbGNvdW50ZXIiLCJnbG9iYWxtYXh6aW5kZXgiLCIkIiwiX2RvYyIsImRvY3VtZW50IiwiX3dpbiIsIndpbmRvdyIsIiR3aW5kb3ciLCJkZWxlZ2F0ZXZlbnRzIiwiZ2V0U2NyaXB0UGF0aCIsInMiLCJzY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwicGF0aCIsInNyYyIsInNwbGl0Iiwic2xpY2UiLCJqb2luIiwic2V0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhckFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJhbmlsYXN0dGltZSIsImNhbGxiYWNrIiwiZWxlbWVudCIsImN1cnJUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJ0aW1lVG9DYWxsIiwiTWF0aCIsIm1heCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJDbHNNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJub3ciLCJfZ2xvYmFsb3B0aW9ucyIsInppbmRleCIsImN1cnNvcm9wYWNpdHltaW4iLCJjdXJzb3JvcGFjaXR5bWF4IiwiY3Vyc29yY29sb3IiLCJjdXJzb3J3aWR0aCIsImN1cnNvcmJvcmRlciIsImN1cnNvcmJvcmRlcnJhZGl1cyIsInNjcm9sbHNwZWVkIiwibW91c2VzY3JvbGxzdGVwIiwidG91Y2hiZWhhdmlvciIsImVtdWxhdGV0b3VjaCIsImh3YWNjZWxlcmF0aW9uIiwidXNldHJhbnNpdGlvbiIsImJveHpvb20iLCJkYmxjbGlja3pvb20iLCJnZXN0dXJlem9vbSIsImdyYWJjdXJzb3JlbmFibGVkIiwiYXV0b2hpZGVtb2RlIiwiYmFja2dyb3VuZCIsImlmcmFtZWF1dG9yZXNpemUiLCJjdXJzb3JtaW5oZWlnaHQiLCJwcmVzZXJ2ZW5hdGl2ZXNjcm9sbGluZyIsInJhaWxvZmZzZXQiLCJyYWlsaG9mZnNldCIsImJvdW5jZXNjcm9sbCIsInNwYWNlYmFyZW5hYmxlZCIsInJhaWxwYWRkaW5nIiwidG9wIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwiZGlzYWJsZW91dGxpbmUiLCJob3JpenJhaWxlbmFibGVkIiwicmFpbGFsaWduIiwicmFpbHZhbGlnbiIsImVuYWJsZXRyYW5zbGF0ZTNkIiwiZW5hYmxlbW91c2V3aGVlbCIsImVuYWJsZWtleWJvYXJkIiwic21vb3Roc2Nyb2xsIiwic2Vuc2l0aXZlcmFpbCIsImVuYWJsZW1vdXNlbG9ja2FwaSIsImN1cnNvcmZpeGVkaGVpZ2h0IiwiZGlyZWN0aW9ubG9ja2RlYWR6b25lIiwiaGlkZWN1cnNvcmRlbGF5IiwibmF0aXZlcGFyZW50c2Nyb2xsaW5nIiwiZW5hYmxlc2Nyb2xsb25zZWxlY3Rpb24iLCJvdmVyZmxvd3giLCJvdmVyZmxvd3kiLCJjdXJzb3JkcmFnc3BlZWQiLCJydGxtb2RlIiwiY3Vyc29yZHJhZ29udG91Y2giLCJvbmVheGlzbW91c2Vtb2RlIiwic2NyaXB0cGF0aCIsInByZXZlbnRtdWx0aXRvdWNoc2Nyb2xsaW5nIiwiZGlzYWJsZW11dGF0aW9ub2JzZXJ2ZXIiLCJlbmFibGVvYnNlcnZlciIsInNjcm9sbGJhcmlkIiwiYnJvd3NlcmRldGVjdGVkIiwiZ2V0QnJvd3NlckRldGVjdGlvbiIsIl9lbCIsImNyZWF0ZUVsZW1lbnQiLCJfc3R5bGUiLCJzdHlsZSIsIl9hZ2VudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl9wbGF0Zm9ybSIsInBsYXRmb3JtIiwiZCIsImRldGVjdEN1cnNvckdyYWIiLCJsc3QiLCJpc2Nocm9tZSIsImlzY2hyb21lMzgiLCJpc2llIiwiYSIsImwiLCJwIiwiY3Vyc29yIiwiaGFzcG9pbnRlcmxvY2siLCJpc29wZXJhIiwiaXNvcGVyYTEyIiwiaXNvcGVyYW1pbmkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJvcGVyYW1pbmkiLCJpc2llb2xkIiwiaXNpZTciLCJkb2N1bWVudE1vZGUiLCJpc2llOCIsImlzaWU5IiwiaXNpZTEwIiwiaXNpZTExIiwiaXNtc2VkZ2UiLCJpc21vemlsbGEiLCJpc3dlYmtpdCIsImlzY2hyb21lMjIiLCJpc2Nocm9tZTI2IiwiY2FudG91Y2giLCJkb2N1bWVudEVsZW1lbnQiLCJoYXN3M2N0b3VjaCIsIlBvaW50ZXJFdmVudCIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImhhc21zdG91Y2giLCJNU1BvaW50ZXJFdmVudCIsImlzbWFjIiwidGVzdCIsImlzaW9zIiwiaXNpb3M0IiwiaXNpb3M3IiwiaXNpb3M4IiwiaXNpb3MxMCIsIlByb3h5IiwiaXNhbmRyb2lkIiwiaGFzZXZlbnRsaXN0ZW5lciIsInRyc3R5bGUiLCJoYXN0cmFuc2Zvcm0iLCJoYXN0cmFuc2xhdGUzZCIsInRyYW5zaXRpb25zdHlsZSIsImhhc3RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uZW5kIiwiY2hlY2siLCJjIiwidW5kZWZpbmVkIiwicHJlZml4c3R5bGUiLCJwcmVmaXgiLCJldnMiLCJjdXJzb3JncmFidmFsdWUiLCJoYXNtb3VzZWNhcHR1cmUiLCJoYXNNdXRhdGlvbk9ic2VydmVyIiwiTmljZVNjcm9sbENsYXNzIiwibXlvcHQiLCJtZSIsInNlbGYiLCJ0aGlzIiwidmVyc2lvbiIsIm5hbWUiLCIkYm9keSIsIm9wdCIsImRvYyIsIndpbiIsImV4dGVuZCIsInNuYXBiYWNrc3BlZWQiLCJpZGRvYyIsImlzcGFnZSIsIm5vZGVOYW1lIiwiaGFzd3JhcHBlciIsImRvY3Njcm9sbCIsImJvZHkiLCJ2aWV3cG9ydCIsImlzZml4ZWQiLCJpZnJhbWUiLCJpc2lmcmFtZSIsImlzdGV4dGFyZWEiLCJmb3JjZXNjcmVlbiIsImNhbnNob3dvbm1vdXNlZXZlbnQiLCJvbm1vdXNlZG93biIsIm9ubW91c2V1cCIsIm9ubW91c2Vtb3ZlIiwib25tb3VzZXdoZWVsIiwib25rZXlwcmVzcyIsIm9uZ2VzdHVyZXpvb20iLCJvbmNsaWNrIiwib25zY3JvbGxzdGFydCIsIm9uc2Nyb2xsZW5kIiwib25zY3JvbGxjYW5jZWwiLCJvbnpvb21pbiIsIm9uem9vbW91dCIsInZpZXciLCJwYWdlIiwic2Nyb2xsIiwieCIsInkiLCJzY3JvbGxyYXRpbyIsImN1cnNvcmhlaWdodCIsInNjcm9sbHZhbHVlbWF4IiwidGFyZ2V0Iiwid3JpdGluZ01vZGUiLCJjc3MiLCJpc3J0bG1vZGUiLCJpc3ZlcnRpY2FsIiwic2Nyb2xscnVubmluZyIsInNjcm9sbG1vbSIsIm9ic2VydmVyIiwib2JzZXJ2ZXJyZW1vdmVyIiwib2JzZXJ2ZXJib2R5IiwiZ2V0RWxlbWVudEJ5SWQiLCJyYWlsIiwiY3Vyc29yZnJlZXplZCIsInNlbGVjdGlvbmRyYWciLCJ6b29tIiwiem9vbWFjdGl2ZSIsImhhc2ZvY3VzIiwiaGFzbW91c2Vmb2N1cyIsInJhaWxzbG9ja2VkIiwibG9ja2VkIiwiaGlkZGVuIiwiY3Vyc29yYWN0aXZlIiwid2hlZWxwcmV2ZW50ZWQiLCJuYXRpdmVzY3JvbGxpbmdhcmVhIiwiY2hlY2thcmVhIiwiZXZlbnRzIiwic2F2ZWQiLCJkZWxheWxpc3QiLCJzeW5jbGlzdCIsImxhc3RkZWx0YXgiLCJsYXN0ZGVsdGF5IiwiZGV0ZWN0ZWQiLCJjYXAiLCJjYW5od3Njcm9sbCIsImlzaHdzY3JvbGwiLCJoYXNyZXZlcnNlaHIiLCJpc3RvdWNoY2FwYWJsZSIsImRlYm91bmNlZCIsImZuIiwidG0iLCJoIiwic3luY2hlZCIsInVuc3luY2hlZCIsImVsIiwicGFycyIsIm4iLCJwdXNoIiwic2Nyb2xsVG9wIiwidmFsIiwiZ2V0U2Nyb2xsVG9wIiwic2V0U2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImdldFNjcm9sbExlZnQiLCJzZXRTY3JvbGxMZWZ0IiwiQmV6aWVyQ2xhc3MiLCJzdCIsImVkIiwic3BkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0cyIsImRmIiwiZ2V0TWF0cml4VmFsdWVzIiwidHIiLCJzdWJzdHIiLCJyZXBsYWNlIiwiQjIiLCJ0IiwiQjMiLCJCNCIsImdldFBvcyIsImdldE5vdyIsInBjIiwiYnoiLCJ1cGRhdGUiLCJ0cmFuc2xhdGUiLCJ0eCIsInR5IiwibGFzdCIsIm10eCIsInRpbWVyc2Nyb2xsIiwiYmgiLCJub3RpZnlTY3JvbGxFdmVudCIsImUiLCJjcmVhdGVFdmVudCIsImluaXRVSUV2ZW50IiwibmljZWV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImN4c2Nyb2xsbGVmdCIsInNpbGVudCIsIm1heHciLCJhYnMiLCJnZXRaSW5kZXgiLCJkb20iLCJ6SW5kZXgiLCJub2RlVHlwZSIsInppIiwiaXNOYU4iLCJwYXJzZUludCIsInBhcmVudCIsImdldFRhcmdldCIsInNyY0VsZW1lbnQiLCJoYXNQYXJlbnQiLCJwYXJlbnROb2RlIiwiX2NvbnZlcnRCb3JkZXJXaWR0aCIsImdldFdpZHRoVG9QaXhlbCIsInByb3AiLCJjaGtoZWlnaHQiLCJ3ZCIsInB4IiwicGFyc2VGbG9hdCIsImJyZCIsIm91dGVySGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwiaW5uZXJXaWR0aCIsImdldERvY3VtZW50U2Nyb2xsT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsImdldE9mZnNldCIsIm9mcyIsIm9mZnNldCIsInNjcmwiLCJ3dyIsInZwIiwidXBkYXRlU2Nyb2xsQmFyIiwibGVuIiwicG9zIiwib2ZmIiwiaGVpZ2h0IiwicmFpbGgiLCJ3aWR0aCIsIndwb3MiLCJhbGlnbiIsImRvUmFpbENsaWNrIiwiZGJsIiwiaHIiLCJwZyIsImN1ciIsImNhbmNlbEV2ZW50IiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwiZG9TY3JvbGxMZWZ0IiwiZG9TY3JvbGxUb3AiLCJkb1Njcm9sbExlZnRCeSIsImRvU2Nyb2xsQnkiLCJ3IiwibmV3c2Nyb2xseSIsIm5ld3Njcm9sbHgiLCJoYXNhbmltYXRpb25mcmFtZSIsImhhc2NhbmNlbGFuaW1hdGlvbmZyYW1lIiwiaGFzYm9yZGVyYm94IiwiaW5pdCIsImdldENvbXB1dGVkU3R5bGUiLCJfc2Nyb2xseWhpZGRlbiIsImJpbmQiLCJvblNjcm9sbFRyYW5zaXRpb25FbmQiLCJjb250IiwicG9zaXRpb24iLCJib3JkZXIiLCJhZGRDbGFzcyIsImF0dHIiLCJ2Iiwia3AiLCJhcHBlbmQiLCJ2aXNpYmlsaXR5Iiwic2Nyb2xsYWJsZSIsImRyYWciLCJkb1pvb20iLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJzY2FsZSIsImRvWm9vbUluIiwiZG9ab29tT3V0Iiwib3ZlcmZsb3dYIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZENsaXAiLCJjdXJzb3JoIiwiYmQiLCJybHBvcyIsImdldFZpZXdwb3J0IiwiYXV0b2hpZGVkb20iLCJvcGFjaXR5IiwiYWRkIiwiaGlkZSIsIlNjcm9sbE1vbWVudHVtQ2xhc3MyRCIsIm9udG91Y2hzdGFydCIsInBvaW50ZXJUeXBlIiwiTVNQT0lOVEVSX1RZUEVfTU9VU0UiLCJoYXNtb3ZpbmciLCJ0aW1lciIsInRyaWdnZXJTY3JvbGxFbmQiLCJzdG9wIiwidGciLCJ0eXBlIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNtb3VzZSIsImNoYW5nZWRUb3VjaGVzIiwibGUiLCJvcmlnaW5hbCIsInNjcmVlblgiLCJzY3JlZW5ZIiwic3giLCJzeSIsInNsIiwicHQiLCJkbCIsImdldENvbnRlbnRTaXplIiwibWF4aCIsImNrIiwid3AiLCJsYXN0bW91c2V1cCIsInJlc2V0Iiwic2V0Q2FwdHVyZSIsIl9vbmNsaWNrIiwicHJldmVudGNsaWNrIiwib250b3VjaGVuZCIsImRvTW9tZW50dW0iLCJoaWRlQ3Vyc29yIiwicmVsZWFzZUNhcHR1cmUiLCJtb3ZlbmVlZG9mZnNldCIsImxvY2t0b2xsZXJhbmNlIiwib250b3VjaG1vdmUiLCJieWlmcmFtZSIsInRhcmdldFRvdWNoZXMiLCJvZnkiLCJvZngiLCJmeSIsIm15IiwiZngiLCJteCIsIm55Iiwicm91bmQiLCJueCIsImF5IiwiYXgiLCJkeiIsInRyaWdnZXJTY3JvbGxTdGFydCIsImNsaWNrIiwib25wcmV2ZW50Y2xpY2siLCJwcmVwYXJlVHJhbnNpdGlvbiIsInJlc2V0VHJhbnNpdGlvbiIsInNob3dDdXJzb3IiLCJzZWxlY3Rpb24iLCJjbGVhciIsIm9udG91Y2hzdGFydEN1cnNvciIsImhyb25seSIsImNhbmNlbFNjcm9sbCIsInRvdWNoZXMiLCJjc3Nwb2ludGVyZXZlbnRzIiwib250b3VjaGVuZEN1cnNvciIsIm9udG91Y2htb3ZlQ3Vyc29yIiwibXciLCJzY3JvbGx2YWx1ZW1heHciLCJ3aGljaCIsImNoZWNrU2VsZWN0aW9uU2Nyb2xsIiwicnQiLCJoYXNUZXh0U2VsZWN0ZWQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50Iiwib25zZWxlY3Rpb25zdGFydCIsIm9uc2VsZWN0aW9uZW5kIiwib25zZWxlY3Rpb25kcmFnIiwiZGVsZWdhdGUiLCJwcmV2ZW50RGVmYXVsdCIsImpxYmluZCIsImlzIiwiYWN0aXZlIiwibW91c2V3aGVlbCIsIm9ubW91c2V3aGVlbGhyIiwibm90aWNlQ3Vyc29yIiwiZXZlbnQiLCJnZXRBdHRyaWJ1dGUiLCJrZXkiLCJrZXlDb2RlIiwiY3RybCIsImN0cmxLZXkiLCJzaGlmdCIsInNoaWZ0S2V5IiwicmV0IiwiZG9TY3JvbGxQb3MiLCJkb1Njcm9sbFRvIiwib25zY3JlZW5yZXNpemUiLCJsYXp5UmVzaXplIiwidG1wIiwib25BdHRyaWJ1dGVDaGFuZ2UiLCJtdXRhdGlvbnMiLCJmb3JFYWNoIiwibXV0IiwiaGFzQ2xhc3MiLCJjb250YWlucyIsInNob3ciLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJfZG9tIiwibW8iLCJyZW1vdmVkTm9kZXMiLCJkZCIsInJlbW92ZSIsImF0dGFjaEV2ZW50IiwicmVzaXplWm9vbSIsIm9uaWZyYW1lbG9hZCIsImlmcmFtZXhkIiwiY29udGVudERvY3VtZW50IiwiY29udGVudFdpbmRvdyIsImRvbWFpbiIsImNvbnNvbGUiLCJsb2ciLCJjb250ZW50cyIsImZpbmQiLCJodG1sIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJoaCIsIm9uc2Nyb2xsIiwicmVhZHlTdGF0ZSIsInB5IiwiY3Vyc29ydGltZW91dCIsImx4Iiwic2hvd29ubW91c2VldmVudCIsImFuaW1hdGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIm9uUmVzaXplIiwicHJlbWF4aCIsInByZW1heHciLCJwcmV2aWV3aCIsInByZXZpZXd3IiwibGFzdHBvc2l0aW9uIiwiaGlkZVJhaWwiLCJoaWRlUmFpbEhyIiwic2hvd1JhaWwiLCJzaG93UmFpbEhyIiwibWluIiwicmVzaXplIiwiaGxhenlyZXNpemUiLCJfbW9kZXJuV2hlZWxFdmVudCIsImJ1YmJsZSIsIl9iaW5kIiwiZGVsdGFNb2RlIiwiZGVsdGFYIiwiZGVsdGFaIiwicmV0dXJuVmFsdWUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwiZGVsdGFZIiwid2hlZWxEZWx0YSIsImRldGFpbCIsImhpZGVyYWlscyIsImhpZGVSYWlscyIsInNob3dSYWlscyIsImYiLCJxIiwib24iLCJ3bmFtZSIsInBhc3NpdmVTdXBwb3J0ZWQiLCJvcHRpb25zIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXJyIiwiY2FuY2VsYWJsZSIsInByZXZlbnRNYW5pcHVsYXRpb24iLCJFdmVudCIsImNvbnN0cnVjdG9yIiwiRWxlbWVudCIsImxpc3RlbmVyIiwidXNlQ2FwdHVyZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImNhbmNlbCIsImRlIiwiciIsImNvbmNhdCIsInVuZGVsZWdhdGUiLCJzcGxpY2UiLCJfdW5iaW5kIiwiYiIsInBhc3NpdmUiLCJjYXB0dXJlIiwiYnViIiwidW5iaW5kQWxsIiwidW5iaW5kIiwidG9nZ2xlIiwiZGlzY29ubmVjdCIsImRhdGEiLCJuaWNlc2Nyb2xsIiwiaSIsImVhY2giLCJzY3JvbGxzdGFydCIsInNjcm9sbGVuZCIsInNjcm9sbGNhbmNlbCIsInpvb21pbiIsInpvb21vdXQiLCJpc1Njcm9sbGFibGUiLCJvdiIsImdldE5pY2VTY3JvbGwiLCJjeCIsImN5IiwicngiLCJyeSIsIm1zIiwiaW5mbyIsImN1cnJlbnQiLCJyZXF1ZXN0IiwiZW5kIiwic3BlZWQiLCJzY3JvbGxkaXJ5Iiwic2Nyb2xsZGlyeCIsInNjcm9sbHRtciIsInNjcm9sbHNwZCIsImRvU2Nyb2xsUmVsYXRpdmUiLCJjaGtzY3JvbGwiLCJpc3doZWVsIiwiZ2FwIiwiZHgiLCJkeSIsImR0eSIsImR0eCIsImhhc3BhcmVudHNjcm9sbGluZ3BoYXNlIiwiZXhlY1Njcm9sbFdoZWVsIiwibnciLCJjaGsiLCJzY3JvbGxtb24iLCJnZXRUcmFuc2l0aW9uU3BlZWQiLCJkaWYiLCJsYXN0dHJhbnNpdGlvbnN0eWxlIiwiaXN0aW1lIiwiZXgiLCJ0cmFucyIsImN1cnNvcnVwZGF0ZSIsInJ1bm5pbmciLCJzdGFydCIsIm0iLCJsb29wIiwibGZ0IiwiZHN0Iiwic3FydCIsInNjcm9sbGVuZHRyYXBwZWQiLCJjbGVhckludGVydmFsIiwiY2xpcHBlZCIsImJ6c2Nyb2xsIiwic3RwIiwicmVsYXRpdmUiLCJjaGVja0NvbnRlbnRTaXplIiwiem9vbXJlc3RvcmUiLCJwcCIsInBhZGRpbmciLCJtYXJnaW4iLCJia2ciLCJuYyIsImxhc3R4IiwibGFzdHkiLCJzcGVlZHgiLCJzcGVlZHkiLCJsYXN0dGltZSIsInN0ZXB0aW1lIiwic25hcHgiLCJzbmFweSIsImRlbXVseCIsImRlbXVseSIsImxhc3RzY3JvbGx4IiwibGFzdHNjcm9sbHkiLCJjaGt4IiwiY2hreSIsIm5ld3kiLCJuZXd4IiwiZG9TbmFweSIsInNuYXAiLCJncCIsInBhZ2VoIiwicGFnZXciLCJ4bSIsImRlbXVseHkiLCJmbG9vciIsIl9zY3JvbGxUb3AiLCJjc3NIb29rcyIsImVsZW0iLCJjb21wdXRlZCIsImV4dHJhIiwibmljZSIsInNldCIsInZhbHVlIiwiX3Njcm9sbExlZnQiLCJOaWNlU2Nyb2xsQXJyYXkiLCJkb21zIiwiZXEiLCJpZHgiLCJtcGxleCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImluZGV4IiwiZXhwciIsInBzZXVkb3MiLCJuaWNlU2Nyb2xsIiwid3JhcHBlciIsIl9vcHQiLCIkdGhpcyIsIndycCIsIk5pY2VTY3JvbGwiLCJnZXRqUXVlcnkiLCJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsIkVycm9yIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZmxhdCIsImFycmF5IiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwiaXRlbSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJzY3JpcHQiLCJ0ZXh0Iiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJzZWxlY3RvciIsImNvbnRleHQiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsIm1lcmdlIiwicHJldk9iamVjdCIsIm1hcCIsImZpcnN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImoiLCJzb3J0IiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9pIiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5wdXQiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJlbGVtZW50cyIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJfbWF0Y2hJbmRleGVzIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJfIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsInNob3dIaWRlIiwidmFsdWVzIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsImJ1aWxkRnJhZ21lbnQiLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwidHJpZ2dlciIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiY3JlYXRlIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJiZWZvcmV1bmxvYWQiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJjaGFyQ29kZSIsImJ1dHRvbnMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInRvRWxlbWVudCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJtZWFzdXJlIiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInN0ZXAiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJ0cmltIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJtZW51IiwicGFkZGluZ0xlZnQiXSwic291cmNlUm9vdCI6IiJ9